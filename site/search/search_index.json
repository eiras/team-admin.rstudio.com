{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the RStudio Team administrator training course. We hope you'll enjoy this introduction to the administration of RStudio's professional products. For questions or help with the course material, please contact your instructor.","title":"Home"},{"location":"overview/","text":"Concept map RStudio Team refers to the set of three RStudio products that are available commercially: RStudio Server Pro RStudio Connect RStudio Package Manager Course goals We will provide you with a virtual machine with: Ubuntu Roundcube email server LDAP server During this course you will build a sandbox environment that runs the RStudio Team products: RStudio Server Pro Install R from pre-compiled binaries Install RStudio Server Pro Integrate with LDAP authentication (for single sign-on) RStudio Connect Install and configure RStudio Connect Integrate with a mail server Understand administration, deployment and sandboxing RStudio Package Manager Install and configure RStudio Package Manager Define package sources and set up repositories Assumptions The course covers some of the options for configuring RStudio Team products with a solutions-first approach that highlights settings and configurations along the way. As an attendee you should be comfortable in the Linux terminal but you don\u2019t need strong R skills. However, we expect most students on this course to be: most likely R literate AND interested in what RStudio products can do AND interested in understanding how to configure the server. Pre-requirements Skills you should already have We assume that you are confident in managing Linux (Ubuntu). Specifically, I assume you already know how to: Edit configuration files using vim or nano Tail a log file Stop and start services SSH into a remote virtual machine We will not cover any of these topics in detail: Vertical scaling with load balancing Docker, kubernetes and launcher Authentication methods other than LDAP Database configuration, pro drivers Setting up proxies or reverse proxies, e.g. using Nginx or Apache Automated, scripted deployment, e.g. using Chef, Puppet or Ansible Software and hardware requirements You should be working on a laptop with a modern web browser. We have tested on Chrome and Firefox, but any web browser in the officially supported list is fine. Your laptop firewall should allow traffic on websockets (for RStudio Server) You should be able to SSH into an AWS virtual machine. Note This means you may have to install an SSH client on your laptop: On Mac OS and Linux this may well be built into your shell On Windows , you may elect to use PuTTy or some other SSH client, e.g. SuperPuTTy or MobaXterm, or use the Windows Subsystem for Linux (WSL) to access a Linux shell. Internet access requirements You will not be required to install any software on your laptop (other than the SSH client). We will provide you with an Amazon AWS virtual machine and you will access this VM and do installation there. If you work in a heavily regulated company, you may have to provide your IT security team with the following information, to ensure you can access all the material: You must be able to access these web domains: rstudio.com shinyapps.io rstudio.cloud rstudio-cdn.s3.amazonaws.com Your firewall must allow access to the IP address of the virtual machine: The IP address and host name will be allocated dynamically when you claim the machine (once the course starts) At the moment we do not have a mechanism to allocate IP addresses in a pre-defined range You will communicate to the services inside this VM via a proxy on port 80, which eventually resolves to ports: 8787 (RStudio Server Pro) 4242 (RStudio Package Manager) 3939 (RStudio Connect) Workaround if your organisation doesn't allow SSH terminals If you create an account on RStudio Cloud , it is possible to create a workspace and project, then use the built-in terminal in RStudio IDE to start an SSH session.","title":"Overview"},{"location":"overview/#concept-map","text":"RStudio Team refers to the set of three RStudio products that are available commercially: RStudio Server Pro RStudio Connect RStudio Package Manager","title":"Concept map"},{"location":"overview/#course-goals","text":"We will provide you with a virtual machine with: Ubuntu Roundcube email server LDAP server During this course you will build a sandbox environment that runs the RStudio Team products: RStudio Server Pro Install R from pre-compiled binaries Install RStudio Server Pro Integrate with LDAP authentication (for single sign-on) RStudio Connect Install and configure RStudio Connect Integrate with a mail server Understand administration, deployment and sandboxing RStudio Package Manager Install and configure RStudio Package Manager Define package sources and set up repositories","title":"Course goals"},{"location":"overview/#assumptions","text":"The course covers some of the options for configuring RStudio Team products with a solutions-first approach that highlights settings and configurations along the way. As an attendee you should be comfortable in the Linux terminal but you don\u2019t need strong R skills. However, we expect most students on this course to be: most likely R literate AND interested in what RStudio products can do AND interested in understanding how to configure the server.","title":"Assumptions"},{"location":"overview/#pre-requirements","text":"","title":"Pre-requirements"},{"location":"overview/#skills-you-should-already-have","text":"We assume that you are confident in managing Linux (Ubuntu). Specifically, I assume you already know how to: Edit configuration files using vim or nano Tail a log file Stop and start services SSH into a remote virtual machine We will not cover any of these topics in detail: Vertical scaling with load balancing Docker, kubernetes and launcher Authentication methods other than LDAP Database configuration, pro drivers Setting up proxies or reverse proxies, e.g. using Nginx or Apache Automated, scripted deployment, e.g. using Chef, Puppet or Ansible","title":"Skills you should already have"},{"location":"overview/#software-and-hardware-requirements","text":"You should be working on a laptop with a modern web browser. We have tested on Chrome and Firefox, but any web browser in the officially supported list is fine. Your laptop firewall should allow traffic on websockets (for RStudio Server) You should be able to SSH into an AWS virtual machine. Note This means you may have to install an SSH client on your laptop: On Mac OS and Linux this may well be built into your shell On Windows , you may elect to use PuTTy or some other SSH client, e.g. SuperPuTTy or MobaXterm, or use the Windows Subsystem for Linux (WSL) to access a Linux shell.","title":"Software and hardware requirements"},{"location":"overview/#internet-access-requirements","text":"You will not be required to install any software on your laptop (other than the SSH client). We will provide you with an Amazon AWS virtual machine and you will access this VM and do installation there. If you work in a heavily regulated company, you may have to provide your IT security team with the following information, to ensure you can access all the material: You must be able to access these web domains: rstudio.com shinyapps.io rstudio.cloud rstudio-cdn.s3.amazonaws.com Your firewall must allow access to the IP address of the virtual machine: The IP address and host name will be allocated dynamically when you claim the machine (once the course starts) At the moment we do not have a mechanism to allocate IP addresses in a pre-defined range You will communicate to the services inside this VM via a proxy on port 80, which eventually resolves to ports: 8787 (RStudio Server Pro) 4242 (RStudio Package Manager) 3939 (RStudio Connect)","title":"Internet access requirements"},{"location":"overview/#workaround-if-your-organisation-doesnt-allow-ssh-terminals","text":"If you create an account on RStudio Cloud , it is possible to create a workspace and project, then use the built-in terminal in RStudio IDE to start an SSH session.","title":"Workaround if your organisation doesn't allow SSH terminals"},{"location":"getting_started/how_it_works/","text":"Welcome to the RStudio Team system administration course! How this course works Initial state When you start the course, you have a mostly empty virtual machine (VM), inside a virtual private network that also contains a \"leader instance\". This leader contains a mail server and an LDAP server. Later during the course you integrate with both. Install R from pre-compiled binaries Your first task is to install R from pre-compiled binaries... Install RStudio Server Pro ... followed by installing RStudio Server Pro. Security - configure LDAP After installation, you integrate RStudio Server Pro with an authentication mechanism, in this case an LDAP server that is on the leader instance. Install and configure RStudio Connect After installing RStudio Connect you integrate with a RoundCube mail server (to enable Connect to send email), and you will establish a connection with RStudio Server Pro to deploy content. Use RStudio Connect You will deploy some applications and reports from RStudio Server Pro to Connect, including an app that reads data from a database. Install and use RStudio Package Manager Your final task is to install and configure RStudio Package Manager, and then to establish a connection with RStudio Server Pro. Training server logistics You have access to your own (virtual machine) server with pre-installed R, some R packages, and loaded with necessary demo files and folders. During this session you will: Get your login credentials for the virtual machine SSH into the machine Explore the machine, e.g. to find user files, classroom material, etc. Your turn Next complete the exercise. Signs of success: You can ssh into the Virtual Machine","title":"How the course works"},{"location":"getting_started/how_it_works/#how-this-course-works","text":"","title":"How this course works"},{"location":"getting_started/how_it_works/#initial-state","text":"When you start the course, you have a mostly empty virtual machine (VM), inside a virtual private network that also contains a \"leader instance\". This leader contains a mail server and an LDAP server. Later during the course you integrate with both.","title":"Initial state"},{"location":"getting_started/how_it_works/#install-r-from-pre-compiled-binaries","text":"Your first task is to install R from pre-compiled binaries...","title":"Install R from pre-compiled binaries"},{"location":"getting_started/how_it_works/#install-rstudio-server-pro","text":"... followed by installing RStudio Server Pro.","title":"Install RStudio Server Pro"},{"location":"getting_started/how_it_works/#security-configure-ldap","text":"After installation, you integrate RStudio Server Pro with an authentication mechanism, in this case an LDAP server that is on the leader instance.","title":"Security - configure LDAP"},{"location":"getting_started/how_it_works/#install-and-configure-rstudio-connect","text":"After installing RStudio Connect you integrate with a RoundCube mail server (to enable Connect to send email), and you will establish a connection with RStudio Server Pro to deploy content.","title":"Install and configure RStudio Connect"},{"location":"getting_started/how_it_works/#use-rstudio-connect","text":"You will deploy some applications and reports from RStudio Server Pro to Connect, including an app that reads data from a database.","title":"Use RStudio Connect"},{"location":"getting_started/how_it_works/#install-and-use-rstudio-package-manager","text":"Your final task is to install and configure RStudio Package Manager, and then to establish a connection with RStudio Server Pro.","title":"Install and use RStudio Package Manager"},{"location":"getting_started/how_it_works/#training-server-logistics","text":"You have access to your own (virtual machine) server with pre-installed R, some R packages, and loaded with necessary demo files and folders. During this session you will: Get your login credentials for the virtual machine SSH into the machine Explore the machine, e.g. to find user files, classroom material, etc.","title":"Training server logistics"},{"location":"getting_started/how_it_works/#your-turn","text":"Next complete the exercise. Signs of success: You can ssh into the Virtual Machine","title":"Your turn"},{"location":"getting_started/lab_ssh_in/","text":"Task: Get your VM host name and credentials Go to the classroom app: https://rstd.io/class Enter your classroom password Register with your name and email address You will get a home screen with a URL, user name and password Point your browser browser to the URL you are given Task: Open the getting started screen The screen should look similar to this: Task: SSH in Use the provided credentials to log in You can do this using your favourite SSH tool, including: linux terminal git bash PuTTy or SuperPutty In the terminal, use a command like the following (after substituting your own host name): ssh admin-user@ec2-99-999-99-999.us-east-2.compute.amazonaws.com This screencast demonstrates how to make the connection: Upon success you should be able to see the Ubuntu initial welcome information: Task: Explore some folder locations Make a mental note of the following folder locations Location Contents /usr/share/class classroom material /usr/local/src contains pre-downloaded source material /opt/R installation folder for R For example: ls /usr/share/class ls /usr/local/src","title":"Lab: SSH in"},{"location":"getting_started/lab_ssh_in/#task-get-your-vm-host-name-and-credentials","text":"Go to the classroom app: https://rstd.io/class Enter your classroom password Register with your name and email address You will get a home screen with a URL, user name and password Point your browser browser to the URL you are given","title":"Task: Get your VM host name and credentials"},{"location":"getting_started/lab_ssh_in/#task-open-the-getting-started-screen","text":"The screen should look similar to this:","title":"Task: Open the getting started screen"},{"location":"getting_started/lab_ssh_in/#task-ssh-in","text":"Use the provided credentials to log in You can do this using your favourite SSH tool, including: linux terminal git bash PuTTy or SuperPutty In the terminal, use a command like the following (after substituting your own host name): ssh admin-user@ec2-99-999-99-999.us-east-2.compute.amazonaws.com This screencast demonstrates how to make the connection: Upon success you should be able to see the Ubuntu initial welcome information:","title":"Task: SSH in"},{"location":"getting_started/lab_ssh_in/#task-explore-some-folder-locations","text":"Make a mental note of the following folder locations Location Contents /usr/share/class classroom material /usr/local/src contains pre-downloaded source material /opt/R installation folder for R For example: ls /usr/share/class ls /usr/local/src","title":"Task: Explore some folder locations"},{"location":"installing_rstudio_connect/using_connect/","text":"In this session In this session you: Connect your RStudio IDE to Connect Deploy a simple app Discover some other administrator tools Connecting the IDE Connecting your IDE to Connect To deploy content from the IDE to Connect, you first have to set up a connection, i.e. tell the IDE where to find Connect. RStudio --> Tools --> Global Options --> Publishing --> Connect Enter your server address: 'http:// /rsconnect' Video: Connecting your IDE to Connect Pointing IDE to Connect What does this do? Creates a public / private key pair and stores the key (and token) in a user-specific folder. Why do this? When you publish content you have a machine talking to another machine. That means you need a non-interactive way to authenticate. HINT: This theme will come up again ??? Run the following as a demo: ## R ## creates a directory rsconnect :: accountsConfigDir () ## sh ## shows a few .dcf files tree <directory> cat <result.dcf> Demo Deploy an app to Connect Navigate to 0_app and open app_0.R Select \"Run App\" In the upper-right hand corner, \"Publish\" ??? Observe how long it takes That was pretty easy ... ... make a trivial change in the app and deploy again. Write down your observations. ??? Much faster App failed Understanding failure Understanding failure Deploying content to Connect is like taking a kid from home to daycare. If a problem arises, you must troubleshoot Did the problem happen at home (you forgot it)? Or at daycare (they lost it)? There also are different rules at home and daycare. Explore some troubleshooting tools Deployment Log Bundles Application Log Connect Sandbox Deployment log Preparing to deploy application...DONE Uploading bundle for application: 1 ...DONE Deploying bundle: 1 for application: 1 ... Building Shiny application... Bundle requested R version 3 .4.1 ; using /usr/lib64/R/bin/R which has version 3 .4.1 2017 /12/05 00 :15:36.162805962 # Validating R library read / write permissions ------------ 2017 /12/05 00 :15:36.188861769 # Validating packrat installation -------------------------- 2017 /12/05 00 :15:36.189041620 Installed packrat SHA is: 29b1c491b8f90aab40077d011d0077d81a99d7d4 2017 /12/05 00 :15:36.189180324 Packaged packrat SHA is: 29b1c491b8f90aab40077d011d0077d81a99d7d4 2017 /12/05 00 :15:36.190624677 Packrat is up-to-date. 2017 /12/05 00 :15:36.190776099 R version: 3 .4.1 2017 /12/05 00 :15:36.190838996 packrat version: 0 .4.8.43 2017 /12/05 00 :15:36.191408200 # Validating packrat cache read / write permissions -------- 2017 /12/05 00 :15:36.307287524 Audited package hashes with local packrat installation. 2017 /12/05 00 :15:36.310763166 # Installing required R packages withpackrat::restore()` --- 2017 /12/05 00 :15:36.491569335 Installing BH ( 1 .65.0-1 ) ... 2017 /12/05 00 :15:43.453766543 Caching BH. 2017 /12/05 00 :15:45.498690843 Using cached BH. 2017 /12/05 00 :15:45.645180957 OK ( built source ) 2017 /12/05 00 :15:45.645525390 Installing MASS ( 7 .3-47 ) ... 2017 /12/05 00 :15:53.866638423 Caching MASS. 2017 /12/05 00 :15:53.891269915 Using cached MASS. 2017 /12/05 00 :15:53.892713176 OK ( built source ) 2017 /12/05 00 :15:53.892966963 Installing R6 ( 2 .2.2 ) ... 2017 /12/05 00 :15:55.248487715 Caching R6. 2017 /12/05 00 :15:55.253542270 Using cached R6. 2017 /12/05 00 :15:55.254496893 OK ( built source ) 2017 /12/05 00 :15:55.254752408 Installing RColorBrewer ( 1 .1-2 ) ... 2017 /12/05 00 :15:56.433528568 Caching RColorBrewer. 2017 /12/05 00 :15:56.436468956 Using cached RColorBrewer. 2017 /12/05 00 :15:56.437064457 OK ( built source ) 2017 /12/05 00 :15:56.437335870 Installing Rcpp ( 0 .12.13 ) ... The deployment bundle Components of the bundle Part 1: Create Bundle on Client Part 2: Upload Bundle on RSC Part 3: Restore Bundle Components of the bundle: Create and upload Part 1: Create Bundle on Client Preparing to deploy application...DONE Part 2: Upload Bundle on RSC Uploading bundle for application: 1 ...DONE Deploying bundle: 1 for application: 1 ... Components of the bundle: Restore Part 3: Restore Bundle Bundle requested R version 3 .4.1 ; using /usr/lib64/R/bin/R which has version 3 .4.1 2017 /12/05 00 :15:36.162805962 # Validating R library read / write permissions -------------------------------- 2017 /12/05 00 :15:36.188861769 # Validating packrat installation ---------------------------------------------- 2017 /12/05 00 :15:36.189041620 Installed packrat SHA is: 29b1c491b8f90aab40077d011d0077d81a99d7d4 2017 /12/05 00 :15:36.189180324 Packaged packrat SHA is: 29b1c491b8f90aab40077d011d0077d81a99d7d4 2017 /12/05 00 :15:36.190624677 Packrat is up-to-date. 2017 /12/05 00 :15:36.190776099 R version: 3 .4.1 2017 /12/05 00 :15:36.190838996 packrat version: 0 .4.8.43 2017 /12/05 00 :15:36.191408200 # Validating packrat cache read / write permissions ---------------------------- 2017 /12/05 00 :15:36.307287524 Audited package hashes with local packrat installation. 2017 /12/05 00 :15:36.310763166 # Installing required R packages withpackrat::restore()` --------------------- 2017 /12/05 00 :15:36.491569335 Installing BH ( 1 .65.0-1 ) ... 2017 /12/05 00 :15:43.453766543 Caching BH. 2017 /12/05 00 :15:45.498690843 Using cached BH. 2017 /12/05 00 :15:45.645180957 OK ( built source ) 2017 /12/05 00 :15:45.645525390 Installing MASS ( 7 .3-47 ) ... 2017 /12/05 00 :15:53.866638423 Caching MASS. 2017 /12/05 00 :15:53.891269915 Using cached MASS. 2017 /12/05 00 :15:53.892713176 OK ( built source ) 2017 /12/05 00 :15:53.892966963 Installing R6 ( 2 .2.2 ) ... 2017 /12/05 00 :15:55.248487715 Caching R6. 2017 /12/05 00 :15:55.253542270 Using cached R6. 2017 /12/05 00 :15:55.254496893 OK ( built source ) 2017 /12/05 00 :15:55.254752408 Installing RColorBrewer ( 1 .1-2 ) ... 2017 /12/05 00 :15:56.433528568 Caching RColorBrewer. 2017 /12/05 00 :15:56.436468956 Using cached RColorBrewer. 2017 /12/05 00 :15:56.437064457 OK ( built source ) 2017 /12/05 00 :15:56.437335870 Installing Rcpp ( 0 .12.13 ) ... Summary of the bundle Lots happened during the deployment. First thing is the deployment log in the IDE: What is this bundle thing? Application and bundle Id Version of R requested vs used Packages to install Bundle: bundle id and app id The bundle id and app id contain useful information. This is the log for a deployment to an app with app id 2 . Notice the bundle id is 5 : Discovering document dependencies... OK Preparing to deploy document...DONE Uploading bundle for document: 2 ...DONE Deploying bundle: 5 for document: 2 ... Building R Markdown document... The app id (2) corresponds to the app id in Connect (2): Redeployment increments the bundle id Redeploying the app increments the bundle id (in this case to 6). (The bundle id is unique across the Connect instance) Discovering document dependencies... OK Preparing to deploy document...DONE Uploading bundle for document: 2 ...DONE Deploying bundle: 6 for document: 2 ... Building R Markdown document... Video: viewing the bundle in Connect Viewing the bundle in Connect You can download the bundle from Connect, and the bundle id corresponds to the information in the deployment log: Notice: Both bundles 2 and 6 appear in Source Versions You can view, download or activate any previous bundle Understanding what's in the bundle Part 1: Bundle (What are you sending to daycare?) To understand what happened in RStudio, download the bundle from Connect. Find the \"Source versions\" button by expanding the ... pills button Then download the bundle ??? Download the bundle from RSC and show the contents of the packrat.lock file and the manifest.json file. Have them do this and discuss the results. Part 1: Bundle (what's in the bundle?) packrat.lock manifest.json PackratFormat: 1.4 PackratVersion: 0.4.8.1 RVersion: 3.4.1 Repos: CRAN=https://cran.rstudio.com/ Package: BH Source: CRAN Version: 1.65.0-1 Hash: 95f62be4d6916aae14a310a8b56a6475 application code supporting files (data) Part 1: Bundle (deployment record) Deploying content creates a deployment record in the rsconnect folder. name: admin_training_overview title: Admin training: Overview username: andrie account: andrie server: colorado.rstudio.com hostUrl: https://colorado.rstudio.com:3939/__api__ appId: 1368 bundleId: 14449 url: https://colorado.rstudio.com:3939/admin_training_overview/ when: 1534319482.42767 Mostly used to help the IDE identify \"re-deploying\" ??? Show the contents of the rsconnect folder Part 2: Upload (How do you get to daycare?) HTTP Requests ??? Discuss the pitfalls of custom SSL certs. Part 3: Restore (What happens at daycare?) Unpacking the bundle --> installing the packages ??? This slide is all about unpacking the bundle and installing packages. Where did the bundle go? The internal architecture of RStudio Connect: ??? Talk about backups and migrations here? Have them navigate to /var/lib/rstudio-connect and run the tree command. Part 3: Restore (What happens at daycare?) Connect installs packages from repositories. Each app has an isolated runtime environment, allowing apps to depend on different versions of packages. App Package version 1 ggplot 0.8.0 2 ggplot 0.1.0 This is ok! But it means Connect can't use a system library, because those can only have 1 version of a package. ??? Main takeaway, RSC has to be able to install the package: Repo access (and what to do offline) System Libraries Part 3: Restore Most common sources of pain: Repository is not available Solution: Set up an offline repository (RStudio Package Manager) Package can not be installed (System Libraries) Solution: Add package to the system library. Good news is the 80:20 rule applies. ??? Main takeaway, RSC has to be able to install the package: * Repo access (and what to do offline) * System Libraries Part 3: Restore (daycare rules are different) RStudio Connect provides process management: sandboxing isolation for apps with tmp directory masking Sandboxing Sandboxing The Connect admin guide on sandboxing : 'The RStudio Connect process runs as the root user. It needs escalated privileges to allow binding to protected ports and to create \"unshare\" environments that contain the R processes.' This is why Connect needs to run as root! Sandboxing: packages After uploading the bundle, Connect must be able to find and install all packages used by your app. Typically Connect will look on CRAN and github for these packages. However, if you use private packages in your app, you have several options: Create an internal, private repository Use external package installation a form of white listing (at your own risk...) Use RStudio Package Manager You cover this in module 7 and 8 of this course \"RunAs\" User Understanding the \"RunAs\" user Connect admins can change the RunAs user for any deployed app. Possible values: Default rstudio-connect user See User Account for Processes Local service account With PAM Authentication, the \"logged-in\" user See Current user execution in the connect admin guide Redeployment Redeployment Re-deployment of apps is substantially faster than the first deployment. The reason is that Connect creates a cache of binary packages. If a package (with matching version) has previously been instaled, then the installation simply retrieves the package from the cache. Hint: You can see installation from cache in the deployment log Define \"collaborator\" Collaborate on application settings Collaborate on code (co-publish) Start by sharing the rsconnect folder ??? Show an example of publishing to content that someone else deployed (just so they can see what the IDE looks like) Content discoverability Content discoverability Content search by title Connect allows you to search for content in several ways. The first is a simple search on content title. Tag schema (taxonomy) The second way of searching for content on Connect is by using a taxonomy, or tag schema, of tags. Creating a tag schema The Connect administrator can: view the \"Tags\" tab in the admin pane create a custom schema the is completely customizable by any Connect administrator Tags: tagging content Content publishers can tag their own content, using the schema that was pre-defined by the admin Searching by tag Content viewers can search content by tag. The normal access control rules apply, i.e. you can only see what you have access to. Vanity URLs Vanity URLs Vanity URLS are useful to maintain a \"static\" URL even if you redeploy the content to a different Connect content ID. With PublishersCanManageVanities set to true administrators and publishers can create vanity URLs. Creating a vanity URL Viewing a vanity URL Other content deployment options Publishing apps with continuous Integration Authentication: machine to machine Jenkins needs a key Environment: Jenkins must create the bundle. Implies Jenkins must replicate the dev environment Testing: #2 sounds like a pain. You can take advantage of your work for a very powerful side effect: Shiny unit testing ( shinytest ) Other resources: * https://solutions.rstudio.com/deploy/methods/ * https://github.com/slopp/rsc-ci-test * https://docs.rstudio.com/connect/admin/appendix/ci/ Publishing apps from git / github You can also deploy artefacts to Connect directly from a git repository (including github) Resources: https://solutions.rstudio.com/deploy/methods/#deploying-from-git-repositories Advanced admin topics Managing Connect in an offline environment Need to set up a package repository that Connect can access: Several ways to do this, including: miniCRAN rsync The recommended option: RStudio Package Manager Backup and migration Backup: SQLite database is backed up automatically Recommend snapshotting the entire Data Directory as well. Migrations: A bit tricker because of all those installed packages that have been cached. Follow the admin guide instructions. Your turn Next complete the exercise. Signs of success: You have connected your IDE to Connect You have published at least one app You understand how to read the deployment log and look for errors","title":"Using connect"},{"location":"installing_rstudio_connect/using_connect/#in-this-session","text":"In this session you: Connect your RStudio IDE to Connect Deploy a simple app Discover some other administrator tools","title":"In this session"},{"location":"installing_rstudio_connect/using_connect/#connecting-the-ide","text":"","title":"Connecting the IDE"},{"location":"installing_rstudio_connect/using_connect/#connecting-your-ide-to-connect","text":"To deploy content from the IDE to Connect, you first have to set up a connection, i.e. tell the IDE where to find Connect. RStudio --> Tools --> Global Options --> Publishing --> Connect Enter your server address: 'http:// /rsconnect'","title":"Connecting your IDE to Connect"},{"location":"installing_rstudio_connect/using_connect/#video-connecting-your-ide-to-connect","text":"","title":"Video: Connecting your IDE to Connect"},{"location":"installing_rstudio_connect/using_connect/#pointing-ide-to-connect","text":"What does this do? Creates a public / private key pair and stores the key (and token) in a user-specific folder. Why do this? When you publish content you have a machine talking to another machine. That means you need a non-interactive way to authenticate. HINT: This theme will come up again ??? Run the following as a demo: ## R ## creates a directory rsconnect :: accountsConfigDir () ## sh ## shows a few .dcf files tree <directory> cat <result.dcf>","title":"Pointing IDE to Connect"},{"location":"installing_rstudio_connect/using_connect/#demo","text":"Deploy an app to Connect Navigate to 0_app and open app_0.R Select \"Run App\" In the upper-right hand corner, \"Publish\" ??? Observe how long it takes","title":"Demo"},{"location":"installing_rstudio_connect/using_connect/#that-was-pretty-easy","text":"... make a trivial change in the app and deploy again. Write down your observations. ??? Much faster App failed","title":"That was pretty easy ..."},{"location":"installing_rstudio_connect/using_connect/#understanding-failure","text":"","title":"Understanding failure"},{"location":"installing_rstudio_connect/using_connect/#understanding-failure_1","text":"Deploying content to Connect is like taking a kid from home to daycare. If a problem arises, you must troubleshoot Did the problem happen at home (you forgot it)? Or at daycare (they lost it)? There also are different rules at home and daycare.","title":"Understanding failure"},{"location":"installing_rstudio_connect/using_connect/#explore-some-troubleshooting-tools","text":"Deployment Log Bundles Application Log Connect Sandbox","title":"Explore some troubleshooting tools"},{"location":"installing_rstudio_connect/using_connect/#deployment-log","text":"Preparing to deploy application...DONE Uploading bundle for application: 1 ...DONE Deploying bundle: 1 for application: 1 ... Building Shiny application... Bundle requested R version 3 .4.1 ; using /usr/lib64/R/bin/R which has version 3 .4.1 2017 /12/05 00 :15:36.162805962 # Validating R library read / write permissions ------------ 2017 /12/05 00 :15:36.188861769 # Validating packrat installation -------------------------- 2017 /12/05 00 :15:36.189041620 Installed packrat SHA is: 29b1c491b8f90aab40077d011d0077d81a99d7d4 2017 /12/05 00 :15:36.189180324 Packaged packrat SHA is: 29b1c491b8f90aab40077d011d0077d81a99d7d4 2017 /12/05 00 :15:36.190624677 Packrat is up-to-date. 2017 /12/05 00 :15:36.190776099 R version: 3 .4.1 2017 /12/05 00 :15:36.190838996 packrat version: 0 .4.8.43 2017 /12/05 00 :15:36.191408200 # Validating packrat cache read / write permissions -------- 2017 /12/05 00 :15:36.307287524 Audited package hashes with local packrat installation. 2017 /12/05 00 :15:36.310763166 # Installing required R packages withpackrat::restore()` --- 2017 /12/05 00 :15:36.491569335 Installing BH ( 1 .65.0-1 ) ... 2017 /12/05 00 :15:43.453766543 Caching BH. 2017 /12/05 00 :15:45.498690843 Using cached BH. 2017 /12/05 00 :15:45.645180957 OK ( built source ) 2017 /12/05 00 :15:45.645525390 Installing MASS ( 7 .3-47 ) ... 2017 /12/05 00 :15:53.866638423 Caching MASS. 2017 /12/05 00 :15:53.891269915 Using cached MASS. 2017 /12/05 00 :15:53.892713176 OK ( built source ) 2017 /12/05 00 :15:53.892966963 Installing R6 ( 2 .2.2 ) ... 2017 /12/05 00 :15:55.248487715 Caching R6. 2017 /12/05 00 :15:55.253542270 Using cached R6. 2017 /12/05 00 :15:55.254496893 OK ( built source ) 2017 /12/05 00 :15:55.254752408 Installing RColorBrewer ( 1 .1-2 ) ... 2017 /12/05 00 :15:56.433528568 Caching RColorBrewer. 2017 /12/05 00 :15:56.436468956 Using cached RColorBrewer. 2017 /12/05 00 :15:56.437064457 OK ( built source ) 2017 /12/05 00 :15:56.437335870 Installing Rcpp ( 0 .12.13 ) ...","title":"Deployment log"},{"location":"installing_rstudio_connect/using_connect/#the-deployment-bundle","text":"","title":"The deployment bundle"},{"location":"installing_rstudio_connect/using_connect/#components-of-the-bundle","text":"Part 1: Create Bundle on Client Part 2: Upload Bundle on RSC Part 3: Restore Bundle","title":"Components of the bundle"},{"location":"installing_rstudio_connect/using_connect/#components-of-the-bundle-create-and-upload","text":"Part 1: Create Bundle on Client Preparing to deploy application...DONE Part 2: Upload Bundle on RSC Uploading bundle for application: 1 ...DONE Deploying bundle: 1 for application: 1 ...","title":"Components of the bundle: Create and upload"},{"location":"installing_rstudio_connect/using_connect/#components-of-the-bundle-restore","text":"Part 3: Restore Bundle Bundle requested R version 3 .4.1 ; using /usr/lib64/R/bin/R which has version 3 .4.1 2017 /12/05 00 :15:36.162805962 # Validating R library read / write permissions -------------------------------- 2017 /12/05 00 :15:36.188861769 # Validating packrat installation ---------------------------------------------- 2017 /12/05 00 :15:36.189041620 Installed packrat SHA is: 29b1c491b8f90aab40077d011d0077d81a99d7d4 2017 /12/05 00 :15:36.189180324 Packaged packrat SHA is: 29b1c491b8f90aab40077d011d0077d81a99d7d4 2017 /12/05 00 :15:36.190624677 Packrat is up-to-date. 2017 /12/05 00 :15:36.190776099 R version: 3 .4.1 2017 /12/05 00 :15:36.190838996 packrat version: 0 .4.8.43 2017 /12/05 00 :15:36.191408200 # Validating packrat cache read / write permissions ---------------------------- 2017 /12/05 00 :15:36.307287524 Audited package hashes with local packrat installation. 2017 /12/05 00 :15:36.310763166 # Installing required R packages withpackrat::restore()` --------------------- 2017 /12/05 00 :15:36.491569335 Installing BH ( 1 .65.0-1 ) ... 2017 /12/05 00 :15:43.453766543 Caching BH. 2017 /12/05 00 :15:45.498690843 Using cached BH. 2017 /12/05 00 :15:45.645180957 OK ( built source ) 2017 /12/05 00 :15:45.645525390 Installing MASS ( 7 .3-47 ) ... 2017 /12/05 00 :15:53.866638423 Caching MASS. 2017 /12/05 00 :15:53.891269915 Using cached MASS. 2017 /12/05 00 :15:53.892713176 OK ( built source ) 2017 /12/05 00 :15:53.892966963 Installing R6 ( 2 .2.2 ) ... 2017 /12/05 00 :15:55.248487715 Caching R6. 2017 /12/05 00 :15:55.253542270 Using cached R6. 2017 /12/05 00 :15:55.254496893 OK ( built source ) 2017 /12/05 00 :15:55.254752408 Installing RColorBrewer ( 1 .1-2 ) ... 2017 /12/05 00 :15:56.433528568 Caching RColorBrewer. 2017 /12/05 00 :15:56.436468956 Using cached RColorBrewer. 2017 /12/05 00 :15:56.437064457 OK ( built source ) 2017 /12/05 00 :15:56.437335870 Installing Rcpp ( 0 .12.13 ) ...","title":"Components of the bundle: Restore"},{"location":"installing_rstudio_connect/using_connect/#summary-of-the-bundle","text":"Lots happened during the deployment. First thing is the deployment log in the IDE: What is this bundle thing? Application and bundle Id Version of R requested vs used Packages to install","title":"Summary of the bundle"},{"location":"installing_rstudio_connect/using_connect/#bundle-bundle-id-and-app-id","text":"The bundle id and app id contain useful information. This is the log for a deployment to an app with app id 2 . Notice the bundle id is 5 : Discovering document dependencies... OK Preparing to deploy document...DONE Uploading bundle for document: 2 ...DONE Deploying bundle: 5 for document: 2 ... Building R Markdown document... The app id (2) corresponds to the app id in Connect (2):","title":"Bundle: bundle id and app id"},{"location":"installing_rstudio_connect/using_connect/#redeployment-increments-the-bundle-id","text":"Redeploying the app increments the bundle id (in this case to 6). (The bundle id is unique across the Connect instance) Discovering document dependencies... OK Preparing to deploy document...DONE Uploading bundle for document: 2 ...DONE Deploying bundle: 6 for document: 2 ... Building R Markdown document...","title":"Redeployment increments the bundle id"},{"location":"installing_rstudio_connect/using_connect/#video-viewing-the-bundle-in-connect","text":"","title":"Video: viewing the bundle in Connect"},{"location":"installing_rstudio_connect/using_connect/#viewing-the-bundle-in-connect","text":"You can download the bundle from Connect, and the bundle id corresponds to the information in the deployment log: Notice: Both bundles 2 and 6 appear in Source Versions You can view, download or activate any previous bundle","title":"Viewing the bundle in Connect"},{"location":"installing_rstudio_connect/using_connect/#understanding-whats-in-the-bundle","text":"","title":"Understanding what's in the bundle"},{"location":"installing_rstudio_connect/using_connect/#part-1-bundle-what-are-you-sending-to-daycare","text":"To understand what happened in RStudio, download the bundle from Connect. Find the \"Source versions\" button by expanding the ... pills button Then download the bundle ??? Download the bundle from RSC and show the contents of the packrat.lock file and the manifest.json file. Have them do this and discuss the results.","title":"Part 1: Bundle (What are you sending to daycare?)"},{"location":"installing_rstudio_connect/using_connect/#part-1-bundle-whats-in-the-bundle","text":"packrat.lock manifest.json PackratFormat: 1.4 PackratVersion: 0.4.8.1 RVersion: 3.4.1 Repos: CRAN=https://cran.rstudio.com/ Package: BH Source: CRAN Version: 1.65.0-1 Hash: 95f62be4d6916aae14a310a8b56a6475 application code supporting files (data)","title":"Part 1:  Bundle (what's in the bundle?)"},{"location":"installing_rstudio_connect/using_connect/#part-1-bundle-deployment-record","text":"Deploying content creates a deployment record in the rsconnect folder. name: admin_training_overview title: Admin training: Overview username: andrie account: andrie server: colorado.rstudio.com hostUrl: https://colorado.rstudio.com:3939/__api__ appId: 1368 bundleId: 14449 url: https://colorado.rstudio.com:3939/admin_training_overview/ when: 1534319482.42767 Mostly used to help the IDE identify \"re-deploying\" ??? Show the contents of the rsconnect folder","title":"Part 1: Bundle (deployment record)"},{"location":"installing_rstudio_connect/using_connect/#part-2-upload-how-do-you-get-to-daycare","text":"HTTP Requests ??? Discuss the pitfalls of custom SSL certs.","title":"Part 2: Upload (How do you get to daycare?)"},{"location":"installing_rstudio_connect/using_connect/#part-3-restore-what-happens-at-daycare","text":"Unpacking the bundle --> installing the packages ??? This slide is all about unpacking the bundle and installing packages.","title":"Part 3: Restore (What happens at daycare?)"},{"location":"installing_rstudio_connect/using_connect/#where-did-the-bundle-go","text":"The internal architecture of RStudio Connect: ??? Talk about backups and migrations here? Have them navigate to /var/lib/rstudio-connect and run the tree command.","title":"Where did the bundle go?"},{"location":"installing_rstudio_connect/using_connect/#part-3-restore-what-happens-at-daycare_1","text":"Connect installs packages from repositories. Each app has an isolated runtime environment, allowing apps to depend on different versions of packages. App Package version 1 ggplot 0.8.0 2 ggplot 0.1.0 This is ok! But it means Connect can't use a system library, because those can only have 1 version of a package. ??? Main takeaway, RSC has to be able to install the package: Repo access (and what to do offline) System Libraries","title":"Part 3: Restore (What happens at daycare?)"},{"location":"installing_rstudio_connect/using_connect/#part-3-restore","text":"Most common sources of pain: Repository is not available Solution: Set up an offline repository (RStudio Package Manager) Package can not be installed (System Libraries) Solution: Add package to the system library. Good news is the 80:20 rule applies. ??? Main takeaway, RSC has to be able to install the package: * Repo access (and what to do offline) * System Libraries","title":"Part 3: Restore"},{"location":"installing_rstudio_connect/using_connect/#part-3-restore-daycare-rules-are-different","text":"RStudio Connect provides process management: sandboxing isolation for apps with tmp directory masking","title":"Part 3: Restore (daycare rules are different)"},{"location":"installing_rstudio_connect/using_connect/#sandboxing","text":"","title":"Sandboxing"},{"location":"installing_rstudio_connect/using_connect/#sandboxing_1","text":"The Connect admin guide on sandboxing : 'The RStudio Connect process runs as the root user. It needs escalated privileges to allow binding to protected ports and to create \"unshare\" environments that contain the R processes.' This is why Connect needs to run as root!","title":"Sandboxing"},{"location":"installing_rstudio_connect/using_connect/#sandboxing-packages","text":"After uploading the bundle, Connect must be able to find and install all packages used by your app. Typically Connect will look on CRAN and github for these packages. However, if you use private packages in your app, you have several options: Create an internal, private repository Use external package installation a form of white listing (at your own risk...) Use RStudio Package Manager You cover this in module 7 and 8 of this course","title":"Sandboxing: packages"},{"location":"installing_rstudio_connect/using_connect/#runas-user","text":"","title":"\"RunAs\" User"},{"location":"installing_rstudio_connect/using_connect/#understanding-the-runas-user","text":"Connect admins can change the RunAs user for any deployed app. Possible values: Default rstudio-connect user See User Account for Processes Local service account With PAM Authentication, the \"logged-in\" user See Current user execution in the connect admin guide","title":"Understanding the \"RunAs\" user"},{"location":"installing_rstudio_connect/using_connect/#redeployment","text":"","title":"Redeployment"},{"location":"installing_rstudio_connect/using_connect/#redeployment_1","text":"Re-deployment of apps is substantially faster than the first deployment. The reason is that Connect creates a cache of binary packages. If a package (with matching version) has previously been instaled, then the installation simply retrieves the package from the cache. Hint: You can see installation from cache in the deployment log","title":"Redeployment"},{"location":"installing_rstudio_connect/using_connect/#define-collaborator","text":"Collaborate on application settings Collaborate on code (co-publish) Start by sharing the rsconnect folder ??? Show an example of publishing to content that someone else deployed (just so they can see what the IDE looks like)","title":"Define \"collaborator\""},{"location":"installing_rstudio_connect/using_connect/#content-discoverability","text":"","title":"Content discoverability"},{"location":"installing_rstudio_connect/using_connect/#content-discoverability_1","text":"","title":"Content discoverability"},{"location":"installing_rstudio_connect/using_connect/#content-search-by-title","text":"Connect allows you to search for content in several ways. The first is a simple search on content title.","title":"Content search by title"},{"location":"installing_rstudio_connect/using_connect/#tag-schema-taxonomy","text":"The second way of searching for content on Connect is by using a taxonomy, or tag schema, of tags.","title":"Tag schema (taxonomy)"},{"location":"installing_rstudio_connect/using_connect/#creating-a-tag-schema","text":"The Connect administrator can: view the \"Tags\" tab in the admin pane create a custom schema the is completely customizable by any Connect administrator","title":"Creating a tag schema"},{"location":"installing_rstudio_connect/using_connect/#tags-tagging-content","text":"Content publishers can tag their own content, using the schema that was pre-defined by the admin","title":"Tags: tagging content"},{"location":"installing_rstudio_connect/using_connect/#searching-by-tag","text":"Content viewers can search content by tag. The normal access control rules apply, i.e. you can only see what you have access to.","title":"Searching by tag"},{"location":"installing_rstudio_connect/using_connect/#vanity-urls","text":"","title":"Vanity URLs"},{"location":"installing_rstudio_connect/using_connect/#vanity-urls_1","text":"Vanity URLS are useful to maintain a \"static\" URL even if you redeploy the content to a different Connect content ID. With PublishersCanManageVanities set to true administrators and publishers can create vanity URLs. Creating a vanity URL Viewing a vanity URL","title":"Vanity URLs"},{"location":"installing_rstudio_connect/using_connect/#other-content-deployment-options","text":"","title":"Other content deployment options"},{"location":"installing_rstudio_connect/using_connect/#publishing-apps-with-continuous-integration","text":"Authentication: machine to machine Jenkins needs a key Environment: Jenkins must create the bundle. Implies Jenkins must replicate the dev environment Testing: #2 sounds like a pain. You can take advantage of your work for a very powerful side effect: Shiny unit testing ( shinytest ) Other resources: * https://solutions.rstudio.com/deploy/methods/ * https://github.com/slopp/rsc-ci-test * https://docs.rstudio.com/connect/admin/appendix/ci/","title":"Publishing apps with continuous Integration"},{"location":"installing_rstudio_connect/using_connect/#publishing-apps-from-git-github","text":"You can also deploy artefacts to Connect directly from a git repository (including github) Resources: https://solutions.rstudio.com/deploy/methods/#deploying-from-git-repositories","title":"Publishing apps from git / github"},{"location":"installing_rstudio_connect/using_connect/#advanced-admin-topics","text":"","title":"Advanced admin topics"},{"location":"installing_rstudio_connect/using_connect/#managing-connect-in-an-offline-environment","text":"Need to set up a package repository that Connect can access: Several ways to do this, including: miniCRAN rsync The recommended option: RStudio Package Manager","title":"Managing Connect in an offline environment"},{"location":"installing_rstudio_connect/using_connect/#backup-and-migration","text":"Backup: SQLite database is backed up automatically Recommend snapshotting the entire Data Directory as well. Migrations: A bit tricker because of all those installed packages that have been cached. Follow the admin guide instructions.","title":"Backup and migration"},{"location":"installing_rstudio_connect/using_connect/#your-turn","text":"Next complete the exercise. Signs of success: You have connected your IDE to Connect You have published at least one app You understand how to read the deployment log and look for errors","title":"Your turn"},{"location":"python/install_python/","text":"Overview In the following exercises, you: Install Python from Anaconda Verify the installation Configure for use with RStudio Connect Test installation in RStudio Server Pro with reticulate Install an additional version of Python ( optional ) Refer to the Python Installation Documentation throughout the exercises, specifically the Integrating RStudio Connect with Python section. Quiz: Python integration Possible Use Cases {r use_cases} quiz( question( \"What are some of the possible uses of Python combined with RStudio Server Pro and RStudio Connect?\", answer(\"Reticulated Shiny applications\", correct = TRUE), answer(\"Publishing Jupyter Notebooks\", correct = TRUE), answer(\"Using the `reticulate` package\", correct = TRUE), answer(\"Scheduling Python-based ETL scripts\", correct = TRUE), answer(\"Deploy Plumber APIs that leverage Python\", correct = TRUE), allow_retry = TRUE, random_answer_order = TRUE ) ) Python version requirements {r minimum_python_version_rsc} quiz( question( \"What are the minimum Python versions supported in RStudio Connect for Python 2 and Python 3?\", answer(\"Python 2.7.9+, Python 3.4.0+\", correct = TRUE), answer(\"Python 2.6+, Python 3.0+\"), answer(\"Python 2.7.4+, Python 3.7.0+\"), random_answer_order = TRUE, allow_retry = TRUE ) ) reticulate version requirements {r minimum_python_version_reticulate} quiz( question( \"What is the minimum Python version supported by the `reticulate` package?\", answer(\"Python >= 2.7\", correct = TRUE), answer(\"Python >= 3.7.4\"), answer(\"Python >= 2.6\"), random_answer_order = TRUE, allow_retry = TRUE ) ) Task: Installation and required dependencies Perform the following tasks on your course instance: Install the required dependency ( Ubuntu ) Verify the Python version In the following exercise, you will test Python and ensure that it is installed correctly. Required dependency sudo apt-get install bzip2 Python sudo curl -O https://repo.anaconda.com/archive/Anaconda3-5.2.0-Linux-x86_64.sh sudo bash Anaconda3-5.2.0-Linux-x86_64.sh -bp /opt/python/3.6.5/ Note For the purposes of these exercises, please remember that the course machine is Ubuntu. Task: Verify the Python installation Check the status of the Python version: /opt/python/3.6.5/bin/python --version The output should resemble: Python 3.6.5 :: Anaconda, Inc. Task: Install additional Python packages (optional) You can install additional Python packages into the your Python 3.6.5 environment by running a command such as: sudo /opt/python/3.6.5/bin/pip install virtualenv pandas matplotlib This command will install virtualenv , pandas , and matplotlib . Task: Add Python to the system PATH (optional) You can configure Python on the system PATH so that users will be able to use pip within a terminal to install packages to their home directory, similar to how R works with install.packages() . The recommended method to add Python to the PATH is to append the version of Python that you installed to the system-wide PATH variable. For example, this can be defined in a script within the /etc/profile.d/ directory. Create a new file python.sh in /etc/profile.d/ that references the location of the Python installation: # in /etc/profile.d/python.sh PATH = /opt/python/3.6.5/bin: $PATH Note The above pattern PATH=/opt/python/<PYTHON_VERSION>/bin:$PATH can be replicated when configuring a machine with multiple Python installations. Task: Test installation in RStudio Server Pro with reticulate // TODO: https://support.rstudio.com/hc/en-us/articles/360023654474-Installing-and-Configuring-Python-with-RStudio Task: Configure for use with RStudio Connect // TODO: Task: Deploy a Reticulated Shiny application // TODO: Task: Install multiple versions of Python ( optional ) If you want to install multiple versions of Python on the same server, you can repeat these steps to specify, download, and install a different version of Python alongside existing versions to other locations. sudo curl -O https://repo.anaconda.com/archive/Anaconda3-2019.07-Linux-x86_64.sh sudo bash Anaconda3-2019.07-Linux-x86_64.sh -bp /opt/python/3.7.3/ And extend Path with the additional version as before: # in /etc/profile.d/python.sh PATH = /opt/python/<PYTHON_VERSION>/bin: $PATH","title":"Install python"},{"location":"python/install_python/#overview","text":"In the following exercises, you: Install Python from Anaconda Verify the installation Configure for use with RStudio Connect Test installation in RStudio Server Pro with reticulate Install an additional version of Python ( optional ) Refer to the Python Installation Documentation throughout the exercises, specifically the Integrating RStudio Connect with Python section.","title":"Overview"},{"location":"python/install_python/#quiz-python-integration","text":"","title":"Quiz: Python integration"},{"location":"python/install_python/#possible-use-cases","text":"{r use_cases} quiz( question( \"What are some of the possible uses of Python combined with RStudio Server Pro and RStudio Connect?\", answer(\"Reticulated Shiny applications\", correct = TRUE), answer(\"Publishing Jupyter Notebooks\", correct = TRUE), answer(\"Using the `reticulate` package\", correct = TRUE), answer(\"Scheduling Python-based ETL scripts\", correct = TRUE), answer(\"Deploy Plumber APIs that leverage Python\", correct = TRUE), allow_retry = TRUE, random_answer_order = TRUE ) )","title":"Possible Use Cases"},{"location":"python/install_python/#python-version-requirements","text":"{r minimum_python_version_rsc} quiz( question( \"What are the minimum Python versions supported in RStudio Connect for Python 2 and Python 3?\", answer(\"Python 2.7.9+, Python 3.4.0+\", correct = TRUE), answer(\"Python 2.6+, Python 3.0+\"), answer(\"Python 2.7.4+, Python 3.7.0+\"), random_answer_order = TRUE, allow_retry = TRUE ) )","title":"Python version requirements"},{"location":"python/install_python/#reticulate-version-requirements","text":"{r minimum_python_version_reticulate} quiz( question( \"What is the minimum Python version supported by the `reticulate` package?\", answer(\"Python >= 2.7\", correct = TRUE), answer(\"Python >= 3.7.4\"), answer(\"Python >= 2.6\"), random_answer_order = TRUE, allow_retry = TRUE ) )","title":"reticulate version requirements"},{"location":"python/install_python/#task-installation-and-required-dependencies","text":"Perform the following tasks on your course instance: Install the required dependency ( Ubuntu ) Verify the Python version In the following exercise, you will test Python and ensure that it is installed correctly. Required dependency sudo apt-get install bzip2 Python sudo curl -O https://repo.anaconda.com/archive/Anaconda3-5.2.0-Linux-x86_64.sh sudo bash Anaconda3-5.2.0-Linux-x86_64.sh -bp /opt/python/3.6.5/ Note For the purposes of these exercises, please remember that the course machine is Ubuntu.","title":"Task: Installation and required dependencies"},{"location":"python/install_python/#task-verify-the-python-installation","text":"Check the status of the Python version: /opt/python/3.6.5/bin/python --version The output should resemble: Python 3.6.5 :: Anaconda, Inc.","title":"Task: Verify the Python installation"},{"location":"python/install_python/#task-install-additional-python-packages-optional","text":"You can install additional Python packages into the your Python 3.6.5 environment by running a command such as: sudo /opt/python/3.6.5/bin/pip install virtualenv pandas matplotlib This command will install virtualenv , pandas , and matplotlib .","title":"Task: Install additional Python packages (optional)"},{"location":"python/install_python/#task-add-python-to-the-system-path-optional","text":"You can configure Python on the system PATH so that users will be able to use pip within a terminal to install packages to their home directory, similar to how R works with install.packages() . The recommended method to add Python to the PATH is to append the version of Python that you installed to the system-wide PATH variable. For example, this can be defined in a script within the /etc/profile.d/ directory. Create a new file python.sh in /etc/profile.d/ that references the location of the Python installation: # in /etc/profile.d/python.sh PATH = /opt/python/3.6.5/bin: $PATH Note The above pattern PATH=/opt/python/<PYTHON_VERSION>/bin:$PATH can be replicated when configuring a machine with multiple Python installations.","title":"Task: Add Python to the system PATH (optional)"},{"location":"python/install_python/#task-test-installation-in-rstudio-server-pro-with-reticulate","text":"// TODO: https://support.rstudio.com/hc/en-us/articles/360023654474-Installing-and-Configuring-Python-with-RStudio","title":"Task: Test installation in RStudio Server Pro with reticulate"},{"location":"python/install_python/#task-configure-for-use-with-rstudio-connect","text":"// TODO:","title":"Task: Configure for use with RStudio Connect"},{"location":"python/install_python/#task-deploy-a-reticulated-shiny-application","text":"// TODO:","title":"Task: Deploy a Reticulated Shiny application"},{"location":"python/install_python/#task-install-multiple-versions-of-python-optional","text":"If you want to install multiple versions of Python on the same server, you can repeat these steps to specify, download, and install a different version of Python alongside existing versions to other locations. sudo curl -O https://repo.anaconda.com/archive/Anaconda3-2019.07-Linux-x86_64.sh sudo bash Anaconda3-2019.07-Linux-x86_64.sh -bp /opt/python/3.7.3/ And extend Path with the additional version as before: # in /etc/profile.d/python.sh PATH = /opt/python/<PYTHON_VERSION>/bin: $PATH","title":"Task: Install multiple versions of Python (optional)"},{"location":"r/install_r/","text":"In this session Understand the different mechanisms for installing R Installing R from source and pre-compiled binaries Three mechanisms for installing R You have three different mechanisms for installing R on a Linux machine: Install from a Linux package manager For example yum (Red Hat) or apt (Ubuntu) Compile from source Download the R source code and compile using the relevant GCC compiler Install from pre-compiled binaries provided by RStudio Download an install the pre-compiled binaries available from RStudio Method 1: Installing R using yum or apt Installing from yum or apt (or similar) is traditionally the mechanism that most administrators would use. Alert However, updating the R installation will overwrite previous installations. For data science work in production, it is important to provide code stability by installing multiple versions of R side-by-side. This means that using your Linux package manager for installing R in production is not a good idea. Recommendation We recommend you don't use a Linux package manager to install R. Method 2: Compile R from source For data science work in production, it is important to provide code stability by installing multiple versions of R side-by-side. You can achieve this by installing R from source. Download the source code Create a \"make\" configuration Run make Run make install This offers maximum flexibility, because you can specify the location of the installed package and you can optimize for your hardware. Instructions for installing R from source The downside of installing R from source is that it takes some time for the compilation to complete. Method 3: Install from pre-compiled binaries RStudio recommends that in most cases you install R from pre-compiled binaries. This gives you the benefit of: Side-by-side installation of multiple versions of R It is quick, since the compilation step has previously been completed To install from pre-compiled binaries, follow the instructions at Install R Tip Installing from pre-compiled binaries is the recommended option in most cases Summary Recommendation Our suggested order for making a choice of R installation is: Install from pre-compiled binaries to get multiple R versions side-by-side Compile from source gives more flexibility but takes longer Use yum or apt Does not allow side-by-side install Do not use for long-term data science stability Your turn Next complete the exercise. Signs of success R is running","title":"2.1 Installing R"},{"location":"r/install_r/#in-this-session","text":"Understand the different mechanisms for installing R Installing R from source and pre-compiled binaries","title":"In this session"},{"location":"r/install_r/#three-mechanisms-for-installing-r","text":"You have three different mechanisms for installing R on a Linux machine: Install from a Linux package manager For example yum (Red Hat) or apt (Ubuntu) Compile from source Download the R source code and compile using the relevant GCC compiler Install from pre-compiled binaries provided by RStudio Download an install the pre-compiled binaries available from RStudio","title":"Three mechanisms for installing R"},{"location":"r/install_r/#method-1-installing-r-using-yum-or-apt","text":"Installing from yum or apt (or similar) is traditionally the mechanism that most administrators would use. Alert However, updating the R installation will overwrite previous installations. For data science work in production, it is important to provide code stability by installing multiple versions of R side-by-side. This means that using your Linux package manager for installing R in production is not a good idea. Recommendation We recommend you don't use a Linux package manager to install R.","title":"Method 1: Installing R using yum or apt"},{"location":"r/install_r/#method-2-compile-r-from-source","text":"For data science work in production, it is important to provide code stability by installing multiple versions of R side-by-side. You can achieve this by installing R from source. Download the source code Create a \"make\" configuration Run make Run make install This offers maximum flexibility, because you can specify the location of the installed package and you can optimize for your hardware. Instructions for installing R from source The downside of installing R from source is that it takes some time for the compilation to complete.","title":"Method 2: Compile R from source"},{"location":"r/install_r/#method-3-install-from-pre-compiled-binaries","text":"RStudio recommends that in most cases you install R from pre-compiled binaries. This gives you the benefit of: Side-by-side installation of multiple versions of R It is quick, since the compilation step has previously been completed To install from pre-compiled binaries, follow the instructions at Install R Tip Installing from pre-compiled binaries is the recommended option in most cases","title":"Method 3: Install from pre-compiled binaries"},{"location":"r/install_r/#summary","text":"","title":"Summary"},{"location":"r/install_r/#recommendation","text":"Our suggested order for making a choice of R installation is: Install from pre-compiled binaries to get multiple R versions side-by-side Compile from source gives more flexibility but takes longer Use yum or apt Does not allow side-by-side install Do not use for long-term data science stability","title":"Recommendation"},{"location":"r/install_r/#your-turn","text":"Next complete the exercise. Signs of success R is running","title":"Your turn"},{"location":"r/lab_install_r/","text":"Task: Install R (v3.6.0) from pre-compiled binaries RStudio recommended best practice is to install R from pre-compiled binaries on a Linux server. Refer to https://docs.rstudio.com/resources/install-r/ Your task is to install R (version 3.6.0) from the pre-compiled binaries, following these instructions. For your convenience, we repeat the instructions here. If in doubt. follow the advice in the official documentation. sudo apt-get update sudo apt-get install gdebi-core Specify the R version as an environment variable: export R_VERSION = 3 .6.0 Download and install R curl -O https://cdn.rstudio.com/r/ubuntu-1804/pkgs/r- ${ R_VERSION } _1_amd64.deb sudo gdebi r- ${ R_VERSION } _1_amd64.deb Success!! How do you know you've done it? Verify your installation: /opt/R/ ${ R_VERSION } /bin/R --version Your output should be similar to this: R version 3.6.0 (2019-04-26) -- \"Planting of a Tree\"","title":"Lab:  Installing R"},{"location":"r/lab_install_r/#task-install-r-v360-from-pre-compiled-binaries","text":"RStudio recommended best practice is to install R from pre-compiled binaries on a Linux server. Refer to https://docs.rstudio.com/resources/install-r/ Your task is to install R (version 3.6.0) from the pre-compiled binaries, following these instructions. For your convenience, we repeat the instructions here. If in doubt. follow the advice in the official documentation. sudo apt-get update sudo apt-get install gdebi-core Specify the R version as an environment variable: export R_VERSION = 3 .6.0 Download and install R curl -O https://cdn.rstudio.com/r/ubuntu-1804/pkgs/r- ${ R_VERSION } _1_amd64.deb sudo gdebi r- ${ R_VERSION } _1_amd64.deb","title":"Task: Install R (v3.6.0) from pre-compiled binaries"},{"location":"r/lab_install_r/#success","text":"How do you know you've done it? Verify your installation: /opt/R/ ${ R_VERSION } /bin/R --version Your output should be similar to this: R version 3.6.0 (2019-04-26) -- \"Planting of a Tree\"","title":"Success!!"},{"location":"rstudio_connect/configure_connect/","text":"In this session In this session you: Make more choices about Connect configuration Edit the configuration file for essential setup Activate a license using the RStudio Floating License manager Configuration Configuration In this chapter you will learn how to make choices to configure RStudio Connect. ; RStudio Connect configuration file [Server] ; SenderEmail = account@company.com SenderEmail = ; Address is a public URL for this RStudio Connect server. Must be configured ; to enable features like including links to your content in emails. If ; Connect is deployed behind an HTTP proxy, this should be the URL for Connect ; in terms of that proxy. ; ; Address = https://rstudio-connect.company.com Address = [HTTP] ; RStudio Connect will listen on this network address for HTTP connections. Listen = :3939 [Authentication] ; Specifies the type of user authentication. Provider = LDAP Initial configuration The configuration file is at: /etc/rstudio-connect/rstudio-connect.gcfg It has the Go Configuration File ( .gcfg ) format: [Section Heading] Field = Value For initial setup, you must set two fields in the Server section: Server address Sender email [Server] Address = ... SenderEmail = ... Server Address [Server] Address The server address implies many choices: Proxies http(s) and browser security Load balancing This field is the address your end users will enter to get to your RSC instance. Implies a lot of choices. Proxy? http(s) > Browser Security Load Balancing \u2026 Later For now, you need the name of the training server (that you got earlier in the course) Server SenderEmail [Server] SenderEmail This is the \"From\" address, i.e. the email address that Connect uses to send email. This field does not complete email setup! You must also configure a mail server, using either: sendmail SMTP Your organisation will already have a an email gateway, and you should use this on your Connect instances. Later in this course, during the exercises, you will use SMTP to send email. http NoWarning [http] NoWarning (For your sanity during the course. Do not do this in production!) Configuration Connect admin guide Appendix A: Configuration Options One way to teach this class would be to go through each of the configuration settings. We are not going to do that. We are going to focus on using RStudio Connect and hit the options as we go. We will not cover ALL of the options. Homework: Read through the rest of the config settings. Like the dentist: boring, important, and you should do it once a year. Starting and Stopping Depends on operating system. See Stopping and Starting for complete instructions. For the classroom VM using Ubuntu : sudo systemctl stop rstudio-connect sudo systemctl start rstudio-connect Use for restart, but note that this causes downtime. In a production setting, if you already have running processes on your Connect server, you can use reload instead, since this picks up some configuration changes: sudo systemctl reload rstudio-connect Note: only system settings flagged with Reloadable: true will be affected if you use reload instead of restart . See the admin guide appendix . Server Logs A few types of logs: Server log Access log Application logs (deployed content) ls /var/log/rstudio-connect.* sudo tail /var/log/rstudio-connect.log Run the commands and discuss the log output Licensing Online: servers can activate automatically Offline: licenses require manual exchange. Licensing: online and offline Online servers automatically start with a 45 day trial. License can be activated with: sudo /opt/rstudio-connect/bin/license-manager activate KEY Offline servers require a 3 step activation for both trials and full licenses. Step 1: Run a command to generate an XML file. Step 2: Use the XML file to generate a key. Step 3: Activate the license with the key. http://apps.rstudio.com/offline-activation/ Licensing: floating In special circumstances, there is an alternative licensing mechanism called floating licenses . Some use cases for floating licensing: You have multiple server installations to manage Some of these are transient / fleeting You have transient servers, e.g. staging server You manage a rotating blue/green production server setup Download: https://www.rstudio.com/floating-license-servers/ Chapter 3.7 of the Connect admin guide discusses Floating Licenses It's Alive! Can I use it? Not yet. More choices to make: Initial Configuration Auth Provider User Management and Authentication User Management and Authentication Three parts: Nr Part Description 1. Authentication Who can access RStudio Connect? 2. User Role What can a user do on RStudio Connect? 3. ACL What can a user do to a piece of content on RStudio Connect Part 1: Authentication Who can access RStudio Connect? (Authentication) Irrevocable choice, but an easy choice. Authentication To answer who can access RStudio Connect, you must first tell Connect where users are defined. My user information lives Then Nowhere. I thought Connect would handle users? Use password auth and manage users in Connect. Active Directory Configure Connect to get user information via LDAP. Active Directory AND I need to pass user credentials through Connect to a backend Connect will rely on local Unix accounts via PAM. Each user will need a local account. Google Configure Connect to get user information from Google OAuth2. Azure AD, Okta, OneLogin, other SAML Configure Connect with SAML Somewhere else Going to need proxied auth. LDAP In this class you will integrate RStudio Connect with the LDAP server on the leader instance for this classroom. This is similar to what you will do most likely do in your organization, if LDAP or Active Directory is used. However, the details in your organization will be different. Be sure to get in contact with the respective IT team and refer to the LDAP section in the admin guide . Hint, use the following setting to get more descriptive messages in your log file. [Debug] Log = ldap Other Users? Password Auth Now that you're logged in, what about other users? For password auth an admin can register a user. But where does the password come from? Email setup. For LDAP: Users must self-register (but you can limit who can self register via the PermittedLoginGroup setting: [LDAP] PermittedLoginGroup Using the email print provider A secret trick Connect sends email for lots of things, and it is important to configure. In some exceptional circumstances you may want to use a secret trick: Do not use this for this class [Server] EmailProvider = print This prints all email to the log file, bypassing sendmail or SMTP sudo tail /var/log/rstudio-connect.log Some of our partners use this for automated configuration testing. Other Users - LDAP? For LDAP authentication: Users must self-register but you can limit who can self register by using: [LDAP] PermittedLoginGroup Other Users - Other Providers? {r, echo=FALSE} dat <- read.csv(\"files/02_server_management/02_02_authentication_providers.csv\", header = TRUE, check.names = FALSE) dat %>% gt(rowname_col = \"Attribute\") %>% tab_spanner(label = \"Auth provider\", columns = everything()) Question Where does information come from? Authentication - Other Methods PAM Authentication Configuration is limited in Connect, extensive in PAM. Copy the ssh login PAM profile. Proxied Authentication Set up a proxy (e.g. using nginx or Apache ) in front of Connect to handle all user auth. The proxy passes a secure header to tell Connect who the user is. Authentication - Groups Connect supports groups, but only for some authentication schemas: LDAP groups will automatically be identified and can be used for access control. For Password auth , groups can be created and managed by admins. But note that proxied auth does not support groups . User roles User Roles What can a user do on RStudio Connect? (User Role) What can a user do to a piece of content on RStudio Connect? (ACL) Connect allows 4 different types of user roles: Administrator Publisher Viewer Anonymous https://docs.rstudio.com/connect/admin/user-management/#user-roles Configuration of user roles Option 1: Admin can set default user roles Specifies what abilities given to a newly created user. Allowed values are publisher or viewer [Authorization] DefaultUserRole Option 2: Connect UI Admin can change user role in the Connect UI Option 3: Command line interface (CLI) Connect Admin Guide: CLI Remember the mental model - option 1 is another choice between branches. Show an example of changing the user role in the UI. Pull up the CLI and run the --help command just so they can see the options. (Used for bulk changes). Other advanced topics Security Best Practices Connect admin guide: Security & Auditing Browser security Highlights: SSL and friends (secure cookies enabled, CORS, click-jacking) Session timeouts Captcha This is covered in the Browser security section of the Connect admin guide. What about data governance? Later in the course you will become familiar with sandboxing in Connect. ??? The last line is about reassurance, RStudio has done many security audits internally and with big name customers. Upgrading Connect Same process as the initial installation. Download the new binary. Install the new binary on top of the existing installation. Will restart the service. Load balancing / High availability Only 3 changes to your setup. Shared Storage Postgres DB Sticky load balancer Connect Admin Guide: High Availability and Load Balancing Summary Summary In this chapter you learned about some of the decision points when configuring a Connect instance. The exercises will guide you through these steps for one specific branch: LDAP auth floating license manager single instance In subsequent chapters you will start using RStudio Connect and deploying content to your machine. Your turn Next complete the exercise. Signs of success: * You have a running instance of RStudio Connect * You have working email integration * You have multiple users, and you can log in using their LDAP credentials","title":"4.3 Configuring RStudio Connect"},{"location":"rstudio_connect/configure_connect/#in-this-session","text":"In this session you: Make more choices about Connect configuration Edit the configuration file for essential setup Activate a license using the RStudio Floating License manager","title":"In this session"},{"location":"rstudio_connect/configure_connect/#configuration","text":"","title":"Configuration"},{"location":"rstudio_connect/configure_connect/#configuration_1","text":"In this chapter you will learn how to make choices to configure RStudio Connect. ; RStudio Connect configuration file [Server] ; SenderEmail = account@company.com SenderEmail = ; Address is a public URL for this RStudio Connect server. Must be configured ; to enable features like including links to your content in emails. If ; Connect is deployed behind an HTTP proxy, this should be the URL for Connect ; in terms of that proxy. ; ; Address = https://rstudio-connect.company.com Address = [HTTP] ; RStudio Connect will listen on this network address for HTTP connections. Listen = :3939 [Authentication] ; Specifies the type of user authentication. Provider = LDAP","title":"Configuration"},{"location":"rstudio_connect/configure_connect/#initial-configuration","text":"The configuration file is at: /etc/rstudio-connect/rstudio-connect.gcfg It has the Go Configuration File ( .gcfg ) format: [Section Heading] Field = Value For initial setup, you must set two fields in the Server section: Server address Sender email [Server] Address = ... SenderEmail = ...","title":"Initial configuration"},{"location":"rstudio_connect/configure_connect/#server-address","text":"[Server] Address The server address implies many choices: Proxies http(s) and browser security Load balancing This field is the address your end users will enter to get to your RSC instance. Implies a lot of choices. Proxy? http(s) > Browser Security Load Balancing \u2026 Later For now, you need the name of the training server (that you got earlier in the course)","title":"Server Address"},{"location":"rstudio_connect/configure_connect/#server-senderemail","text":"[Server] SenderEmail This is the \"From\" address, i.e. the email address that Connect uses to send email. This field does not complete email setup! You must also configure a mail server, using either: sendmail SMTP Your organisation will already have a an email gateway, and you should use this on your Connect instances. Later in this course, during the exercises, you will use SMTP to send email.","title":"Server SenderEmail"},{"location":"rstudio_connect/configure_connect/#http-nowarning","text":"[http] NoWarning (For your sanity during the course. Do not do this in production!)","title":"http NoWarning"},{"location":"rstudio_connect/configure_connect/#configuration_2","text":"Connect admin guide Appendix A: Configuration Options One way to teach this class would be to go through each of the configuration settings. We are not going to do that. We are going to focus on using RStudio Connect and hit the options as we go. We will not cover ALL of the options. Homework: Read through the rest of the config settings. Like the dentist: boring, important, and you should do it once a year.","title":"Configuration"},{"location":"rstudio_connect/configure_connect/#starting-and-stopping","text":"Depends on operating system. See Stopping and Starting for complete instructions. For the classroom VM using Ubuntu : sudo systemctl stop rstudio-connect sudo systemctl start rstudio-connect Use for restart, but note that this causes downtime. In a production setting, if you already have running processes on your Connect server, you can use reload instead, since this picks up some configuration changes: sudo systemctl reload rstudio-connect Note: only system settings flagged with Reloadable: true will be affected if you use reload instead of restart . See the admin guide appendix .","title":"Starting and Stopping"},{"location":"rstudio_connect/configure_connect/#server-logs","text":"A few types of logs: Server log Access log Application logs (deployed content) ls /var/log/rstudio-connect.* sudo tail /var/log/rstudio-connect.log Run the commands and discuss the log output","title":"Server Logs"},{"location":"rstudio_connect/configure_connect/#licensing","text":"Online: servers can activate automatically Offline: licenses require manual exchange.","title":"Licensing"},{"location":"rstudio_connect/configure_connect/#licensing-online-and-offline","text":"Online servers automatically start with a 45 day trial. License can be activated with: sudo /opt/rstudio-connect/bin/license-manager activate KEY Offline servers require a 3 step activation for both trials and full licenses. Step 1: Run a command to generate an XML file. Step 2: Use the XML file to generate a key. Step 3: Activate the license with the key. http://apps.rstudio.com/offline-activation/","title":"Licensing: online and offline"},{"location":"rstudio_connect/configure_connect/#licensing-floating","text":"In special circumstances, there is an alternative licensing mechanism called floating licenses . Some use cases for floating licensing: You have multiple server installations to manage Some of these are transient / fleeting You have transient servers, e.g. staging server You manage a rotating blue/green production server setup Download: https://www.rstudio.com/floating-license-servers/ Chapter 3.7 of the Connect admin guide discusses Floating Licenses","title":"Licensing: floating"},{"location":"rstudio_connect/configure_connect/#its-alive-can-i-use-it","text":"Not yet. More choices to make: Initial Configuration Auth Provider","title":"It's Alive! Can I use it?"},{"location":"rstudio_connect/configure_connect/#user-management-and-authentication","text":"","title":"User Management and Authentication"},{"location":"rstudio_connect/configure_connect/#user-management-and-authentication_1","text":"Three parts: Nr Part Description 1. Authentication Who can access RStudio Connect? 2. User Role What can a user do on RStudio Connect? 3. ACL What can a user do to a piece of content on RStudio Connect","title":"User Management and Authentication"},{"location":"rstudio_connect/configure_connect/#part-1-authentication","text":"Who can access RStudio Connect? (Authentication) Irrevocable choice, but an easy choice.","title":"Part 1: Authentication"},{"location":"rstudio_connect/configure_connect/#authentication","text":"To answer who can access RStudio Connect, you must first tell Connect where users are defined. My user information lives Then Nowhere. I thought Connect would handle users? Use password auth and manage users in Connect. Active Directory Configure Connect to get user information via LDAP. Active Directory AND I need to pass user credentials through Connect to a backend Connect will rely on local Unix accounts via PAM. Each user will need a local account. Google Configure Connect to get user information from Google OAuth2. Azure AD, Okta, OneLogin, other SAML Configure Connect with SAML Somewhere else Going to need proxied auth.","title":"Authentication"},{"location":"rstudio_connect/configure_connect/#ldap","text":"In this class you will integrate RStudio Connect with the LDAP server on the leader instance for this classroom. This is similar to what you will do most likely do in your organization, if LDAP or Active Directory is used. However, the details in your organization will be different. Be sure to get in contact with the respective IT team and refer to the LDAP section in the admin guide . Hint, use the following setting to get more descriptive messages in your log file. [Debug] Log = ldap","title":"LDAP"},{"location":"rstudio_connect/configure_connect/#other-users","text":"Password Auth Now that you're logged in, what about other users? For password auth an admin can register a user. But where does the password come from? Email setup. For LDAP: Users must self-register (but you can limit who can self register via the PermittedLoginGroup setting: [LDAP] PermittedLoginGroup Using the email print provider A secret trick Connect sends email for lots of things, and it is important to configure. In some exceptional circumstances you may want to use a secret trick: Do not use this for this class [Server] EmailProvider = print This prints all email to the log file, bypassing sendmail or SMTP sudo tail /var/log/rstudio-connect.log Some of our partners use this for automated configuration testing.","title":"Other Users?"},{"location":"rstudio_connect/configure_connect/#other-users-ldap","text":"For LDAP authentication: Users must self-register but you can limit who can self register by using: [LDAP] PermittedLoginGroup","title":"Other Users - LDAP?"},{"location":"rstudio_connect/configure_connect/#other-users-other-providers","text":"{r, echo=FALSE} dat <- read.csv(\"files/02_server_management/02_02_authentication_providers.csv\", header = TRUE, check.names = FALSE) dat %>% gt(rowname_col = \"Attribute\") %>% tab_spanner(label = \"Auth provider\", columns = everything()) Question Where does information come from?","title":"Other Users - Other Providers?"},{"location":"rstudio_connect/configure_connect/#authentication-other-methods","text":"PAM Authentication Configuration is limited in Connect, extensive in PAM. Copy the ssh login PAM profile. Proxied Authentication Set up a proxy (e.g. using nginx or Apache ) in front of Connect to handle all user auth. The proxy passes a secure header to tell Connect who the user is.","title":"Authentication - Other Methods"},{"location":"rstudio_connect/configure_connect/#authentication-groups","text":"Connect supports groups, but only for some authentication schemas: LDAP groups will automatically be identified and can be used for access control. For Password auth , groups can be created and managed by admins. But note that proxied auth does not support groups .","title":"Authentication - Groups"},{"location":"rstudio_connect/configure_connect/#user-roles","text":"","title":"User roles"},{"location":"rstudio_connect/configure_connect/#user-roles_1","text":"What can a user do on RStudio Connect? (User Role) What can a user do to a piece of content on RStudio Connect? (ACL) Connect allows 4 different types of user roles: Administrator Publisher Viewer Anonymous https://docs.rstudio.com/connect/admin/user-management/#user-roles","title":"User Roles"},{"location":"rstudio_connect/configure_connect/#configuration-of-user-roles","text":"Option 1: Admin can set default user roles Specifies what abilities given to a newly created user. Allowed values are publisher or viewer [Authorization] DefaultUserRole Option 2: Connect UI Admin can change user role in the Connect UI Option 3: Command line interface (CLI) Connect Admin Guide: CLI Remember the mental model - option 1 is another choice between branches. Show an example of changing the user role in the UI. Pull up the CLI and run the --help command just so they can see the options. (Used for bulk changes).","title":"Configuration of user roles"},{"location":"rstudio_connect/configure_connect/#other-advanced-topics","text":"","title":"Other advanced topics"},{"location":"rstudio_connect/configure_connect/#security-best-practices","text":"Connect admin guide: Security & Auditing Browser security Highlights: SSL and friends (secure cookies enabled, CORS, click-jacking) Session timeouts Captcha This is covered in the Browser security section of the Connect admin guide. What about data governance? Later in the course you will become familiar with sandboxing in Connect. ??? The last line is about reassurance, RStudio has done many security audits internally and with big name customers.","title":"Security Best Practices"},{"location":"rstudio_connect/configure_connect/#upgrading-connect","text":"Same process as the initial installation. Download the new binary. Install the new binary on top of the existing installation. Will restart the service.","title":"Upgrading Connect"},{"location":"rstudio_connect/configure_connect/#load-balancing-high-availability","text":"Only 3 changes to your setup. Shared Storage Postgres DB Sticky load balancer Connect Admin Guide: High Availability and Load Balancing","title":"Load balancing / High availability"},{"location":"rstudio_connect/configure_connect/#summary","text":"","title":"Summary"},{"location":"rstudio_connect/configure_connect/#summary_1","text":"In this chapter you learned about some of the decision points when configuring a Connect instance. The exercises will guide you through these steps for one specific branch: LDAP auth floating license manager single instance In subsequent chapters you will start using RStudio Connect and deploying content to your machine.","title":"Summary"},{"location":"rstudio_connect/configure_connect/#your-turn","text":"Next complete the exercise. Signs of success: * You have a running instance of RStudio Connect * You have working email integration * You have multiple users, and you can log in using their LDAP credentials","title":"Your turn"},{"location":"rstudio_connect/install_connect/","text":"In this session In this sessions, you: Prepare to install RStudio Connect Pre-requisites Design decisions Download and install Connect The mental model of Connect Climbing a Mountain vs Cimbing a Tree Getting from A to B isn't going to be like climbing a mountain, it's like climbing a tree (picking which fork to follow amongst numerous branches). Finding Information Refer to the product documentation at: https://docs.rstudio.com/ https://docs.rstudio.com/connect/admin This course is about teaching you to fish, not giving fish. Open up the guide, this will be a resource throughout the course and will help you decide which branch to pick. Installation requirements Installing Connect - Where? Support article: Configuration and sizing recommendations Installing Connect - Where? Typical questions How big a server? It all depends on what your content will be doing in R. It is best to learn over time and crawl-walk-run where possible. The support article Configuration and sizing recommendations provides some suggestions. Docker? Connect is designed to run on a persistent server, think SharePoint. As you will see, it internally runs and isolates user submitted code, manages processes, sandboxes permissions, etc. You will get into this more, but all these aspects make it a bit of an odd fit for Docker. That said, it's possible, but must be run in a privileged container . Running in a privileged container may reduce the amount of process isolation that Docker offers. Whether it is still worth dockerizing is a choice you must make. What operating system? Connect is supported on RHEL, Ubuntu and SUSE Refer to Requirements for RStudio Connect For data science work we recommend Ubuntu Installing Connect - How? Installation of RStudio Connect requires root permissions. (We will explain why later.) TL;DR: Requirement comes from a strict security viewpoint. System requirements System requirement: R Where can R be installed? https://docs.rstudio.com/connect/admin/r which R Rscript -e 'R.home()' Notice that neither path includes a version. System requirement: Build R from pre-compiled binaries RStudio Connect is all about \"deploy and forget\". This means you don't want existing content to break when R is upgraded. To achieve this, RStudio Connect supports multiple versions of R . Recommended best practice: Install R from pre-compiled binaries Store in version specific locations, for example: /opt/R/3.5.0 /opt/R/3.6.0 /opt/R/3.6.1 Upgrading R Because Connect supports multiple versions of R, the upgrading decision is easy: Upgrading R is as simple as installing another version of R side-by-side. Again, be sure to install R from pre-compiled binaries ! Important: avoid upgrading by using your repository: Avoid apt-get upgrade !!! Avoid yum upgrade !!! Installing Connect Installing Connect: server sizing? Q: What type of server should Connect run on? (Memory, CPU, etc). A: It depends. You should be able to answer this question by the end of the course. General guidelines here It all depends on what your content will be doing in R. Best to learn over time and crawl-walk-run where possible. Installing Connect: Docker? Q: Can I use Connect in a Docker container? A: Possible but not recommended. RSC is designed to run on a persistent server (think SharePoint). As you'll see, it internally runs and isolates user submitted code, manages processes, sandboxes permissions, etc. All these aspects make it a bit of an odd fit for Docker. That said, it's possible, but will require a privileged container . This means some of the process isolation offered by docker will not be available. Downloading Connect Download page links to current version: https://docs.rstudio.com/rsc/installation/ Screencast: download and install Connect Your turn Next complete the exercise. Signs of success: The connect log indicates that Connect is listening on port 3939 You successfully get the Connect landing page","title":"4.1 Installing RStudio Connect"},{"location":"rstudio_connect/install_connect/#in-this-session","text":"In this sessions, you: Prepare to install RStudio Connect Pre-requisites Design decisions Download and install Connect","title":"In this session"},{"location":"rstudio_connect/install_connect/#the-mental-model-of-connect","text":"","title":"The mental model of Connect"},{"location":"rstudio_connect/install_connect/#climbing-a-mountain-vs-cimbing-a-tree","text":"Getting from A to B isn't going to be like climbing a mountain, it's like climbing a tree (picking which fork to follow amongst numerous branches).","title":"Climbing a Mountain vs Cimbing a Tree"},{"location":"rstudio_connect/install_connect/#finding-information","text":"Refer to the product documentation at: https://docs.rstudio.com/ https://docs.rstudio.com/connect/admin This course is about teaching you to fish, not giving fish. Open up the guide, this will be a resource throughout the course and will help you decide which branch to pick.","title":"Finding Information"},{"location":"rstudio_connect/install_connect/#installation-requirements","text":"","title":"Installation requirements"},{"location":"rstudio_connect/install_connect/#installing-connect-where","text":"Support article: Configuration and sizing recommendations","title":"Installing Connect - Where?"},{"location":"rstudio_connect/install_connect/#installing-connect-where_1","text":"Typical questions How big a server? It all depends on what your content will be doing in R. It is best to learn over time and crawl-walk-run where possible. The support article Configuration and sizing recommendations provides some suggestions. Docker? Connect is designed to run on a persistent server, think SharePoint. As you will see, it internally runs and isolates user submitted code, manages processes, sandboxes permissions, etc. You will get into this more, but all these aspects make it a bit of an odd fit for Docker. That said, it's possible, but must be run in a privileged container . Running in a privileged container may reduce the amount of process isolation that Docker offers. Whether it is still worth dockerizing is a choice you must make. What operating system? Connect is supported on RHEL, Ubuntu and SUSE Refer to Requirements for RStudio Connect For data science work we recommend Ubuntu","title":"Installing Connect - Where?"},{"location":"rstudio_connect/install_connect/#installing-connect-how","text":"Installation of RStudio Connect requires root permissions. (We will explain why later.) TL;DR: Requirement comes from a strict security viewpoint.","title":"Installing Connect - How?"},{"location":"rstudio_connect/install_connect/#system-requirements","text":"","title":"System requirements"},{"location":"rstudio_connect/install_connect/#system-requirement-r","text":"Where can R be installed? https://docs.rstudio.com/connect/admin/r which R Rscript -e 'R.home()' Notice that neither path includes a version.","title":"System requirement: R"},{"location":"rstudio_connect/install_connect/#system-requirement-build-r-from-pre-compiled-binaries","text":"RStudio Connect is all about \"deploy and forget\". This means you don't want existing content to break when R is upgraded. To achieve this, RStudio Connect supports multiple versions of R .","title":"System requirement: Build R from pre-compiled binaries"},{"location":"rstudio_connect/install_connect/#recommended-best-practice","text":"Install R from pre-compiled binaries Store in version specific locations, for example: /opt/R/3.5.0 /opt/R/3.6.0 /opt/R/3.6.1","title":"Recommended best practice:"},{"location":"rstudio_connect/install_connect/#upgrading-r","text":"Because Connect supports multiple versions of R, the upgrading decision is easy: Upgrading R is as simple as installing another version of R side-by-side. Again, be sure to install R from pre-compiled binaries ! Important: avoid upgrading by using your repository: Avoid apt-get upgrade !!! Avoid yum upgrade !!!","title":"Upgrading R"},{"location":"rstudio_connect/install_connect/#installing-connect","text":"","title":"Installing Connect"},{"location":"rstudio_connect/install_connect/#installing-connect-server-sizing","text":"Q: What type of server should Connect run on? (Memory, CPU, etc). A: It depends. You should be able to answer this question by the end of the course. General guidelines here It all depends on what your content will be doing in R. Best to learn over time and crawl-walk-run where possible.","title":"Installing Connect: server sizing?"},{"location":"rstudio_connect/install_connect/#installing-connect-docker","text":"Q: Can I use Connect in a Docker container? A: Possible but not recommended. RSC is designed to run on a persistent server (think SharePoint). As you'll see, it internally runs and isolates user submitted code, manages processes, sandboxes permissions, etc. All these aspects make it a bit of an odd fit for Docker. That said, it's possible, but will require a privileged container . This means some of the process isolation offered by docker will not be available.","title":"Installing Connect: Docker?"},{"location":"rstudio_connect/install_connect/#downloading-connect","text":"Download page links to current version: https://docs.rstudio.com/rsc/installation/","title":"Downloading Connect"},{"location":"rstudio_connect/install_connect/#screencast-download-and-install-connect","text":"","title":"Screencast: download and install Connect"},{"location":"rstudio_connect/install_connect/#your-turn","text":"Next complete the exercise. Signs of success: The connect log indicates that Connect is listening on port 3939 You successfully get the Connect landing page","title":"Your turn"},{"location":"rstudio_connect/lab_configure_connect/","text":"Quiz Which authentication protocols are supported by RStudio Connect? Plain password Proxy PAM LDAP Google OAuth2 OAuth 2 SAML Answer: Plain password, proxy, PAM, LDAP, Google OAuth 2 amd SAML (supported since v1.7.4) are all supported. OAuth 2 is not currently supported, with the exception of the Google specific varient. Use proxy auth instead. Which of the following mail systems are supported by Connect? sendmail SMTP SendGrid Answer: Sendmail and SMTP Task: Edit Connect configuration file Configure server address Task: Open the config file at /etc/rstudio-connect/rstudio-connect.gcfg with a text editor (e.g. vi ) Edit the [Server] section to set the server adress to your machine name. Important: For the purpose of this training session, use http:// instead of https:// . (For a production server you must configure a SSL certificate!) The Connect instance in the classroom VM has been configured to listen at /rsconnect . Make sure you append this string at the end of your server address. [Server] Address = http://ec2-00-000-00-000.us-east-2.compute.amazonaws.com/rsconnect Screencast: Configure server address Task: Disable HTTP warning It is possible to disable the HTTP warning. (For your sanity during the course. Do not do this in production!) ` [HTTP] NoWarning Task: Configure email Configure email provider Connect sends email for lots of things, so it is important to configure sending of mail correctly. For this class, you will use the RoundCube mail engine that is pre-configured in the classroom virtual machine. Remember that any email you send on this machine will be intercepted and will appear in your RoundCube inbox. For full instructions about setting up email, refer to the admin guide, Section 8: Email Setup Hint: the config file is at /etc/rstudio-connect/rstudio-connect.gcfg [Server] EmailProvider = SMTP SenderEmail = admin@localhost Add SMTP settings Review the section in the admin guide for SMTP email: Appendices / Configuration / SMTP In your own organisation, you should speak to your email administrator to ensure you use the correct settings. For the classroom virtual machine, use these settings to edit the Connect config file: [SMTP] Host = localhost Port = 25 startTls = never Save the settings. Restart the server. sudo systemctl restart rstudio-connect Screencast: Configure email Task: Configure Authentication Choose LDAP authentication Edit the [Authentication] section in the Connect configuration to use LDAP as authentication provider: [Authentication] Provider = LDAP Configure LDAP It is helpful to add a [Debug] section to the Connect configuration to enable debug logging for LDAP: [Debug] Log = ldap For the actual configuration, you can use the complete configuration example in the admin guide as starting point. Compare the LDAP structure provided in the admin guide with the one used on leader.example.org to determin the necessary changes. Hint: You can get the LDAP structure for user jen with: ldapsearch -w admin -h leader.example.org -p 389 -D cn = admin,dc = example,dc = org -b dc = example,dc = org cn = jen Hint: It is enough to adjust ServerAddress , BindDN , BindPassword and UserSearchBaseDN . Task: activate your license Activate your license In a production setting you must obtain a license key from RStudio before the evaluation period expires. Review the floating licenses chapter in the Connect admin guide. Your instructor set up a floating license server for this class. This server contains an activation key that is valid for the duration of this training class. Tasks: Follow the instructions at using floating licensing to activate your license. Activate the floating license, using leader.example.org:8999 as your <server-hostname-or-ip> Then restart Connect sudo /opt/rstudio-connect/bin/license-manager license-server leader.example.org:8999 sudo systemctl restart rstudio-connect Screencast: Activate license Signs of success (licensing) After restarting Connect, query the license manager to check that you have an activated license. sudo /opt/rstudio-connect/bin/license-manager status If you activated the floating license correctly, you should see an active lease in the -- Floating license status -- section: -- Floating license status -- License-Server: leader.example.org:8999 Lease: Active Users: 100 User-Activity-Days: 365 Shiny-Users: 100 Allow-APIs: 1 Task: Get binary packages on Connect Reminder of binary packages You have already configured RStudio Server Pro to install R packages from pre-compiled binaries from RStudio Package Manager. You can get the same benefit of fast binary installs on RStudio Connect by setting an override switch on Connect. When this is configured, Connect will ignore the packrat manifest file in the deployment bundle and attempt to install from the override repository instead. To achieve this, you have to configure Connect to point to an instance of RStudio Package Manager. Since you haven't yet configured RStudio Package Manager on your VM, you will temporarily point Connect to a demonstration instance of RStudio Package Manager at demo.rstudiopm.com Override the Package Repository Read the documentation , then edit your Connect configuration file: [RPackageRepository \"CRAN\"] URL = \"https://demo.rstudiopm.com/cran/__linux__/bionic/latest\" Then restart RStudio Connect. Reminder: Restart Connect You should already have completed this step during license activation, but remember to restart Connect after editing the configuration file . sudo systemctl restart rstudio-connect Reminder: Check the error log After changing the Connect configuration settings, always remember to check the error log for any problems: sudo tail /var/log/rstudio-connect.log Task: Create users on Connect Now you can log into Connect and start to explore the system. Usually, for a default installation you must remember to add the :3939 port However, for this classroom, we have a redirect, and instead of port 3939, you use the /rsconnect postfix to the url. Or simply click on the link from the classroom homepage. Task: Create admin user Create a new user by clicking on \"Log In\" and using one of the LDAP users Remember: The first user you create on Connect is the admin user The Connect authentication mechanism is not necessarily tied to the authentication mechanism of RStudio Server Pro. However, it will make life easier if you use the same user name for your admin user than the user you are logged into on RStudio Server Pro. Concretely, this means that you should log in to Connect as jen Task: Send test email From the RStudio Connect Admin panel, click \"Mail Settings\" to access the email settings. Although you can't edit settings from here, the admin user can view the settings, as well as send a test email. Send a test email. Remember that any email on this machine will appear in the RoundCube email client. To access your mailbox, click on the \"Email Server\" link in your workshop server page: If your email settings are correct, Connect will send a test email, and you can view this in Roundcube: Task: Impersonate a second user In this task you impersonate a second user, to experience the workflow that a typical Connect user will follow to create an account. First, log out of Connect, by clicking on the user icon for jen Then, on the expanded section, click \"Log Out\" Add a second user by clicking on \"Log In\" and using one of the LDAP users Check that the new user is not an administrator but has the viewer role. Config file cheat sheet If you have trouble along the way, and want to compare your config file with a known good installation: ; RStudio Connect configuration file [Server] SenderEmail = admin@localhost EmailProvider = SMTP Address = http://ec2-00-00-00-00.us-east-2.compute.amazonaws.com/rsconnect [SMTP] Host = localhost Port = 25 startTls = never [HTTP] Listen = :3939 NoWarning [Authentication] Provider = LDAP [Licensing] LicenseType = remote [LDAP \"Sample OpenLDAP Configuration\"] ServerAddress = leader.example.org:389 BindDN = cn=admin,dc=example,dc=org BindPassword = admin UserSearchBaseDN = dc=example,dc=org UniqueIdAttribute = entryUUID UsernameAttribute = uid UserObjectClass = posixAccount UserEmailAttribute = mail UserFirstNameAttribute = givenName UserLastNameAttribute = sn Signs of success Upon completion of this exercise you have: A running instance of RStudio Connect Working email integration Multiple users","title":"4.4 Lab:  Configuring RStudio Connect"},{"location":"rstudio_connect/lab_configure_connect/#quiz","text":"Which authentication protocols are supported by RStudio Connect? Plain password Proxy PAM LDAP Google OAuth2 OAuth 2 SAML Answer: Plain password, proxy, PAM, LDAP, Google OAuth 2 amd SAML (supported since v1.7.4) are all supported. OAuth 2 is not currently supported, with the exception of the Google specific varient. Use proxy auth instead. Which of the following mail systems are supported by Connect? sendmail SMTP SendGrid Answer: Sendmail and SMTP","title":"Quiz"},{"location":"rstudio_connect/lab_configure_connect/#task-edit-connect-configuration-file","text":"","title":"Task: Edit Connect configuration file"},{"location":"rstudio_connect/lab_configure_connect/#configure-server-address","text":"Task: Open the config file at /etc/rstudio-connect/rstudio-connect.gcfg with a text editor (e.g. vi ) Edit the [Server] section to set the server adress to your machine name. Important: For the purpose of this training session, use http:// instead of https:// . (For a production server you must configure a SSL certificate!) The Connect instance in the classroom VM has been configured to listen at /rsconnect . Make sure you append this string at the end of your server address. [Server] Address = http://ec2-00-000-00-000.us-east-2.compute.amazonaws.com/rsconnect","title":"Configure server address"},{"location":"rstudio_connect/lab_configure_connect/#screencast-configure-server-address","text":"","title":"Screencast: Configure server address"},{"location":"rstudio_connect/lab_configure_connect/#task-disable-http-warning","text":"It is possible to disable the HTTP warning. (For your sanity during the course. Do not do this in production!) ` [HTTP] NoWarning","title":"Task: Disable HTTP warning"},{"location":"rstudio_connect/lab_configure_connect/#task-configure-email","text":"","title":"Task: Configure email"},{"location":"rstudio_connect/lab_configure_connect/#configure-email-provider","text":"Connect sends email for lots of things, so it is important to configure sending of mail correctly. For this class, you will use the RoundCube mail engine that is pre-configured in the classroom virtual machine. Remember that any email you send on this machine will be intercepted and will appear in your RoundCube inbox. For full instructions about setting up email, refer to the admin guide, Section 8: Email Setup Hint: the config file is at /etc/rstudio-connect/rstudio-connect.gcfg [Server] EmailProvider = SMTP SenderEmail = admin@localhost","title":"Configure email provider"},{"location":"rstudio_connect/lab_configure_connect/#add-smtp-settings","text":"Review the section in the admin guide for SMTP email: Appendices / Configuration / SMTP In your own organisation, you should speak to your email administrator to ensure you use the correct settings. For the classroom virtual machine, use these settings to edit the Connect config file: [SMTP] Host = localhost Port = 25 startTls = never Save the settings. Restart the server. sudo systemctl restart rstudio-connect","title":"Add SMTP settings"},{"location":"rstudio_connect/lab_configure_connect/#screencast-configure-email","text":"","title":"Screencast: Configure email"},{"location":"rstudio_connect/lab_configure_connect/#task-configure-authentication","text":"","title":"Task: Configure Authentication"},{"location":"rstudio_connect/lab_configure_connect/#choose-ldap-authentication","text":"Edit the [Authentication] section in the Connect configuration to use LDAP as authentication provider: [Authentication] Provider = LDAP","title":"Choose LDAP authentication"},{"location":"rstudio_connect/lab_configure_connect/#configure-ldap","text":"It is helpful to add a [Debug] section to the Connect configuration to enable debug logging for LDAP: [Debug] Log = ldap For the actual configuration, you can use the complete configuration example in the admin guide as starting point. Compare the LDAP structure provided in the admin guide with the one used on leader.example.org to determin the necessary changes. Hint: You can get the LDAP structure for user jen with: ldapsearch -w admin -h leader.example.org -p 389 -D cn = admin,dc = example,dc = org -b dc = example,dc = org cn = jen Hint: It is enough to adjust ServerAddress , BindDN , BindPassword and UserSearchBaseDN .","title":"Configure LDAP"},{"location":"rstudio_connect/lab_configure_connect/#task-activate-your-license","text":"","title":"Task: activate your license"},{"location":"rstudio_connect/lab_configure_connect/#activate-your-license","text":"In a production setting you must obtain a license key from RStudio before the evaluation period expires. Review the floating licenses chapter in the Connect admin guide. Your instructor set up a floating license server for this class. This server contains an activation key that is valid for the duration of this training class. Tasks: Follow the instructions at using floating licensing to activate your license. Activate the floating license, using leader.example.org:8999 as your <server-hostname-or-ip> Then restart Connect sudo /opt/rstudio-connect/bin/license-manager license-server leader.example.org:8999 sudo systemctl restart rstudio-connect","title":"Activate your license"},{"location":"rstudio_connect/lab_configure_connect/#screencast-activate-license","text":"","title":"Screencast: Activate license"},{"location":"rstudio_connect/lab_configure_connect/#signs-of-success-licensing","text":"After restarting Connect, query the license manager to check that you have an activated license. sudo /opt/rstudio-connect/bin/license-manager status If you activated the floating license correctly, you should see an active lease in the -- Floating license status -- section: -- Floating license status -- License-Server: leader.example.org:8999 Lease: Active Users: 100 User-Activity-Days: 365 Shiny-Users: 100 Allow-APIs: 1","title":"Signs of success (licensing)"},{"location":"rstudio_connect/lab_configure_connect/#task-get-binary-packages-on-connect","text":"","title":"Task: Get binary packages on Connect"},{"location":"rstudio_connect/lab_configure_connect/#reminder-of-binary-packages","text":"You have already configured RStudio Server Pro to install R packages from pre-compiled binaries from RStudio Package Manager. You can get the same benefit of fast binary installs on RStudio Connect by setting an override switch on Connect. When this is configured, Connect will ignore the packrat manifest file in the deployment bundle and attempt to install from the override repository instead. To achieve this, you have to configure Connect to point to an instance of RStudio Package Manager. Since you haven't yet configured RStudio Package Manager on your VM, you will temporarily point Connect to a demonstration instance of RStudio Package Manager at demo.rstudiopm.com","title":"Reminder of binary packages"},{"location":"rstudio_connect/lab_configure_connect/#override-the-package-repository","text":"Read the documentation , then edit your Connect configuration file: [RPackageRepository \"CRAN\"] URL = \"https://demo.rstudiopm.com/cran/__linux__/bionic/latest\" Then restart RStudio Connect.","title":"Override the Package Repository"},{"location":"rstudio_connect/lab_configure_connect/#reminder-restart-connect","text":"You should already have completed this step during license activation, but remember to restart Connect after editing the configuration file . sudo systemctl restart rstudio-connect","title":"Reminder: Restart Connect"},{"location":"rstudio_connect/lab_configure_connect/#reminder-check-the-error-log","text":"After changing the Connect configuration settings, always remember to check the error log for any problems: sudo tail /var/log/rstudio-connect.log","title":"Reminder: Check the error log"},{"location":"rstudio_connect/lab_configure_connect/#task-create-users-on-connect","text":"Now you can log into Connect and start to explore the system. Usually, for a default installation you must remember to add the :3939 port However, for this classroom, we have a redirect, and instead of port 3939, you use the /rsconnect postfix to the url. Or simply click on the link from the classroom homepage.","title":"Task: Create users on Connect"},{"location":"rstudio_connect/lab_configure_connect/#task-create-admin-user","text":"Create a new user by clicking on \"Log In\" and using one of the LDAP users Remember: The first user you create on Connect is the admin user The Connect authentication mechanism is not necessarily tied to the authentication mechanism of RStudio Server Pro. However, it will make life easier if you use the same user name for your admin user than the user you are logged into on RStudio Server Pro. Concretely, this means that you should log in to Connect as jen","title":"Task: Create admin user"},{"location":"rstudio_connect/lab_configure_connect/#task-send-test-email","text":"From the RStudio Connect Admin panel, click \"Mail Settings\" to access the email settings. Although you can't edit settings from here, the admin user can view the settings, as well as send a test email. Send a test email. Remember that any email on this machine will appear in the RoundCube email client. To access your mailbox, click on the \"Email Server\" link in your workshop server page: If your email settings are correct, Connect will send a test email, and you can view this in Roundcube:","title":"Task: Send test email"},{"location":"rstudio_connect/lab_configure_connect/#task-impersonate-a-second-user","text":"In this task you impersonate a second user, to experience the workflow that a typical Connect user will follow to create an account. First, log out of Connect, by clicking on the user icon for jen Then, on the expanded section, click \"Log Out\" Add a second user by clicking on \"Log In\" and using one of the LDAP users Check that the new user is not an administrator but has the viewer role.","title":"Task: Impersonate a second user"},{"location":"rstudio_connect/lab_configure_connect/#config-file-cheat-sheet","text":"If you have trouble along the way, and want to compare your config file with a known good installation: ; RStudio Connect configuration file [Server] SenderEmail = admin@localhost EmailProvider = SMTP Address = http://ec2-00-00-00-00.us-east-2.compute.amazonaws.com/rsconnect [SMTP] Host = localhost Port = 25 startTls = never [HTTP] Listen = :3939 NoWarning [Authentication] Provider = LDAP [Licensing] LicenseType = remote [LDAP \"Sample OpenLDAP Configuration\"] ServerAddress = leader.example.org:389 BindDN = cn=admin,dc=example,dc=org BindPassword = admin UserSearchBaseDN = dc=example,dc=org UniqueIdAttribute = entryUUID UsernameAttribute = uid UserObjectClass = posixAccount UserEmailAttribute = mail UserFirstNameAttribute = givenName UserLastNameAttribute = sn","title":"Config file cheat sheet"},{"location":"rstudio_connect/lab_configure_connect/#signs-of-success","text":"Upon completion of this exercise you have: A running instance of RStudio Connect Working email integration Multiple users","title":"Signs of success"},{"location":"rstudio_connect/lab_install_connect/","text":"Quiz: Pre-reqs Find the Admin guide for RStudio Connect at https://docs.rstudio.com/ Read through section 1 (Introduction), then answer the following questions: Which operating systems are supported for RStudio Connect? Windows Server 2018 Suse Linux Ubuntu Debian Fedora Red Hat CentOS Answer: The correct answer is: Ubuntu, Suse Linux, Red Hat Linux and CentOS (since it's practically identical to Red Hat). Remember: R must be installed prior to installing RStudio Connect. (You should have done that earlier!) Quiz: Installation R version R must be installed on the system before you start installation of RStudio Connect. Read the installation section of the admin guide, then answer these questions: What is the minimum R version that is supported on Connect? R-3.0.0 R-3.1.0 R-3.2.0 R-3.3.0 R-3.4.0 R-3.5.0 Answer: R-3.1.0 is the minimum required version. Operating system Before you start the installation on the server, you must note the operating system you are using. Hint: lsb_release -a What operating system are you using on the training server? Ubuntu Linux Red Hat Linux Answer: The training server is running Ubuntu Linux. Task: Install RStudio Connect Follow the instructions for download and installing Connect at : https://docs.rstudio.com/rsc/installation/ Hint: Use the folder /usr/local/src to store the downloads after the installation. Success How to know you did it? sudo tail /var/log/rstudio-connect.log You should see something like this: 2019 /01/10 22 :25:07 Using HTTP access log: /var/log/rstudio-connect.access.log 2019 /01/10 22 :25:07 Sweeping ad-hoc variants 2019 /01/10 22 :25:07 Starting HTTP listener on :3939 The last line means Connect is listening on port 3939 You can also open the connect landing page (from your course login page) It's Alive! Can I use it? Not yet. More choices to make: Initial configuration, including email Auth Provider You cover these in the next section","title":"4.2 Lab:  Installing RStudio Connect"},{"location":"rstudio_connect/lab_install_connect/#quiz-pre-reqs","text":"Find the Admin guide for RStudio Connect at https://docs.rstudio.com/ Read through section 1 (Introduction), then answer the following questions: Which operating systems are supported for RStudio Connect? Windows Server 2018 Suse Linux Ubuntu Debian Fedora Red Hat CentOS Answer: The correct answer is: Ubuntu, Suse Linux, Red Hat Linux and CentOS (since it's practically identical to Red Hat). Remember: R must be installed prior to installing RStudio Connect. (You should have done that earlier!)","title":"Quiz: Pre-reqs"},{"location":"rstudio_connect/lab_install_connect/#quiz-installation","text":"","title":"Quiz: Installation"},{"location":"rstudio_connect/lab_install_connect/#r-version","text":"R must be installed on the system before you start installation of RStudio Connect. Read the installation section of the admin guide, then answer these questions: What is the minimum R version that is supported on Connect? R-3.0.0 R-3.1.0 R-3.2.0 R-3.3.0 R-3.4.0 R-3.5.0 Answer: R-3.1.0 is the minimum required version.","title":"R version"},{"location":"rstudio_connect/lab_install_connect/#operating-system","text":"Before you start the installation on the server, you must note the operating system you are using. Hint: lsb_release -a What operating system are you using on the training server? Ubuntu Linux Red Hat Linux Answer: The training server is running Ubuntu Linux.","title":"Operating system"},{"location":"rstudio_connect/lab_install_connect/#task-install-rstudio-connect","text":"Follow the instructions for download and installing Connect at : https://docs.rstudio.com/rsc/installation/ Hint: Use the folder /usr/local/src to store the downloads after the installation.","title":"Task: Install RStudio Connect"},{"location":"rstudio_connect/lab_install_connect/#success","text":"How to know you did it? sudo tail /var/log/rstudio-connect.log You should see something like this: 2019 /01/10 22 :25:07 Using HTTP access log: /var/log/rstudio-connect.access.log 2019 /01/10 22 :25:07 Sweeping ad-hoc variants 2019 /01/10 22 :25:07 Starting HTTP listener on :3939 The last line means Connect is listening on port 3939 You can also open the connect landing page (from your course login page)","title":"Success"},{"location":"rstudio_connect/lab_install_connect/#its-alive-can-i-use-it","text":"Not yet. More choices to make: Initial configuration, including email Auth Provider You cover these in the next section","title":"It's Alive! Can I use it?"},{"location":"rstudio_connect/lab_using_connect/","text":"Task: Allow pop-ups in your browser When you connect your IDE to Connect, a choreographed dance starts. During this dance you provide your Connect credentials to RStudio Server Pro. The dance includes a pop-up window that is blocked by most modern browsers. In the browser tab that contains RStudio Server, configure the browser to allow pop-ups from this site. Video review: Task: Connect your IDE to Connect Use the \"Global Options\" menu in RStudio Server to configure a connection to your Connect instance. You need the host name or IP address. RStudio --> Tools --> Global Options --> Publishing --> Connect Enter: http://<host_name>/rsconnect Video review: Task: Copy the example apps Perform this task from your SSH console You can find the example apps for this classroom at /usr/share/class/pro_admin_training_assets ls -l /usr/share/class/pro_admin_training_assets/ Your task is to copy these files to jen 's home folder Remember: Think carefully about where you are logged in as which user You are probably: logged in as admin-user in SSH logged in as jen in RStudio Server Pro So, with your permissions as the admin-user , you must copy the course files to the home folder of the RStudio Server user, and set the file ownership so that jen owns these files. sudo cp -r /usr/share/class/pro_admin_training_assets/ /home/jen sudo chown -R jen: /home/jen Alternatively you can use the Terminal tab within RStudio Server, which provides you with a terminal session for user jen : cp -r /usr/share/class/pro_admin_training_assets/ ~ ls -l /home/jen/pro_admin_training_assets/ total 92960 drwxr-xr-x 2 jen root 4096 Oct 22 11:42 00_app drwxr-xr-x 2 jen root 4096 Oct 22 11:42 01_app drwxr-xr-x 2 jen root 4096 Oct 22 11:42 02_app drwxr-xr-x 2 jen root 4096 Oct 22 11:42 03_databases drwxr-xr-x 2 jen root 4096 Oct 22 11:42 04_report drwxr-xr-x 3 jen root 4096 Oct 22 11:42 05_api drwxr-xr-x 2 jen root 4096 Oct 22 11:42 06_troubleshooting -rw-r--r-- 1 jen root 199 Oct 22 11:42 README.md -rw-r--r-- 1 jen root 795 Oct 22 11:42 _prereqs.R -rw-r--r-- 1 jen root 289 Oct 22 11:42 answer.txt -rw-r--r-- 1 jen root 95123524 Oct 22 11:42 babynames.csv -rw-r--r-- 1 jen root 248 Oct 22 11:42 config.txt -rw-r--r-- 1 jen root 229 Oct 22 11:42 pro_admin_training_assets.Rproj -rw-r--r-- 1 jen root 847 Oct 22 11:42 rstudio-session-sssd -rw-r--r-- 1 jen root 471 Oct 22 11:42 rstudio-sssd -rw-r--r-- 1 jen root 1313 Oct 22 11:42 s-answer.txt -rw-r--r-- 1 jen root 1258 Oct 22 11:42 s-template.txt Task: Deploy app_0 Now open RStudio Server Pro and navigate to ~/pro_admin_training_assets in the files tab (where you are logged in as jen ) Do the following Navigate to 00_app and open app_0.R You may get a ribbon that says \"shiny is required but not installed\" If you get this banner, click to install the shiny package. Click the \"Run App\" button Does the app run locally? Close the app and return to the code pane Find the \"publish\" button in the upper-right hand corner of the code pane : Click the publish app button Publish the app to Connect /publish_app_0.png) While the app deploys, observe: How long does it take? Can you see what happens? After deployment to Connect: Does the app run in Connect? Deployment failure? If you get the following error message during publication, you've clicked the \"wrong\" publishing button. It is possible to publish apps in several ways from the IDE: From the code pane : This method is reliable, and works for any document, regardless of what file name you gave the document (app or report). From the running shiny app pane: This method only work in special cases. Specifically, it assumes you named your shiny app app.R . So, to fix this problem, use the publish button in the code pane . Explore the content settings panel After successful deployment, a new browser tab will open, with your running Connect app. Notice that as the publisher you can change some settings for your newly deployed app. In the top right hand corner of the Connect screen you will see a ribbon of action buttons: Explore each of these action buttons: Info provides usage stats for the previous 30 days, and allows you to upload a cover image for the content Access allows you to change access control and edit the custom URL Runtime lets you scale a Shiny app to multiple processes (in parallel) Schedule allows you to run a Report at scheduled times (not applicable for apps) Vars let's you change environment variables Logs displays the deployment log and any errors For more help, refer to the Connect user guide . Task: Deploy app_1 Run and deploy app_1 Now for a more complex example Navigate to 01_app and open app_1.R Select \"Run App\" Does the app run locally? Close the running app Click the \"publish\" button in the code pane to deploy the app to Connect. While the app deploys, observe: Can you see what happens? Observe the \"Deploy\" pane in RStudio Server Pro: Specifically, notice the bundle id and document id How long does it take? The deployment process can take several minutes, while Connects installs every R package that was used in the app. After deployment to Connect: Does the app run in Connect? Task: Redeploy app_1 That was pretty easy! Next, take a look at the redeployment process. To do this, make any trivial change to the code, e.g. by inserting a new line after the library(...) statements. Then save the file and deploy the same app again. Observe: How long does it take to deploy the 2nd time? It should much faster than the first time The reason is that Connect caches R packages, so will fetch from the cache every subsequent time an app uses the same package (and same version of the package) See the Connect admin guide on package caching for more information. Does the deployment succeed? Task: Browse the local Connect deployment record Notice that after your deployment, you have a new folder called rsconnect in your application folder (in RStudio Server). Explore this folder until you find the file app_01.dcf . Open this file Can you recognise: The app title? Your app id? Your bundle id? Your user name, account and server? Task: Deploy app_2 How to diagnose a failed deployment Task: Run app_02 Attempt to run 02_app/app_02.R locally Note that the execution fails The missing package is available in the course materials and can be installed using install.packages ( \"~/pro_admin_training_assets/packages/rstudiointernal_0.2.0.tar.gz\" , repos = NULL ) Does the app work locally after installing this package? Task: Deploy app_02 Attempt to deploy 02_app/app_02.R Note that the deployment fails Do not try to fix this, but try to spot the failure messages in your own deployment log. Ponder: sandboxing on Connect By inspecting the deployment log, attempt to answer: What is going wrong and where? At home? At daycare? What are your options for fixing this? You don't have to fix the issue - just identify the root cause Answer hints: Which package is causing a problem? How was this package installed? How can you install a private package on Connect? External Package Installation Find some references in the Connect admin guide about internal repos and white listing.","title":"4.6 Lab:  Using RStudio Connect"},{"location":"rstudio_connect/lab_using_connect/#task-allow-pop-ups-in-your-browser","text":"When you connect your IDE to Connect, a choreographed dance starts. During this dance you provide your Connect credentials to RStudio Server Pro. The dance includes a pop-up window that is blocked by most modern browsers. In the browser tab that contains RStudio Server, configure the browser to allow pop-ups from this site. Video review:","title":"Task: Allow pop-ups in your browser"},{"location":"rstudio_connect/lab_using_connect/#task-connect-your-ide-to-connect","text":"Use the \"Global Options\" menu in RStudio Server to configure a connection to your Connect instance. You need the host name or IP address. RStudio --> Tools --> Global Options --> Publishing --> Connect Enter: http://<host_name>/rsconnect Video review:","title":"Task: Connect your IDE to Connect"},{"location":"rstudio_connect/lab_using_connect/#task-copy-the-example-apps","text":"Perform this task from your SSH console You can find the example apps for this classroom at /usr/share/class/pro_admin_training_assets ls -l /usr/share/class/pro_admin_training_assets/ Your task is to copy these files to jen 's home folder Remember: Think carefully about where you are logged in as which user You are probably: logged in as admin-user in SSH logged in as jen in RStudio Server Pro So, with your permissions as the admin-user , you must copy the course files to the home folder of the RStudio Server user, and set the file ownership so that jen owns these files. sudo cp -r /usr/share/class/pro_admin_training_assets/ /home/jen sudo chown -R jen: /home/jen Alternatively you can use the Terminal tab within RStudio Server, which provides you with a terminal session for user jen : cp -r /usr/share/class/pro_admin_training_assets/ ~ ls -l /home/jen/pro_admin_training_assets/ total 92960 drwxr-xr-x 2 jen root 4096 Oct 22 11:42 00_app drwxr-xr-x 2 jen root 4096 Oct 22 11:42 01_app drwxr-xr-x 2 jen root 4096 Oct 22 11:42 02_app drwxr-xr-x 2 jen root 4096 Oct 22 11:42 03_databases drwxr-xr-x 2 jen root 4096 Oct 22 11:42 04_report drwxr-xr-x 3 jen root 4096 Oct 22 11:42 05_api drwxr-xr-x 2 jen root 4096 Oct 22 11:42 06_troubleshooting -rw-r--r-- 1 jen root 199 Oct 22 11:42 README.md -rw-r--r-- 1 jen root 795 Oct 22 11:42 _prereqs.R -rw-r--r-- 1 jen root 289 Oct 22 11:42 answer.txt -rw-r--r-- 1 jen root 95123524 Oct 22 11:42 babynames.csv -rw-r--r-- 1 jen root 248 Oct 22 11:42 config.txt -rw-r--r-- 1 jen root 229 Oct 22 11:42 pro_admin_training_assets.Rproj -rw-r--r-- 1 jen root 847 Oct 22 11:42 rstudio-session-sssd -rw-r--r-- 1 jen root 471 Oct 22 11:42 rstudio-sssd -rw-r--r-- 1 jen root 1313 Oct 22 11:42 s-answer.txt -rw-r--r-- 1 jen root 1258 Oct 22 11:42 s-template.txt","title":"Task: Copy the example apps"},{"location":"rstudio_connect/lab_using_connect/#task-deploy-app_0","text":"Now open RStudio Server Pro and navigate to ~/pro_admin_training_assets in the files tab (where you are logged in as jen ) Do the following Navigate to 00_app and open app_0.R You may get a ribbon that says \"shiny is required but not installed\" If you get this banner, click to install the shiny package. Click the \"Run App\" button Does the app run locally? Close the app and return to the code pane Find the \"publish\" button in the upper-right hand corner of the code pane : Click the publish app button Publish the app to Connect /publish_app_0.png) While the app deploys, observe: How long does it take? Can you see what happens? After deployment to Connect: Does the app run in Connect?","title":"Task: Deploy app_0"},{"location":"rstudio_connect/lab_using_connect/#deployment-failure","text":"If you get the following error message during publication, you've clicked the \"wrong\" publishing button. It is possible to publish apps in several ways from the IDE: From the code pane : This method is reliable, and works for any document, regardless of what file name you gave the document (app or report). From the running shiny app pane: This method only work in special cases. Specifically, it assumes you named your shiny app app.R . So, to fix this problem, use the publish button in the code pane .","title":"Deployment failure?"},{"location":"rstudio_connect/lab_using_connect/#explore-the-content-settings-panel","text":"After successful deployment, a new browser tab will open, with your running Connect app. Notice that as the publisher you can change some settings for your newly deployed app. In the top right hand corner of the Connect screen you will see a ribbon of action buttons: Explore each of these action buttons: Info provides usage stats for the previous 30 days, and allows you to upload a cover image for the content Access allows you to change access control and edit the custom URL Runtime lets you scale a Shiny app to multiple processes (in parallel) Schedule allows you to run a Report at scheduled times (not applicable for apps) Vars let's you change environment variables Logs displays the deployment log and any errors For more help, refer to the Connect user guide .","title":"Explore the content settings panel"},{"location":"rstudio_connect/lab_using_connect/#task-deploy-app_1","text":"","title":"Task: Deploy app_1"},{"location":"rstudio_connect/lab_using_connect/#run-and-deploy-app_1","text":"Now for a more complex example Navigate to 01_app and open app_1.R Select \"Run App\" Does the app run locally? Close the running app Click the \"publish\" button in the code pane to deploy the app to Connect. While the app deploys, observe: Can you see what happens? Observe the \"Deploy\" pane in RStudio Server Pro: Specifically, notice the bundle id and document id How long does it take? The deployment process can take several minutes, while Connects installs every R package that was used in the app. After deployment to Connect: Does the app run in Connect?","title":"Run and deploy app_1"},{"location":"rstudio_connect/lab_using_connect/#task-redeploy-app_1","text":"That was pretty easy! Next, take a look at the redeployment process. To do this, make any trivial change to the code, e.g. by inserting a new line after the library(...) statements. Then save the file and deploy the same app again. Observe: How long does it take to deploy the 2nd time? It should much faster than the first time The reason is that Connect caches R packages, so will fetch from the cache every subsequent time an app uses the same package (and same version of the package) See the Connect admin guide on package caching for more information. Does the deployment succeed?","title":"Task: Redeploy app_1"},{"location":"rstudio_connect/lab_using_connect/#task-browse-the-local-connect-deployment-record","text":"Notice that after your deployment, you have a new folder called rsconnect in your application folder (in RStudio Server). Explore this folder until you find the file app_01.dcf . Open this file Can you recognise: The app title? Your app id? Your bundle id? Your user name, account and server?","title":"Task: Browse the local Connect deployment record"},{"location":"rstudio_connect/lab_using_connect/#task-deploy-app_2","text":"","title":"Task: Deploy app_2"},{"location":"rstudio_connect/lab_using_connect/#how-to-diagnose-a-failed-deployment","text":"","title":"How to diagnose a failed deployment"},{"location":"rstudio_connect/lab_using_connect/#task-run-app_02","text":"Attempt to run 02_app/app_02.R locally Note that the execution fails The missing package is available in the course materials and can be installed using install.packages ( \"~/pro_admin_training_assets/packages/rstudiointernal_0.2.0.tar.gz\" , repos = NULL ) Does the app work locally after installing this package?","title":"Task: Run app_02"},{"location":"rstudio_connect/lab_using_connect/#task-deploy-app_02","text":"Attempt to deploy 02_app/app_02.R Note that the deployment fails Do not try to fix this, but try to spot the failure messages in your own deployment log.","title":"Task: Deploy app_02"},{"location":"rstudio_connect/lab_using_connect/#ponder-sandboxing-on-connect","text":"By inspecting the deployment log, attempt to answer: What is going wrong and where? At home? At daycare? What are your options for fixing this? You don't have to fix the issue - just identify the root cause Answer hints: Which package is causing a problem? How was this package installed? How can you install a private package on Connect? External Package Installation Find some references in the Connect admin guide about internal repos and white listing.","title":"Ponder: sandboxing on Connect"},{"location":"rstudio_connect/using_connect/","text":"In this session In this session you: Connect your RStudio IDE to Connect Deploy a simple app Discover some other administrator tools Connecting the IDE Connecting your IDE to Connect To deploy content from the IDE to Connect, you first have to set up a connection, i.e. tell the IDE where to find Connect. RStudio --> Tools --> Global Options --> Publishing --> Connect Enter your server address: 'http:// /rsconnect' ??? Have them do this now. Talk about what happens and show them the resulting file. Video: Connecting your IDE to Connect Pointing IDE to Connect What does this do? Creates a public / private key pair and stores the key (and token) in a user-specific folder. Why do this? When you publish content you have a machine talking to another machine. That means you need a non-interactive way to authenticate. HINT: This theme will come up again ??? Run the following as a demo: ## R ## creates a directory rsconnect :: accountsConfigDir () ## sh ## shows a few .dcf files tree <directory> cat <result.dcf> Demo Deploy an app to Connect Navigate to 0_app and open app_0.R Select \"Run App\" In the upper-right hand corner, \"Publish\" ??? Observe how long it takes That was pretty easy ... ... make a trivial change in the app and deploy again. Write down your observations. ??? Much faster App failed Understanding failure Understanding failure Deploying content to Connect is like taking a kid from home to daycare. If a problem arises, you must troubleshoot Did the problem happen at home (you forgot it)? Or at daycare (they lost it)? There also are different rules at home and daycare. Explore some troubleshooting tools Deployment Log Bundles Application Log Connect Sandbox Deployment log Preparing to deploy application...DONE Uploading bundle for application: 1 ...DONE Deploying bundle: 1 for application: 1 ... Building Shiny application... Bundle requested R version 3 .4.1 ; using /usr/lib64/R/bin/R which has version 3 .4.1 2017 /12/05 00 :15:36.162805962 # Validating R library read / write permissions ------------ 2017 /12/05 00 :15:36.188861769 # Validating packrat installation -------------------------- 2017 /12/05 00 :15:36.189041620 Installed packrat SHA is: 29b1c491b8f90aab40077d011d0077d81a99d7d4 2017 /12/05 00 :15:36.189180324 Packaged packrat SHA is: 29b1c491b8f90aab40077d011d0077d81a99d7d4 2017 /12/05 00 :15:36.190624677 Packrat is up-to-date. 2017 /12/05 00 :15:36.190776099 R version: 3 .4.1 2017 /12/05 00 :15:36.190838996 packrat version: 0 .4.8.43 2017 /12/05 00 :15:36.191408200 # Validating packrat cache read / write permissions -------- 2017 /12/05 00 :15:36.307287524 Audited package hashes with local packrat installation. 2017 /12/05 00 :15:36.310763166 # Installing required R packages withpackrat::restore()` --- 2017 /12/05 00 :15:36.491569335 Installing BH ( 1 .65.0-1 ) ... 2017 /12/05 00 :15:43.453766543 Caching BH. 2017 /12/05 00 :15:45.498690843 Using cached BH. 2017 /12/05 00 :15:45.645180957 OK ( built source ) 2017 /12/05 00 :15:45.645525390 Installing MASS ( 7 .3-47 ) ... 2017 /12/05 00 :15:53.866638423 Caching MASS. 2017 /12/05 00 :15:53.891269915 Using cached MASS. 2017 /12/05 00 :15:53.892713176 OK ( built source ) 2017 /12/05 00 :15:53.892966963 Installing R6 ( 2 .2.2 ) ... 2017 /12/05 00 :15:55.248487715 Caching R6. 2017 /12/05 00 :15:55.253542270 Using cached R6. 2017 /12/05 00 :15:55.254496893 OK ( built source ) 2017 /12/05 00 :15:55.254752408 Installing RColorBrewer ( 1 .1-2 ) ... 2017 /12/05 00 :15:56.433528568 Caching RColorBrewer. 2017 /12/05 00 :15:56.436468956 Using cached RColorBrewer. 2017 /12/05 00 :15:56.437064457 OK ( built source ) 2017 /12/05 00 :15:56.437335870 Installing Rcpp ( 0 .12.13 ) ... The deployment bundle Components of the bundle Part 1: Create Bundle on Client Part 2: Upload Bundle on RSC Part 3: Restore Bundle Components of the bundle: Create and upload Part 1: Create Bundle on Client Preparing to deploy application...DONE Part 2: Upload Bundle on RSC Uploading bundle for application: 1 ...DONE Deploying bundle: 1 for application: 1 ... Components of the bundle: Restore Part 3: Restore Bundle Bundle requested R version 3 .4.1 ; using /usr/lib64/R/bin/R which has version 3 .4.1 2017 /12/05 00 :15:36.162805962 # Validating R library read / write permissions -------------------------------- 2017 /12/05 00 :15:36.188861769 # Validating packrat installation ---------------------------------------------- 2017 /12/05 00 :15:36.189041620 Installed packrat SHA is: 29b1c491b8f90aab40077d011d0077d81a99d7d4 2017 /12/05 00 :15:36.189180324 Packaged packrat SHA is: 29b1c491b8f90aab40077d011d0077d81a99d7d4 2017 /12/05 00 :15:36.190624677 Packrat is up-to-date. 2017 /12/05 00 :15:36.190776099 R version: 3 .4.1 2017 /12/05 00 :15:36.190838996 packrat version: 0 .4.8.43 2017 /12/05 00 :15:36.191408200 # Validating packrat cache read / write permissions ---------------------------- 2017 /12/05 00 :15:36.307287524 Audited package hashes with local packrat installation. 2017 /12/05 00 :15:36.310763166 # Installing required R packages withpackrat::restore()` --------------------- 2017 /12/05 00 :15:36.491569335 Installing BH ( 1 .65.0-1 ) ... 2017 /12/05 00 :15:43.453766543 Caching BH. 2017 /12/05 00 :15:45.498690843 Using cached BH. 2017 /12/05 00 :15:45.645180957 OK ( built source ) 2017 /12/05 00 :15:45.645525390 Installing MASS ( 7 .3-47 ) ... 2017 /12/05 00 :15:53.866638423 Caching MASS. 2017 /12/05 00 :15:53.891269915 Using cached MASS. 2017 /12/05 00 :15:53.892713176 OK ( built source ) 2017 /12/05 00 :15:53.892966963 Installing R6 ( 2 .2.2 ) ... 2017 /12/05 00 :15:55.248487715 Caching R6. 2017 /12/05 00 :15:55.253542270 Using cached R6. 2017 /12/05 00 :15:55.254496893 OK ( built source ) 2017 /12/05 00 :15:55.254752408 Installing RColorBrewer ( 1 .1-2 ) ... 2017 /12/05 00 :15:56.433528568 Caching RColorBrewer. 2017 /12/05 00 :15:56.436468956 Using cached RColorBrewer. 2017 /12/05 00 :15:56.437064457 OK ( built source ) 2017 /12/05 00 :15:56.437335870 Installing Rcpp ( 0 .12.13 ) ... Summary of the bundle Lots happened during the deployment. First thing is the deployment log in the IDE: What is this bundle thing? Application and bundle Id Version of R requested vs used Packages to install Bundle: bundle id and app id The bundle id and app id contain useful information. This is the log for a deployment to an app with app id 2 . Notice the bundle id is 5 : Discovering document dependencies... OK Preparing to deploy document...DONE Uploading bundle for document: 2 ...DONE Deploying bundle: 5 for document: 2 ... Building R Markdown document... The app id (2) corresponds to the app id in Connect (2): Redeployment increments the bundle id Redeploying the app increments the bundle id (in this case to 6). (The bundle id is unique across the Connect instance) Discovering document dependencies... OK Preparing to deploy document...DONE Uploading bundle for document: 2 ...DONE Deploying bundle: 6 for document: 2 ... Building R Markdown document... Video: viewing the bundle in Connect Viewing the bundle in Connect You can download the bundle from Connect, and the bundle id corresponds to the information in the deployment log: Notice: Both bundles 2 and 6 appear in Source Versions You can view, download or activate any previous bundle Understanding what's in the bundle Part 1: Bundle (What are you sending to daycare?) To understand what happened in RStudio, download the bundle from Connect. Find the \"Source versions\" button by expanding the ... pills button Then download the bundle ??? Download the bundle from RSC and show the contents of the packrat.lock file and the manifest.json file. Have them do this and discuss the results. Part 1: Bundle (what's in the bundle?) packrat.lock manifest.json PackratFormat: 1.4 PackratVersion: 0.4.8.1 RVersion: 3.4.1 Repos: CRAN=https://cran.rstudio.com/ Package: BH Source: CRAN Version: 1.65.0-1 Hash: 95f62be4d6916aae14a310a8b56a6475 application code supporting files (data) Part 1: Bundle (deployment record) Deploying content creates a deployment record in the rsconnect folder. name: admin_training_overview title: Admin training: Overview username: andrie account: andrie server: colorado.rstudio.com hostUrl: https://colorado.rstudio.com:3939/__api__ appId: 1368 bundleId: 14449 url: https://colorado.rstudio.com:3939/admin_training_overview/ when: 1534319482.42767 Mostly used to help the IDE identify \"re-deploying\" ??? Show the contents of the rsconnect folder Part 2: Upload (How do you get to daycare?) HTTP Requests ??? Discuss the pitfalls of custom SSL certs. Part 3: Restore (What happens at daycare?) Unpacking the bundle --> installing the packages ??? This slide is all about unpacking the bundle and installing packages. Where did the bundle go? The internal architecture of RStudio Connect: ??? Talk about backups and migrations here? Have them navigate to /var/lib/rstudio-connect and run the tree command. Part 3: Restore (What happens at daycare?) Connect installs packages from repositories. Each app has an isolated runtime environment, allowing apps to depend on different versions of packages. App Package version 1 ggplot 0.8.0 2 ggplot 0.1.0 This is ok! But it means Connect can't use a system library, because those can only have 1 version of a package. ??? Main takeaway, RSC has to be able to install the package: Repo access (and what to do offline) System Libraries Part 3: Restore Most common sources of pain: Repository is not available Solution: Set up an offline repository (RStudio Package Manager) Package can not be installed (System Libraries) Solution: Add package to the system library. Good news is the 80:20 rule applies. ??? Main takeaway, RSC has to be able to install the package: * Repo access (and what to do offline) * System Libraries Part 3: Restore (daycare rules are different) RStudio Connect provides process management: sandboxing isolation for apps with tmp directory masking Sandboxing Sandboxing The Connect admin guide on sandboxing : 'The RStudio Connect process runs as the root user. It needs escalated privileges to allow binding to protected ports and to create \"unshare\" environments that contain the R processes.' This is why Connect needs to run as root! Sandboxing: packages After uploading the bundle, Connect must be able to find and install all packages used by your app. Typically Connect will look on CRAN and github for these packages. However, if you use private packages in your app, you have several options: Create an internal, private repository Use external package installation a form of white listing (at your own risk...) Use RStudio Package Manager You cover this in module 7 and 8 of this course \"RunAs\" User Understanding the \"RunAs\" user Connect admins can change the RunAs user for any deployed app. Possible values: Default rstudio-connect user See User Account for Processes Local service account With PAM Authentication, the \"logged-in\" user See Current user execution in the connect admin guide Redeployment Redeployment Re-deployment of apps is substantially faster than the first deployment. The reason is that Connect creates a cache of binary packages. If a package (with matching version) has previously been instaled, then the installation simply retrieves the package from the cache. Hint: You can see installation from cache in the deployment log Define \"collaborator\" Collaborate on application settings Collaborate on code (co-publish) Start by sharing the rsconnect folder ??? Show an example of publishing to content that someone else deployed (just so they can see what the IDE looks like) Content discoverability Content discoverability Content search by title Connect allows you to search for content in several ways. The first is a simple search on content title. Tag schema (taxonomy) The second way of searching for content on Connect is by using a taxonomy, or tag schema, of tags. Creating a tag schema The Connect administrator can: view the \"Tags\" tab in the admin pane create a custom schema the is completely customizable by any Connect administrator Tags: tagging content Content publishers can tag their own content, using the schema that was pre-defined by the admin Searching by tag Content viewers can search content by tag. The normal access control rules apply, i.e. you can only see what you have access to. Vanity URLs Vanity URLs Vanity URLS are useful to maintain a \"static\" URL even if you redeploy the content to a different Connect content ID. With PublishersCanManageVanities set to true administrators and publishers can create vanity URLs. Creating a vanity URL Viewing a vanity URL Other content deployment options Publishing apps with continuous Integration Authentication: machine to machine Jenkins needs a key Environment: Jenkins must create the bundle. Implies Jenkins must replicate the dev environment Testing: #2 sounds like a pain. You can take advantage of your work for a very powerful side effect: Shiny unit testing ( shinytest ) Other resources: * https://solutions.rstudio.com/deploy/methods/ * https://github.com/slopp/rsc-ci-test * https://docs.rstudio.com/connect/admin/appendix/ci/ Publishing apps from git / github You can also deploy artefacts to Connect directly from a git repository (including github) Resources: https://solutions.rstudio.com/deploy/methods/#deploying-from-git-repositories Advanced admin topics Managing Connect in an offline environment Need to set up a package repository that Connect can access: Several ways to do this, including: miniCRAN rsync The recommended option: RStudio Package Manager Backup and migration Backup: SQLite database is backed up automatically Recommend snapshotting the entire Data Directory as well. Migrations: A bit tricker because of all those installed packages that have been cached. Follow the admin guide instructions. Your turn Next complete the exercise. Signs of success: You have connected your IDE to Connect You have published at least one app You understand how to read the deployment log and look for errors","title":"4.5 Using RStudio Connect"},{"location":"rstudio_connect/using_connect/#in-this-session","text":"In this session you: Connect your RStudio IDE to Connect Deploy a simple app Discover some other administrator tools","title":"In this session"},{"location":"rstudio_connect/using_connect/#connecting-the-ide","text":"","title":"Connecting the IDE"},{"location":"rstudio_connect/using_connect/#connecting-your-ide-to-connect","text":"To deploy content from the IDE to Connect, you first have to set up a connection, i.e. tell the IDE where to find Connect. RStudio --> Tools --> Global Options --> Publishing --> Connect Enter your server address: 'http:// /rsconnect' ??? Have them do this now. Talk about what happens and show them the resulting file.","title":"Connecting your IDE to Connect"},{"location":"rstudio_connect/using_connect/#video-connecting-your-ide-to-connect","text":"","title":"Video: Connecting your IDE to Connect"},{"location":"rstudio_connect/using_connect/#pointing-ide-to-connect","text":"What does this do? Creates a public / private key pair and stores the key (and token) in a user-specific folder. Why do this? When you publish content you have a machine talking to another machine. That means you need a non-interactive way to authenticate. HINT: This theme will come up again ??? Run the following as a demo: ## R ## creates a directory rsconnect :: accountsConfigDir () ## sh ## shows a few .dcf files tree <directory> cat <result.dcf>","title":"Pointing IDE to Connect"},{"location":"rstudio_connect/using_connect/#demo","text":"Deploy an app to Connect Navigate to 0_app and open app_0.R Select \"Run App\" In the upper-right hand corner, \"Publish\" ??? Observe how long it takes","title":"Demo"},{"location":"rstudio_connect/using_connect/#that-was-pretty-easy","text":"... make a trivial change in the app and deploy again. Write down your observations. ??? Much faster App failed","title":"That was pretty easy ..."},{"location":"rstudio_connect/using_connect/#understanding-failure","text":"","title":"Understanding failure"},{"location":"rstudio_connect/using_connect/#understanding-failure_1","text":"Deploying content to Connect is like taking a kid from home to daycare. If a problem arises, you must troubleshoot Did the problem happen at home (you forgot it)? Or at daycare (they lost it)? There also are different rules at home and daycare.","title":"Understanding failure"},{"location":"rstudio_connect/using_connect/#explore-some-troubleshooting-tools","text":"Deployment Log Bundles Application Log Connect Sandbox","title":"Explore some troubleshooting tools"},{"location":"rstudio_connect/using_connect/#deployment-log","text":"Preparing to deploy application...DONE Uploading bundle for application: 1 ...DONE Deploying bundle: 1 for application: 1 ... Building Shiny application... Bundle requested R version 3 .4.1 ; using /usr/lib64/R/bin/R which has version 3 .4.1 2017 /12/05 00 :15:36.162805962 # Validating R library read / write permissions ------------ 2017 /12/05 00 :15:36.188861769 # Validating packrat installation -------------------------- 2017 /12/05 00 :15:36.189041620 Installed packrat SHA is: 29b1c491b8f90aab40077d011d0077d81a99d7d4 2017 /12/05 00 :15:36.189180324 Packaged packrat SHA is: 29b1c491b8f90aab40077d011d0077d81a99d7d4 2017 /12/05 00 :15:36.190624677 Packrat is up-to-date. 2017 /12/05 00 :15:36.190776099 R version: 3 .4.1 2017 /12/05 00 :15:36.190838996 packrat version: 0 .4.8.43 2017 /12/05 00 :15:36.191408200 # Validating packrat cache read / write permissions -------- 2017 /12/05 00 :15:36.307287524 Audited package hashes with local packrat installation. 2017 /12/05 00 :15:36.310763166 # Installing required R packages withpackrat::restore()` --- 2017 /12/05 00 :15:36.491569335 Installing BH ( 1 .65.0-1 ) ... 2017 /12/05 00 :15:43.453766543 Caching BH. 2017 /12/05 00 :15:45.498690843 Using cached BH. 2017 /12/05 00 :15:45.645180957 OK ( built source ) 2017 /12/05 00 :15:45.645525390 Installing MASS ( 7 .3-47 ) ... 2017 /12/05 00 :15:53.866638423 Caching MASS. 2017 /12/05 00 :15:53.891269915 Using cached MASS. 2017 /12/05 00 :15:53.892713176 OK ( built source ) 2017 /12/05 00 :15:53.892966963 Installing R6 ( 2 .2.2 ) ... 2017 /12/05 00 :15:55.248487715 Caching R6. 2017 /12/05 00 :15:55.253542270 Using cached R6. 2017 /12/05 00 :15:55.254496893 OK ( built source ) 2017 /12/05 00 :15:55.254752408 Installing RColorBrewer ( 1 .1-2 ) ... 2017 /12/05 00 :15:56.433528568 Caching RColorBrewer. 2017 /12/05 00 :15:56.436468956 Using cached RColorBrewer. 2017 /12/05 00 :15:56.437064457 OK ( built source ) 2017 /12/05 00 :15:56.437335870 Installing Rcpp ( 0 .12.13 ) ...","title":"Deployment log"},{"location":"rstudio_connect/using_connect/#the-deployment-bundle","text":"","title":"The deployment bundle"},{"location":"rstudio_connect/using_connect/#components-of-the-bundle","text":"Part 1: Create Bundle on Client Part 2: Upload Bundle on RSC Part 3: Restore Bundle","title":"Components of the bundle"},{"location":"rstudio_connect/using_connect/#components-of-the-bundle-create-and-upload","text":"Part 1: Create Bundle on Client Preparing to deploy application...DONE Part 2: Upload Bundle on RSC Uploading bundle for application: 1 ...DONE Deploying bundle: 1 for application: 1 ...","title":"Components of the bundle: Create and upload"},{"location":"rstudio_connect/using_connect/#components-of-the-bundle-restore","text":"Part 3: Restore Bundle Bundle requested R version 3 .4.1 ; using /usr/lib64/R/bin/R which has version 3 .4.1 2017 /12/05 00 :15:36.162805962 # Validating R library read / write permissions -------------------------------- 2017 /12/05 00 :15:36.188861769 # Validating packrat installation ---------------------------------------------- 2017 /12/05 00 :15:36.189041620 Installed packrat SHA is: 29b1c491b8f90aab40077d011d0077d81a99d7d4 2017 /12/05 00 :15:36.189180324 Packaged packrat SHA is: 29b1c491b8f90aab40077d011d0077d81a99d7d4 2017 /12/05 00 :15:36.190624677 Packrat is up-to-date. 2017 /12/05 00 :15:36.190776099 R version: 3 .4.1 2017 /12/05 00 :15:36.190838996 packrat version: 0 .4.8.43 2017 /12/05 00 :15:36.191408200 # Validating packrat cache read / write permissions ---------------------------- 2017 /12/05 00 :15:36.307287524 Audited package hashes with local packrat installation. 2017 /12/05 00 :15:36.310763166 # Installing required R packages withpackrat::restore()` --------------------- 2017 /12/05 00 :15:36.491569335 Installing BH ( 1 .65.0-1 ) ... 2017 /12/05 00 :15:43.453766543 Caching BH. 2017 /12/05 00 :15:45.498690843 Using cached BH. 2017 /12/05 00 :15:45.645180957 OK ( built source ) 2017 /12/05 00 :15:45.645525390 Installing MASS ( 7 .3-47 ) ... 2017 /12/05 00 :15:53.866638423 Caching MASS. 2017 /12/05 00 :15:53.891269915 Using cached MASS. 2017 /12/05 00 :15:53.892713176 OK ( built source ) 2017 /12/05 00 :15:53.892966963 Installing R6 ( 2 .2.2 ) ... 2017 /12/05 00 :15:55.248487715 Caching R6. 2017 /12/05 00 :15:55.253542270 Using cached R6. 2017 /12/05 00 :15:55.254496893 OK ( built source ) 2017 /12/05 00 :15:55.254752408 Installing RColorBrewer ( 1 .1-2 ) ... 2017 /12/05 00 :15:56.433528568 Caching RColorBrewer. 2017 /12/05 00 :15:56.436468956 Using cached RColorBrewer. 2017 /12/05 00 :15:56.437064457 OK ( built source ) 2017 /12/05 00 :15:56.437335870 Installing Rcpp ( 0 .12.13 ) ...","title":"Components of the bundle: Restore"},{"location":"rstudio_connect/using_connect/#summary-of-the-bundle","text":"Lots happened during the deployment. First thing is the deployment log in the IDE: What is this bundle thing? Application and bundle Id Version of R requested vs used Packages to install","title":"Summary of the bundle"},{"location":"rstudio_connect/using_connect/#bundle-bundle-id-and-app-id","text":"The bundle id and app id contain useful information. This is the log for a deployment to an app with app id 2 . Notice the bundle id is 5 : Discovering document dependencies... OK Preparing to deploy document...DONE Uploading bundle for document: 2 ...DONE Deploying bundle: 5 for document: 2 ... Building R Markdown document... The app id (2) corresponds to the app id in Connect (2):","title":"Bundle: bundle id and app id"},{"location":"rstudio_connect/using_connect/#redeployment-increments-the-bundle-id","text":"Redeploying the app increments the bundle id (in this case to 6). (The bundle id is unique across the Connect instance) Discovering document dependencies... OK Preparing to deploy document...DONE Uploading bundle for document: 2 ...DONE Deploying bundle: 6 for document: 2 ... Building R Markdown document...","title":"Redeployment increments the bundle id"},{"location":"rstudio_connect/using_connect/#video-viewing-the-bundle-in-connect","text":"","title":"Video: viewing the bundle in Connect"},{"location":"rstudio_connect/using_connect/#viewing-the-bundle-in-connect","text":"You can download the bundle from Connect, and the bundle id corresponds to the information in the deployment log: Notice: Both bundles 2 and 6 appear in Source Versions You can view, download or activate any previous bundle","title":"Viewing the bundle in Connect"},{"location":"rstudio_connect/using_connect/#understanding-whats-in-the-bundle","text":"","title":"Understanding what's in the bundle"},{"location":"rstudio_connect/using_connect/#part-1-bundle-what-are-you-sending-to-daycare","text":"To understand what happened in RStudio, download the bundle from Connect. Find the \"Source versions\" button by expanding the ... pills button Then download the bundle ??? Download the bundle from RSC and show the contents of the packrat.lock file and the manifest.json file. Have them do this and discuss the results.","title":"Part 1: Bundle (What are you sending to daycare?)"},{"location":"rstudio_connect/using_connect/#part-1-bundle-whats-in-the-bundle","text":"packrat.lock manifest.json PackratFormat: 1.4 PackratVersion: 0.4.8.1 RVersion: 3.4.1 Repos: CRAN=https://cran.rstudio.com/ Package: BH Source: CRAN Version: 1.65.0-1 Hash: 95f62be4d6916aae14a310a8b56a6475 application code supporting files (data)","title":"Part 1:  Bundle (what's in the bundle?)"},{"location":"rstudio_connect/using_connect/#part-1-bundle-deployment-record","text":"Deploying content creates a deployment record in the rsconnect folder. name: admin_training_overview title: Admin training: Overview username: andrie account: andrie server: colorado.rstudio.com hostUrl: https://colorado.rstudio.com:3939/__api__ appId: 1368 bundleId: 14449 url: https://colorado.rstudio.com:3939/admin_training_overview/ when: 1534319482.42767 Mostly used to help the IDE identify \"re-deploying\" ??? Show the contents of the rsconnect folder","title":"Part 1: Bundle (deployment record)"},{"location":"rstudio_connect/using_connect/#part-2-upload-how-do-you-get-to-daycare","text":"HTTP Requests ??? Discuss the pitfalls of custom SSL certs.","title":"Part 2: Upload (How do you get to daycare?)"},{"location":"rstudio_connect/using_connect/#part-3-restore-what-happens-at-daycare","text":"Unpacking the bundle --> installing the packages ??? This slide is all about unpacking the bundle and installing packages.","title":"Part 3: Restore (What happens at daycare?)"},{"location":"rstudio_connect/using_connect/#where-did-the-bundle-go","text":"The internal architecture of RStudio Connect: ??? Talk about backups and migrations here? Have them navigate to /var/lib/rstudio-connect and run the tree command.","title":"Where did the bundle go?"},{"location":"rstudio_connect/using_connect/#part-3-restore-what-happens-at-daycare_1","text":"Connect installs packages from repositories. Each app has an isolated runtime environment, allowing apps to depend on different versions of packages. App Package version 1 ggplot 0.8.0 2 ggplot 0.1.0 This is ok! But it means Connect can't use a system library, because those can only have 1 version of a package. ??? Main takeaway, RSC has to be able to install the package: Repo access (and what to do offline) System Libraries","title":"Part 3: Restore (What happens at daycare?)"},{"location":"rstudio_connect/using_connect/#part-3-restore","text":"Most common sources of pain: Repository is not available Solution: Set up an offline repository (RStudio Package Manager) Package can not be installed (System Libraries) Solution: Add package to the system library. Good news is the 80:20 rule applies. ??? Main takeaway, RSC has to be able to install the package: * Repo access (and what to do offline) * System Libraries","title":"Part 3: Restore"},{"location":"rstudio_connect/using_connect/#part-3-restore-daycare-rules-are-different","text":"RStudio Connect provides process management: sandboxing isolation for apps with tmp directory masking","title":"Part 3: Restore (daycare rules are different)"},{"location":"rstudio_connect/using_connect/#sandboxing","text":"","title":"Sandboxing"},{"location":"rstudio_connect/using_connect/#sandboxing_1","text":"The Connect admin guide on sandboxing : 'The RStudio Connect process runs as the root user. It needs escalated privileges to allow binding to protected ports and to create \"unshare\" environments that contain the R processes.' This is why Connect needs to run as root!","title":"Sandboxing"},{"location":"rstudio_connect/using_connect/#sandboxing-packages","text":"After uploading the bundle, Connect must be able to find and install all packages used by your app. Typically Connect will look on CRAN and github for these packages. However, if you use private packages in your app, you have several options: Create an internal, private repository Use external package installation a form of white listing (at your own risk...) Use RStudio Package Manager You cover this in module 7 and 8 of this course","title":"Sandboxing: packages"},{"location":"rstudio_connect/using_connect/#runas-user","text":"","title":"\"RunAs\" User"},{"location":"rstudio_connect/using_connect/#understanding-the-runas-user","text":"Connect admins can change the RunAs user for any deployed app. Possible values: Default rstudio-connect user See User Account for Processes Local service account With PAM Authentication, the \"logged-in\" user See Current user execution in the connect admin guide","title":"Understanding the \"RunAs\" user"},{"location":"rstudio_connect/using_connect/#redeployment","text":"","title":"Redeployment"},{"location":"rstudio_connect/using_connect/#redeployment_1","text":"Re-deployment of apps is substantially faster than the first deployment. The reason is that Connect creates a cache of binary packages. If a package (with matching version) has previously been instaled, then the installation simply retrieves the package from the cache. Hint: You can see installation from cache in the deployment log","title":"Redeployment"},{"location":"rstudio_connect/using_connect/#define-collaborator","text":"Collaborate on application settings Collaborate on code (co-publish) Start by sharing the rsconnect folder ??? Show an example of publishing to content that someone else deployed (just so they can see what the IDE looks like)","title":"Define \"collaborator\""},{"location":"rstudio_connect/using_connect/#content-discoverability","text":"","title":"Content discoverability"},{"location":"rstudio_connect/using_connect/#content-discoverability_1","text":"","title":"Content discoverability"},{"location":"rstudio_connect/using_connect/#content-search-by-title","text":"Connect allows you to search for content in several ways. The first is a simple search on content title.","title":"Content search by title"},{"location":"rstudio_connect/using_connect/#tag-schema-taxonomy","text":"The second way of searching for content on Connect is by using a taxonomy, or tag schema, of tags.","title":"Tag schema (taxonomy)"},{"location":"rstudio_connect/using_connect/#creating-a-tag-schema","text":"The Connect administrator can: view the \"Tags\" tab in the admin pane create a custom schema the is completely customizable by any Connect administrator","title":"Creating a tag schema"},{"location":"rstudio_connect/using_connect/#tags-tagging-content","text":"Content publishers can tag their own content, using the schema that was pre-defined by the admin","title":"Tags: tagging content"},{"location":"rstudio_connect/using_connect/#searching-by-tag","text":"Content viewers can search content by tag. The normal access control rules apply, i.e. you can only see what you have access to.","title":"Searching by tag"},{"location":"rstudio_connect/using_connect/#vanity-urls","text":"","title":"Vanity URLs"},{"location":"rstudio_connect/using_connect/#vanity-urls_1","text":"Vanity URLS are useful to maintain a \"static\" URL even if you redeploy the content to a different Connect content ID. With PublishersCanManageVanities set to true administrators and publishers can create vanity URLs. Creating a vanity URL Viewing a vanity URL","title":"Vanity URLs"},{"location":"rstudio_connect/using_connect/#other-content-deployment-options","text":"","title":"Other content deployment options"},{"location":"rstudio_connect/using_connect/#publishing-apps-with-continuous-integration","text":"Authentication: machine to machine Jenkins needs a key Environment: Jenkins must create the bundle. Implies Jenkins must replicate the dev environment Testing: #2 sounds like a pain. You can take advantage of your work for a very powerful side effect: Shiny unit testing ( shinytest ) Other resources: * https://solutions.rstudio.com/deploy/methods/ * https://github.com/slopp/rsc-ci-test * https://docs.rstudio.com/connect/admin/appendix/ci/","title":"Publishing apps with continuous Integration"},{"location":"rstudio_connect/using_connect/#publishing-apps-from-git-github","text":"You can also deploy artefacts to Connect directly from a git repository (including github) Resources: https://solutions.rstudio.com/deploy/methods/#deploying-from-git-repositories","title":"Publishing apps from git / github"},{"location":"rstudio_connect/using_connect/#advanced-admin-topics","text":"","title":"Advanced admin topics"},{"location":"rstudio_connect/using_connect/#managing-connect-in-an-offline-environment","text":"Need to set up a package repository that Connect can access: Several ways to do this, including: miniCRAN rsync The recommended option: RStudio Package Manager","title":"Managing Connect in an offline environment"},{"location":"rstudio_connect/using_connect/#backup-and-migration","text":"Backup: SQLite database is backed up automatically Recommend snapshotting the entire Data Directory as well. Migrations: A bit tricker because of all those installed packages that have been cached. Follow the admin guide instructions.","title":"Backup and migration"},{"location":"rstudio_connect/using_connect/#your-turn","text":"Next complete the exercise. Signs of success: You have connected your IDE to Connect You have published at least one app You understand how to read the deployment log and look for errors","title":"Your turn"},{"location":"rstudio_package_manager/configure_rspm/","text":"Session overview In this session, you will: Configure RSPM Use the RSPM command line interface (CLI) Course outline Workflow for using RStudio Package Manager: Administrator installs RSPM on a server Administrator performs configuration on RSPM server Administrator creates sources and repositories End users connect to repositories and download packages In this module Configuration overview Administering RSPM via CLI Server management Maintaining RSPM Configuration overview Configuration options Consider how your RSPM instance will function: Configured via RSPM CLI: Initial CRAN metadata sync Package sources (CRAN, CRAN subset, Git, Local) Repositories (per your organizations needs) Download / update airgapped packages Configured via RSPM configuration file: Lazy or eager package downloads Connectivity via HTTP/HTTPS Network ports Disk storage locations Database settings Security settings Configuration file Contents of /etc/rstudio-pm/rstudio-pm.gcfg : ; RStudio Package Manager configuration file [Server] ; Address is a public URL for this RStudio Package Manager server. Address = https://rstudio-pm.company.com ; ; Git sources require a configured R installation RVersion = /opt/R/3.5.1 [HTTP] ; RStudio Package Manager will listen on this network address for HTTP connections. Listen = :80 All of the RSPM settings are documented in the Appendix on Configuration Options . Starting, stopping and restarting Starting, stopping and restarting Occasionally it is necessary to start and stop the RStudio Package Manager service. Stopping and starting is handled by systemd or Upstart . For Ubuntu 16.04/18.04, RHEL/CentOS 7, SUSE 12: sudo systemctl stop rstudio-pm sudo systemctl start rstudio-pm or just: sudo systemctl restart rstudio-pm After a restart, any scheduled syncs that were missed during downtime will automatically begin. More details on stopping and starting RSPM are provided in the documentation on Server Management - Stopping and Starting . Maintaining RSPM Upgrading Upgrading RStudio Package Manager requires limited downtime. During an upgrade users will not be able to install packages. It is recommended that you perform upgrades during a period of downtime. Steps for the upgrade process: Download the latest installer Run the install command Upgrading does not affect packages or other variable data. More details on upgrades are provided in the documentation on Server Management - Upgrading . Backing up It is recommended that you back up the following locations: Folder Contents /var/lib/rstudio-pm Packages and variable data /etc/rstudio-pm Configuration A running RStudio Package Manager server may be writing into the data directory. You should stop the RStudio Package Manager server before taking a backup. If you have configured the databases to be stored outside the data directory, ensure that it is also included in the backup and that it is performed at the same time as the file backup. More details on backups are provided in the documentation on Server Management - Backups . Logs You can find logs at: Server logs: /var/log/rstudio-pm.log Access logs: /var/log/rstudio-pm.access.log In addition, the activity log is available in the web interface: Find more information in the RSPM admin guide: Server Logs , Access Logs , and Repository Versioning . Licensing View license status: sudo /opt/rstudio-pm/bin/license-manager status Activate license: sudo /opt/rstudio-pm/bin/license-manager activate LICENSE_KEY List of available commands: sudo /opt/rstudio-pm/bin/license-manager Supported commands: acquire-lease, acquire-lease-verbose, activate, activate-offline, activate-offline-request, begin-evaluation-offline, ... More details on licensing are provided in the documentation on Licensing . High availability and load balancing Multiple instances of RStudio Package Manager can share the same data in highly available (HA) and load-balanced configurations. External database Shared file storage for packages More details on high availability are provided in the documentation on High Availability and Load Balancing : HA checklist HA time synchronization requirements Node management Database requirements Shared data directory requirements Updating HA nodes Reminder about RSPM command line To use the RSPM command line interface: rspm Usage: rspm [flags] rspm [command] Available Commands: add Command to add packages to sources air-gap Command to print help for setting up an air-gapped RStudio Package Manager service archive Command to archive packages in sources ... Flags: -c, --config string Path to config file -h, --help help for rspm -v, --verbose Provide additional output Use \"rspm [command] --help\" for more information about a command. Your turn Next complete the exercise. Signs of success: * You know how to use the RSPM CLI * You understand the different administrative tasks in RSPM * You can run diagnostics!","title":"6.3 Configuring RStudio Package Manager"},{"location":"rstudio_package_manager/configure_rspm/#session-overview","text":"In this session, you will: Configure RSPM Use the RSPM command line interface (CLI)","title":"Session overview"},{"location":"rstudio_package_manager/configure_rspm/#course-outline","text":"Workflow for using RStudio Package Manager: Administrator installs RSPM on a server Administrator performs configuration on RSPM server Administrator creates sources and repositories End users connect to repositories and download packages","title":"Course outline"},{"location":"rstudio_package_manager/configure_rspm/#in-this-module","text":"Configuration overview Administering RSPM via CLI Server management Maintaining RSPM","title":"In this module"},{"location":"rstudio_package_manager/configure_rspm/#configuration-overview","text":"","title":"Configuration overview"},{"location":"rstudio_package_manager/configure_rspm/#configuration-options","text":"Consider how your RSPM instance will function: Configured via RSPM CLI: Initial CRAN metadata sync Package sources (CRAN, CRAN subset, Git, Local) Repositories (per your organizations needs) Download / update airgapped packages Configured via RSPM configuration file: Lazy or eager package downloads Connectivity via HTTP/HTTPS Network ports Disk storage locations Database settings Security settings","title":"Configuration options"},{"location":"rstudio_package_manager/configure_rspm/#configuration-file","text":"Contents of /etc/rstudio-pm/rstudio-pm.gcfg : ; RStudio Package Manager configuration file [Server] ; Address is a public URL for this RStudio Package Manager server. Address = https://rstudio-pm.company.com ; ; Git sources require a configured R installation RVersion = /opt/R/3.5.1 [HTTP] ; RStudio Package Manager will listen on this network address for HTTP connections. Listen = :80 All of the RSPM settings are documented in the Appendix on Configuration Options .","title":"Configuration file"},{"location":"rstudio_package_manager/configure_rspm/#starting-stopping-and-restarting","text":"","title":"Starting, stopping and restarting"},{"location":"rstudio_package_manager/configure_rspm/#starting-stopping-and-restarting_1","text":"Occasionally it is necessary to start and stop the RStudio Package Manager service. Stopping and starting is handled by systemd or Upstart . For Ubuntu 16.04/18.04, RHEL/CentOS 7, SUSE 12: sudo systemctl stop rstudio-pm sudo systemctl start rstudio-pm or just: sudo systemctl restart rstudio-pm After a restart, any scheduled syncs that were missed during downtime will automatically begin. More details on stopping and starting RSPM are provided in the documentation on Server Management - Stopping and Starting .","title":"Starting, stopping and restarting"},{"location":"rstudio_package_manager/configure_rspm/#maintaining-rspm","text":"","title":"Maintaining RSPM"},{"location":"rstudio_package_manager/configure_rspm/#upgrading","text":"Upgrading RStudio Package Manager requires limited downtime. During an upgrade users will not be able to install packages. It is recommended that you perform upgrades during a period of downtime. Steps for the upgrade process: Download the latest installer Run the install command Upgrading does not affect packages or other variable data. More details on upgrades are provided in the documentation on Server Management - Upgrading .","title":"Upgrading"},{"location":"rstudio_package_manager/configure_rspm/#backing-up","text":"It is recommended that you back up the following locations: Folder Contents /var/lib/rstudio-pm Packages and variable data /etc/rstudio-pm Configuration A running RStudio Package Manager server may be writing into the data directory. You should stop the RStudio Package Manager server before taking a backup. If you have configured the databases to be stored outside the data directory, ensure that it is also included in the backup and that it is performed at the same time as the file backup. More details on backups are provided in the documentation on Server Management - Backups .","title":"Backing up"},{"location":"rstudio_package_manager/configure_rspm/#logs","text":"You can find logs at: Server logs: /var/log/rstudio-pm.log Access logs: /var/log/rstudio-pm.access.log In addition, the activity log is available in the web interface: Find more information in the RSPM admin guide: Server Logs , Access Logs , and Repository Versioning .","title":"Logs"},{"location":"rstudio_package_manager/configure_rspm/#licensing","text":"View license status: sudo /opt/rstudio-pm/bin/license-manager status Activate license: sudo /opt/rstudio-pm/bin/license-manager activate LICENSE_KEY List of available commands: sudo /opt/rstudio-pm/bin/license-manager Supported commands: acquire-lease, acquire-lease-verbose, activate, activate-offline, activate-offline-request, begin-evaluation-offline, ... More details on licensing are provided in the documentation on Licensing .","title":"Licensing"},{"location":"rstudio_package_manager/configure_rspm/#high-availability-and-load-balancing","text":"Multiple instances of RStudio Package Manager can share the same data in highly available (HA) and load-balanced configurations. External database Shared file storage for packages More details on high availability are provided in the documentation on High Availability and Load Balancing : HA checklist HA time synchronization requirements Node management Database requirements Shared data directory requirements Updating HA nodes","title":"High availability and load balancing"},{"location":"rstudio_package_manager/configure_rspm/#reminder-about-rspm-command-line","text":"To use the RSPM command line interface: rspm Usage: rspm [flags] rspm [command] Available Commands: add Command to add packages to sources air-gap Command to print help for setting up an air-gapped RStudio Package Manager service archive Command to archive packages in sources ... Flags: -c, --config string Path to config file -h, --help help for rspm -v, --verbose Provide additional output Use \"rspm [command] --help\" for more information about a command.","title":"Reminder about RSPM command line"},{"location":"rstudio_package_manager/configure_rspm/#your-turn","text":"Next complete the exercise. Signs of success: * You know how to use the RSPM CLI * You understand the different administrative tasks in RSPM * You can run diagnostics!","title":"Your turn"},{"location":"rstudio_package_manager/install_rspm/","text":"Session overview In this session, you will: Understand the problems associated with R package management in enterprise environments Learn how RStudio Package Manager (RSPM) solves these problems Install RSPM on a server Introduction The problems of R package management Any R administrator is concerned about distributing R packages to their users. How can I: ensure reproducibility of packages for all of my users? centralize package management for R users across teams? serve R packages in an airgapped environment? allow R users not to worry about package versions and availability? see which packages and licenses are in use in the organization? RStudio Package Manager allows you to organize and centralize R packages across your team, department, or entire organization. How does RStudio Package Manager address these problems? How does RStudio Package Manager fit in with other RStudio products? Workflow for using RStudio Package Manager: Administrator installs RSPM on a server Administrator performs configuration on RSPM server Administrator creates sources and repositories End users connect to repositories and download packages Overview In this course, you will set up RStudio Package Manager as a source of R packages, then configure RStudio Server Pro and RStudio Connect as consumers of the packages. RSPM documentation and resources RSPM documentation and resources The source of truth about RStudio Package Manager is the admin guide: https://docs.rstudio.com/rspm/admin In this course, you will walk through hands-on exercises from the Get Started - Installation and Get Started - Configuration sections. The course also touches upon the remaining sections so you know where to go to get the information you need after the course. Use cases Use cases CRAN has more than 13,000 packages and is updated more than 30 times per day. RStudio Package Manager helps: Administrators maintain R servers without breaking code IT centralize packages that meet standards Data scientists reproduce results without worrying about packages Developers share their code as private packages RStudio Package Manager can serve packages from various sources: CRAN Curated CRAN Internal Packages Packages from Git Walkthrough Let's walk though the basic functionality of RStudio Package Manager: https://demo.rstudiopm.com View different repositories Explore package usage statistics Get more details on a specific package in a repository Review steps to configure and install packages from a repository RStudio Package Manager: Organizes packages in a central repository Performs automatic versioning of the entire repository Tracks package usage statistics and metrics Integrates with with R, RStudio Server Pro, and RStudio Connect Data Science with the RStudio toolchain RStudio Package Manager provides a centralized solution for managing R packages for all users within your organization, from development to publishing and deployment. Architecture Architecture RSPM can be used with direct access to CRAN or in air-gapped / offline installations. Requirements System requirements Operating Systems: RHEL / CentOS 6+ and 7+ SUSE 12 SP3+ Ubuntu 14.04, 16.04, 18.04 Memory: Minimum of 2GB of RAM Disk requirements: Recommended 50 GB to 200 GB of disk storage Package sources can be lazily cached from CRAN or eagerly downloaded View more information on Configuration and Sizing Requirements . Other requirements Support for various network setups: Direct online access to https://rspm-sync.rstudio.com Proxied network access to https://rspm-sync.rstudio.com Airgapped / offline systems Root privileges By default, root privileges are required to install, start, stop RSPM and activate license, but there is a Minimal Root Use installation path By default, RSPM creates and runs under a service account, rstudio-pm R version 3.0+ is required if you want to build packages from Git RSPM currently serves R source packages Your turn Next complete the exercise. Signs of success: RStudio Package Manager is up and running!","title":"6.1 Installing RStudio Package Manager"},{"location":"rstudio_package_manager/install_rspm/#session-overview","text":"In this session, you will: Understand the problems associated with R package management in enterprise environments Learn how RStudio Package Manager (RSPM) solves these problems Install RSPM on a server","title":"Session overview"},{"location":"rstudio_package_manager/install_rspm/#introduction","text":"","title":"Introduction"},{"location":"rstudio_package_manager/install_rspm/#the-problems-of-r-package-management","text":"Any R administrator is concerned about distributing R packages to their users. How can I: ensure reproducibility of packages for all of my users? centralize package management for R users across teams? serve R packages in an airgapped environment? allow R users not to worry about package versions and availability? see which packages and licenses are in use in the organization? RStudio Package Manager allows you to organize and centralize R packages across your team, department, or entire organization. How does RStudio Package Manager address these problems? How does RStudio Package Manager fit in with other RStudio products?","title":"The problems of R package management"},{"location":"rstudio_package_manager/install_rspm/#workflow-for-using-rstudio-package-manager","text":"Administrator installs RSPM on a server Administrator performs configuration on RSPM server Administrator creates sources and repositories End users connect to repositories and download packages","title":"Workflow for using RStudio Package Manager:"},{"location":"rstudio_package_manager/install_rspm/#overview","text":"In this course, you will set up RStudio Package Manager as a source of R packages, then configure RStudio Server Pro and RStudio Connect as consumers of the packages.","title":"Overview"},{"location":"rstudio_package_manager/install_rspm/#rspm-documentation-and-resources","text":"","title":"RSPM documentation and resources"},{"location":"rstudio_package_manager/install_rspm/#rspm-documentation-and-resources_1","text":"The source of truth about RStudio Package Manager is the admin guide: https://docs.rstudio.com/rspm/admin In this course, you will walk through hands-on exercises from the Get Started - Installation and Get Started - Configuration sections. The course also touches upon the remaining sections so you know where to go to get the information you need after the course.","title":"RSPM documentation and resources"},{"location":"rstudio_package_manager/install_rspm/#use-cases","text":"","title":"Use cases"},{"location":"rstudio_package_manager/install_rspm/#use-cases_1","text":"CRAN has more than 13,000 packages and is updated more than 30 times per day. RStudio Package Manager helps: Administrators maintain R servers without breaking code IT centralize packages that meet standards Data scientists reproduce results without worrying about packages Developers share their code as private packages RStudio Package Manager can serve packages from various sources: CRAN Curated CRAN Internal Packages Packages from Git","title":"Use cases"},{"location":"rstudio_package_manager/install_rspm/#walkthrough","text":"Let's walk though the basic functionality of RStudio Package Manager: https://demo.rstudiopm.com View different repositories Explore package usage statistics Get more details on a specific package in a repository Review steps to configure and install packages from a repository RStudio Package Manager: Organizes packages in a central repository Performs automatic versioning of the entire repository Tracks package usage statistics and metrics Integrates with with R, RStudio Server Pro, and RStudio Connect","title":"Walkthrough"},{"location":"rstudio_package_manager/install_rspm/#data-science-with-the-rstudio-toolchain","text":"RStudio Package Manager provides a centralized solution for managing R packages for all users within your organization, from development to publishing and deployment.","title":"Data Science with the RStudio toolchain"},{"location":"rstudio_package_manager/install_rspm/#architecture","text":"","title":"Architecture"},{"location":"rstudio_package_manager/install_rspm/#architecture_1","text":"RSPM can be used with direct access to CRAN or in air-gapped / offline installations.","title":"Architecture"},{"location":"rstudio_package_manager/install_rspm/#requirements","text":"","title":"Requirements"},{"location":"rstudio_package_manager/install_rspm/#system-requirements","text":"Operating Systems: RHEL / CentOS 6+ and 7+ SUSE 12 SP3+ Ubuntu 14.04, 16.04, 18.04 Memory: Minimum of 2GB of RAM Disk requirements: Recommended 50 GB to 200 GB of disk storage Package sources can be lazily cached from CRAN or eagerly downloaded View more information on Configuration and Sizing Requirements .","title":"System requirements"},{"location":"rstudio_package_manager/install_rspm/#other-requirements","text":"Support for various network setups: Direct online access to https://rspm-sync.rstudio.com Proxied network access to https://rspm-sync.rstudio.com Airgapped / offline systems Root privileges By default, root privileges are required to install, start, stop RSPM and activate license, but there is a Minimal Root Use installation path By default, RSPM creates and runs under a service account, rstudio-pm R version 3.0+ is required if you want to build packages from Git RSPM currently serves R source packages","title":"Other requirements"},{"location":"rstudio_package_manager/install_rspm/#your-turn","text":"Next complete the exercise. Signs of success: RStudio Package Manager is up and running!","title":"Your turn"},{"location":"rstudio_package_manager/lab_configure_rspm/","text":"Overview In the following exercises, you will: Configure the RSPM CLI Tour the RSPM CLI commands Run diagnostics on RSPM Refer to the RSPM Documentation throughout the exercises, specifically the Try out the CLI section. Task: Configure the RSPM CLI Try out the RSPM CLI Try running the rspm command on the server instance where RSPM is installed: /opt/rstudio-pm/bin/rspm What output do you see? Configuring group memberships and permissions Refer to the Try out the CLI documentation section to add your user to the appropriate group for RSPM. Hint: You can view your current user by typing whoami or echo $USER in the terminal. Hint: You will need to log out and back in for the group membership to take effect. You can verify that the groups are configured correctly by running: /opt/rstudio-pm/bin/rspm which should return a list of available commands. Task: RSPM command alias To save keystrokes when typing RSPM commands, create a command alias for the rspm command: echo \"alias rspm='/opt/rstudio-pm/bin/rspm'\" >> ~/.bashrc Log out and back in for the command alias to take effect. Now, you can type the shorter command alias to invoke RSPM: rspm Tour RSPM CLI commands If you run the rspm command with no arguments, then you'll see a list of available commands: $ rspm Available Commands: add Command to add packages to sources air-gap Command to print help for setting up an air-gapped RStudio Package Manager service archive Command to archive packages in sources clear-cran Command to purge CRAN metadata. Cannot be used if any repos subscribe to CRAN. create Commands to create entities delete Commands to delete entities edit Commands to edit repo name and description fetch Command to initiate eager package fetching help Help about any command import Command to import SSH keys info Command to print information about sources and repos list Commands to list entities. logs Command to retrieve logs for package builds remove Command to remove packages from sources reorder Command to reorder repo subscriptions to sources rerun Command to rerun git-builders run Command to run git-builders subscribe Command to subscribe repos to sources sync Command to initiate an ad-hoc sync of the default cran source unsubscribe Command to unsubscribe repos from sources update Command to update curated-cran sources Try running the following commands and observing the output: rspm list rspm help sync Let's walk through the commands by functional groups. Working with CRAN sync Command to initiate an ad-hoc sync of the default cran source clear-cran Command to purge CRAN metadata. Cannot be used if any repos subscribe to CRAN. Manage repositories and sources create Commands to create entities delete Commands to delete entities list Commands to list entities update Command to update curated-cran sources Manage packages add Command to add packages to sources archive Command to archive packages in sources remove Command to remove packages from sources Working with repositories edit Commands to edit repo name and description reorder Command to reorder repo subscriptions to sources subscribe Command to subscribe repos to sources unsubscribe Command to unsubscribe repos from sources Utilities air-gap Command to print help for setting up an air-gapped RStudio Package Manager service fetch Command to initiate eager package fetching help Help about any command import Command to import SSH keys info Command to print information about sources and repos logs Command to retrieve logs for package builds Git package builders run Command to run git-builders rerun Command to rerun git-builders Quiz: Using the RSPM CLI Which of the following statements is true regarding the RSPM CLI? Each R user needs access to the RSPM CLI to install R packages Only administrators need access to the RSPM CLI to manage repositories and sources Answer: Only administrators need access to the RSPM CLI to manage repositories and sources The RSPM CLI tool can be used to add which types of repositories? Repositories that serve CRAN packages Repositories that serve curated CRAN packages Repositories that serve both CRAN packages and private R packages The RSPM CLI can be used to add any of the above repositories Answer: The RSPM CLI can be used to add any of the above repositories Task: Run diagnostics on RSPM There are various methods to check the health of your RSPM instance. View the RSPM application logs: sudo cat /var/log/rstudio-pm.log View the RSPM access logs: sudo cat /var/log/rstudio-pm.access.log Check the status of your RSPM license: sudo /opt/rstudio-pm/bin/license-manager status Run RSPM diagnostics: sudo /opt/rstudio-pm/bin/run-diagnostics View diagnostics output: cat rspm_diagnostics-report.txt","title":"6.4 Lab:  Configuring RStudio Package Manager"},{"location":"rstudio_package_manager/lab_configure_rspm/#overview","text":"In the following exercises, you will: Configure the RSPM CLI Tour the RSPM CLI commands Run diagnostics on RSPM Refer to the RSPM Documentation throughout the exercises, specifically the Try out the CLI section.","title":"Overview"},{"location":"rstudio_package_manager/lab_configure_rspm/#task-configure-the-rspm-cli","text":"","title":"Task: Configure the RSPM CLI"},{"location":"rstudio_package_manager/lab_configure_rspm/#try-out-the-rspm-cli","text":"Try running the rspm command on the server instance where RSPM is installed: /opt/rstudio-pm/bin/rspm What output do you see?","title":"Try out the RSPM CLI"},{"location":"rstudio_package_manager/lab_configure_rspm/#configuring-group-memberships-and-permissions","text":"Refer to the Try out the CLI documentation section to add your user to the appropriate group for RSPM. Hint: You can view your current user by typing whoami or echo $USER in the terminal. Hint: You will need to log out and back in for the group membership to take effect. You can verify that the groups are configured correctly by running: /opt/rstudio-pm/bin/rspm which should return a list of available commands.","title":"Configuring group memberships and permissions"},{"location":"rstudio_package_manager/lab_configure_rspm/#task-rspm-command-alias","text":"To save keystrokes when typing RSPM commands, create a command alias for the rspm command: echo \"alias rspm='/opt/rstudio-pm/bin/rspm'\" >> ~/.bashrc Log out and back in for the command alias to take effect. Now, you can type the shorter command alias to invoke RSPM: rspm","title":"Task: RSPM command alias"},{"location":"rstudio_package_manager/lab_configure_rspm/#tour-rspm-cli-commands","text":"If you run the rspm command with no arguments, then you'll see a list of available commands: $ rspm Available Commands: add Command to add packages to sources air-gap Command to print help for setting up an air-gapped RStudio Package Manager service archive Command to archive packages in sources clear-cran Command to purge CRAN metadata. Cannot be used if any repos subscribe to CRAN. create Commands to create entities delete Commands to delete entities edit Commands to edit repo name and description fetch Command to initiate eager package fetching help Help about any command import Command to import SSH keys info Command to print information about sources and repos list Commands to list entities. logs Command to retrieve logs for package builds remove Command to remove packages from sources reorder Command to reorder repo subscriptions to sources rerun Command to rerun git-builders run Command to run git-builders subscribe Command to subscribe repos to sources sync Command to initiate an ad-hoc sync of the default cran source unsubscribe Command to unsubscribe repos from sources update Command to update curated-cran sources Try running the following commands and observing the output: rspm list rspm help sync Let's walk through the commands by functional groups.","title":"Tour RSPM CLI commands"},{"location":"rstudio_package_manager/lab_configure_rspm/#working-with-cran","text":"sync Command to initiate an ad-hoc sync of the default cran source clear-cran Command to purge CRAN metadata. Cannot be used if any repos subscribe to CRAN.","title":"Working with CRAN"},{"location":"rstudio_package_manager/lab_configure_rspm/#manage-repositories-and-sources","text":"create Commands to create entities delete Commands to delete entities list Commands to list entities update Command to update curated-cran sources","title":"Manage repositories and sources"},{"location":"rstudio_package_manager/lab_configure_rspm/#manage-packages","text":"add Command to add packages to sources archive Command to archive packages in sources remove Command to remove packages from sources","title":"Manage packages"},{"location":"rstudio_package_manager/lab_configure_rspm/#working-with-repositories","text":"edit Commands to edit repo name and description reorder Command to reorder repo subscriptions to sources subscribe Command to subscribe repos to sources unsubscribe Command to unsubscribe repos from sources","title":"Working with repositories"},{"location":"rstudio_package_manager/lab_configure_rspm/#utilities","text":"air-gap Command to print help for setting up an air-gapped RStudio Package Manager service fetch Command to initiate eager package fetching help Help about any command import Command to import SSH keys info Command to print information about sources and repos logs Command to retrieve logs for package builds","title":"Utilities"},{"location":"rstudio_package_manager/lab_configure_rspm/#git-package-builders","text":"run Command to run git-builders rerun Command to rerun git-builders","title":"Git package builders"},{"location":"rstudio_package_manager/lab_configure_rspm/#quiz-using-the-rspm-cli","text":"Which of the following statements is true regarding the RSPM CLI? Each R user needs access to the RSPM CLI to install R packages Only administrators need access to the RSPM CLI to manage repositories and sources Answer: Only administrators need access to the RSPM CLI to manage repositories and sources The RSPM CLI tool can be used to add which types of repositories? Repositories that serve CRAN packages Repositories that serve curated CRAN packages Repositories that serve both CRAN packages and private R packages The RSPM CLI can be used to add any of the above repositories Answer: The RSPM CLI can be used to add any of the above repositories","title":"Quiz: Using the RSPM CLI"},{"location":"rstudio_package_manager/lab_configure_rspm/#task-run-diagnostics-on-rspm","text":"There are various methods to check the health of your RSPM instance. View the RSPM application logs: sudo cat /var/log/rstudio-pm.log View the RSPM access logs: sudo cat /var/log/rstudio-pm.access.log Check the status of your RSPM license: sudo /opt/rstudio-pm/bin/license-manager status Run RSPM diagnostics: sudo /opt/rstudio-pm/bin/run-diagnostics View diagnostics output: cat rspm_diagnostics-report.txt","title":"Task: Run diagnostics on RSPM"},{"location":"rstudio_package_manager/lab_install_rspm/","text":"Overview In this exercise, you: Install RStudio Package Manager Test the installation Run diagnostics Refer to the RSPM Documentation throughout the exercises, specifically the Getting Started - Installation section. Quiz: System requirements Refer to the RStudio Package Manager documentation on installation pre-requisites , then answer the following questions: Supported operating systems What operating systems are supported for RStudio Package Manager? Windows Server 2018 SUSE Linux Ubuntu Linux Debian Linux Fedora Linux Red Hat Linux CentOS Linux Answer: The correct operating systems are: Suse Linux, Ubuntu Linux, Red Hat Linux and CentOS R requirements and version What are the requirements for an installed version of R? A - RSPM will not serve packages without a valid installation of R B - RSPM requires a valid installation of R to build R packages from Git C - RSPM requires the same version of R to be installed to match the version of the end users Answer: B - RSPM requires a valid installation of R to build R packages from Git What is the minimum R version that is supported on RSPM? R-3.0.0 R-3.1.0 R-3.2.0 R-3.3.0 R-3.4.0 R-3.5.0 Answer: R-3.0.0 Quiz: Server instance Operating system Before you start the installation on the server, you should note the operating system that you are using. Hint: Run the following command on your server instance: lsb_release -a What operating system are you using on the training server? Ubuntu Linux 18.04 Red Hat Enterprise Linux 7.5 SUSE Linux Enterprise 12 Answer: The training server is using Ubuntu Linux. Task: Install RStudio Package Manager Perform the following tasks on your course instance: Navigate to the RStudio Package Manager download page On your server instance, follow the documented steps to install RStudio Package Manager: Install the required dependency Download the RStudio Package Manager installer Install RStudio Package Manager In the following exercise, you will test RSPM and ensure that it is installed correctly. Task: Test the RSPM installation How to know that RSPM installed successfully? Check the status of the RSPM service: sudo systemctl status rstudio-pm Test the connection to the RSPM web interface by running the following command from your server instance: curl localhost:4242/client/ Note: This is helpful to verify prior to the following step in the event that you have network connectivity or firewall issues. Connect to the RSPM web interface in your browser by visiting the following URL: http:// { IP-ADDRESS } :4242 Note You can connect to RSPM using the IP address or DNS name. Note: There are no repositories configured by default, so it is normal to see a message that states there are No Repos Defined . We've also configured an optional proxy / landing page, which you can connect in your browser by visiting the following URL: http:// { IP-ADDRESS } Then, to view the RSPM web interface, click on the RStudio Package Manager link, or visit http://{IP-ADDRESS}/packages/ directly.","title":"6.2 Lab:  Installing RStudio Package Manager"},{"location":"rstudio_package_manager/lab_install_rspm/#overview","text":"In this exercise, you: Install RStudio Package Manager Test the installation Run diagnostics Refer to the RSPM Documentation throughout the exercises, specifically the Getting Started - Installation section.","title":"Overview"},{"location":"rstudio_package_manager/lab_install_rspm/#quiz-system-requirements","text":"Refer to the RStudio Package Manager documentation on installation pre-requisites , then answer the following questions:","title":"Quiz: System requirements"},{"location":"rstudio_package_manager/lab_install_rspm/#supported-operating-systems","text":"What operating systems are supported for RStudio Package Manager? Windows Server 2018 SUSE Linux Ubuntu Linux Debian Linux Fedora Linux Red Hat Linux CentOS Linux Answer: The correct operating systems are: Suse Linux, Ubuntu Linux, Red Hat Linux and CentOS","title":"Supported operating systems"},{"location":"rstudio_package_manager/lab_install_rspm/#r-requirements-and-version","text":"What are the requirements for an installed version of R? A - RSPM will not serve packages without a valid installation of R B - RSPM requires a valid installation of R to build R packages from Git C - RSPM requires the same version of R to be installed to match the version of the end users Answer: B - RSPM requires a valid installation of R to build R packages from Git What is the minimum R version that is supported on RSPM? R-3.0.0 R-3.1.0 R-3.2.0 R-3.3.0 R-3.4.0 R-3.5.0 Answer: R-3.0.0","title":"R requirements and version"},{"location":"rstudio_package_manager/lab_install_rspm/#quiz-server-instance","text":"","title":"Quiz: Server instance"},{"location":"rstudio_package_manager/lab_install_rspm/#operating-system","text":"Before you start the installation on the server, you should note the operating system that you are using. Hint: Run the following command on your server instance: lsb_release -a What operating system are you using on the training server? Ubuntu Linux 18.04 Red Hat Enterprise Linux 7.5 SUSE Linux Enterprise 12 Answer: The training server is using Ubuntu Linux.","title":"Operating system"},{"location":"rstudio_package_manager/lab_install_rspm/#task-install-rstudio-package-manager","text":"Perform the following tasks on your course instance: Navigate to the RStudio Package Manager download page On your server instance, follow the documented steps to install RStudio Package Manager: Install the required dependency Download the RStudio Package Manager installer Install RStudio Package Manager In the following exercise, you will test RSPM and ensure that it is installed correctly.","title":"Task: Install RStudio Package Manager"},{"location":"rstudio_package_manager/lab_install_rspm/#task-test-the-rspm-installation","text":"How to know that RSPM installed successfully? Check the status of the RSPM service: sudo systemctl status rstudio-pm Test the connection to the RSPM web interface by running the following command from your server instance: curl localhost:4242/client/ Note: This is helpful to verify prior to the following step in the event that you have network connectivity or firewall issues. Connect to the RSPM web interface in your browser by visiting the following URL: http:// { IP-ADDRESS } :4242 Note You can connect to RSPM using the IP address or DNS name. Note: There are no repositories configured by default, so it is normal to see a message that states there are No Repos Defined . We've also configured an optional proxy / landing page, which you can connect in your browser by visiting the following URL: http:// { IP-ADDRESS } Then, to view the RSPM web interface, click on the RStudio Package Manager link, or visit http://{IP-ADDRESS}/packages/ directly.","title":"Task: Test the RSPM installation"},{"location":"rstudio_server_pro/install_rsp/","text":"In this session You have already installed R from pre-compiled binaries. In this session you: Review the RStudio Server Pro installation checklist Install RStudio Server Pro Discuss architecture and some best practices General requirements Configuration and sizing recommendations The support article Configuration and sizing recommendations provides some guidelines on recommended server sizes. The answer is it depends, but in summary: Product Minimum (CPU / Memory) Recommended (CPU / Memory) RStudio Server Pro 2 core / 4G 4 - 16 core / 8G - 256G RStudio Connect 2 core / 4G 8 - 16 core / 32G - 128G Shiny Server Pro 2 core / 4G 4 - 8 core / 4G - 64G RStudio Package Manager 2 core / 2G (RAM) / 50 G (Disk) 2 core / 2 G (RAM) / 200 G (Disk) Your mileage may vary! General product requirements To install RStudio Server Pro you need: Root privileges for installing and running Access to the R programming language (we recommend installing from pre-compiled binaries ) Access to an R package repository, e.g. CRAN Configuration for a user authentication scheme , e.g LDAP or PAM Support article: General product requirements Installation Installation checklist Please read the support article: RStudio Server Pro Installation and Configuration - Example Checklist You can also refer to the Requirements section of the RStudio product documentation . Installing R from pre-compiled binaries One more thing: installing R Note You have already installed R in the previous exercise, but it's worth repeating the point. We strongly recommend you install R from pre-compiled binaries to get multiple R versions side-by-side Why? Building Additional Versions from Source RStudio recommends keeping multiple versions for a deploy-and-forget mindset (or at least less line-in-the-sand upgrade scenarios) Your turn Next complete the exercise. Signs of success: You have installed RStudio Server Pro RStudio Server Pro is running","title":"3.1 Install RStudio Server Pro"},{"location":"rstudio_server_pro/install_rsp/#in-this-session","text":"You have already installed R from pre-compiled binaries. In this session you: Review the RStudio Server Pro installation checklist Install RStudio Server Pro Discuss architecture and some best practices","title":"In this session"},{"location":"rstudio_server_pro/install_rsp/#general-requirements","text":"","title":"General requirements"},{"location":"rstudio_server_pro/install_rsp/#configuration-and-sizing-recommendations","text":"The support article Configuration and sizing recommendations provides some guidelines on recommended server sizes. The answer is it depends, but in summary: Product Minimum (CPU / Memory) Recommended (CPU / Memory) RStudio Server Pro 2 core / 4G 4 - 16 core / 8G - 256G RStudio Connect 2 core / 4G 8 - 16 core / 32G - 128G Shiny Server Pro 2 core / 4G 4 - 8 core / 4G - 64G RStudio Package Manager 2 core / 2G (RAM) / 50 G (Disk) 2 core / 2 G (RAM) / 200 G (Disk) Your mileage may vary!","title":"Configuration and sizing recommendations"},{"location":"rstudio_server_pro/install_rsp/#general-product-requirements","text":"To install RStudio Server Pro you need: Root privileges for installing and running Access to the R programming language (we recommend installing from pre-compiled binaries ) Access to an R package repository, e.g. CRAN Configuration for a user authentication scheme , e.g LDAP or PAM Support article: General product requirements","title":"General product requirements"},{"location":"rstudio_server_pro/install_rsp/#installation","text":"","title":"Installation"},{"location":"rstudio_server_pro/install_rsp/#installation-checklist","text":"Please read the support article: RStudio Server Pro Installation and Configuration - Example Checklist You can also refer to the Requirements section of the RStudio product documentation .","title":"Installation checklist"},{"location":"rstudio_server_pro/install_rsp/#installing-r-from-pre-compiled-binaries","text":"","title":"Installing R from pre-compiled binaries"},{"location":"rstudio_server_pro/install_rsp/#one-more-thing-installing-r","text":"Note You have already installed R in the previous exercise, but it's worth repeating the point. We strongly recommend you install R from pre-compiled binaries to get multiple R versions side-by-side Why? Building Additional Versions from Source RStudio recommends keeping multiple versions for a deploy-and-forget mindset (or at least less line-in-the-sand upgrade scenarios)","title":"One more thing: installing R"},{"location":"rstudio_server_pro/install_rsp/#your-turn","text":"Next complete the exercise. Signs of success: You have installed RStudio Server Pro RStudio Server Pro is running","title":"Your turn"},{"location":"rstudio_server_pro/lab_install_rsp/","text":"Review General product documentation Please take a moment to review the RStudio product documentation page: Please bookmark this page - you will refer to this frequently during the course. Notice that the documentation page is organized in a logical flow for each product: Requirements Evaluation Installation Configuration https://docs.rstudio.com RStudio server requirements Take a look at the support documents: General product requirements RStudio Server Pro Installation and Configuration - Example Checklist Task: Install RStudio Server Pro Confirm your OS Quiz: Which operating system? You must download RStudio Server Pro for the correct operating system. What OS are you using in this classroom virtual machine? lsb_release -a Answer: Ubuntu Linux Bonus points for getting the version, 18.04! Optional: Add R to your path Since you previously installed R from pre-compiled binaries, R is not automatically on your PATH. To add R to your path, you can use: export PATH = $PATH :/opt/R/3.6.0/bin Note that this is not permanent, since this exported setting will be lost if the machine restarts. Perform the installation For production use, RStudio strongly recommends you use the supported version of RStudio Server Pro. You can find the installation instructions in the documentation page at https://docs.rstudio.com/rsp/installation/ (The instructions in this exercise are based on this.) Alert Make sure you select the instructions for the correct operating system! Run the download and install script on that page. Hint Remember to use /usr/local/src as the download destination cd /usr/local/src sudo apt-get install gdebi-core curl -O https://download2.rstudio.org/server/trusty/amd64/rstudio-server-pro-1.2.5042-1-amd64.deb sudo gdebi rstudio-server-pro-1.2.5042-1-amd64.deb The process should be similar to this screen cast: Take stock Failure !!?? If you get the following error message: Jan 10 20 :01:45 ip-10-8-8-27 systemd [ 1 ] : Starting RStudio Server... Jan 10 20 :01:45 ip-10-8-8-27 systemd [ 1 ] : Started RStudio Server. Jan 10 20 :01:45 ip-10-8-8-27 rserver [ 26277 ] : ERROR Unable to find an installation of R on the system ( which R did not return v.cpp:531 Jan 10 20 :01:45 ip-10-8-8-27 systemd [ 1 ] : rstudio-server.service: Main process exited, code = exited, status = 1 /FAILURE Jan 10 20 :01:45 ip-10-8-8-27 systemd [ 1 ] : rstudio-server.service: Failed with result 'exit-code' . It means you installed the open source version of RStudio Server. To fix this, you should: Ensure you download the RStudio Server Pro Follow the installation instructions You can safely install RStudio Server Pro on top of the open source RStudio Server. Specifically, you don't have to remove any installation folders or files. Success!! How to know you were successful? If the final few lines of output from the install script looks similar to this, you have been successful. \u25cf rstudio-server.service - RStudio Server Loaded: loaded (/etc/systemd/system/rstudio-server.service; enabled; vendor preset: enabled) Active: active (running) since Thu 2019-01-10 20:12:30 UTC; 1s ago Process: 27029 ExecStart=/usr/lib/rstudio-server/bin/rserver (code=exited, status=0/SUCCESS) You are looking for the words active (running) in the output, quite near the top. Note that there might also be other process information in the output - just look for active (running) . Task: Log in to RStudio Server Remember the original login page ( https://rstd.io/class )? Click on the URL link to take you to your own Getting Started page. From here, click on the link for RStudio Server Pro. Then, on the sign-in page, sign in with the classroom credentials: This should log you into RStudio Server Pro. Note Your browser might issue a warning since it is generally unsafe to use an unencrypted HTTP connection when a password has to be provided. Reference Verifying the installation You have now completed this part of the exercise, but here are some additional references to getting system status, as well as stopping and starting the server. Running the verify installation command: sudo rstudio-server stop sudo rstudio-server verify-installation sudo rstudio-server start Remember to prefix these commands with sudo if you're not the root user. Otherwise you may get permissions errors. Checking server status To restart the RSP service and check its status, run these commands (with sudo if necessary): sudo rstudio-server restart sudo rstudio-server status Don't worry if you get the message rsession: no process found when you run rstudio-server restart : it's standard in the RSP world. Note that you can expect to see a lot of service-related output, in addition to the actual server status. The important part is to see active (running) near the top of the output from rstudio-server status . For example, the following output indicates a healthy running server. admin-user@ip-10-8-8-193:/usr/local/src$ rstudio-server status \u25cf rstudio-server.service - RStudio Server Loaded: loaded ( /etc/systemd/system/rstudio-server.service ; enabled ; vendor preset: enabled ) Active: active ( running ) since Thu 2019 -09-05 20 :14:29 UTC ; 10s ago Process: 8922 ExecStop = /usr/bin/killall -TERM rserver ( code = exited, status = 0 /SUCCESS ) Process: 8962 ExecStart = /usr/lib/rstudio-server/bin/rserver ( code = exited, status = 0 /SUCCESS ) Main PID: 8963 ( rserver ) Tasks: 10 ( limit: 4633 ) CGroup: /system.slice/rstudio-server.service \u251c\u25008963 /usr/lib/rstudio-server/bin/rserver \u251c\u25009045 /usr/lib/rstudio-server/bin/rserver-monitor --monitor-domain-socket /tmp/rstudio-rserver/rserver-monitor.socket -- \u251c\u25009046 nginx: master process /usr/lib/rstudio-server/bin/rserver-http \u251c\u25009048 nginx: worker process \u251c\u25009049 /bin/sh -c \"/usr/bin/rrdtool\" \"-\" \u2514\u25009050 /usr/bin/rrdtool - Access the error logs And, for reference, the locations of the various server log files: ls /var/log/rstudio-server tail /var/log/rstudio-server/rserver-http-error.log The server log is at: tail /var/lib/rstudio-server/monitor/log/rstudio-server.log Note These error logs may be empty if no authentication error events have occurred, e.g. when you have no users, or all login attempts were successful. For more information, refer to Troubleshooting problems in the admin guide.","title":"Lab:  Install RStudio Server Pro"},{"location":"rstudio_server_pro/lab_install_rsp/#review","text":"","title":"Review"},{"location":"rstudio_server_pro/lab_install_rsp/#general-product-documentation","text":"Please take a moment to review the RStudio product documentation page: Please bookmark this page - you will refer to this frequently during the course. Notice that the documentation page is organized in a logical flow for each product: Requirements Evaluation Installation Configuration https://docs.rstudio.com","title":"General product documentation"},{"location":"rstudio_server_pro/lab_install_rsp/#rstudio-server-requirements","text":"Take a look at the support documents: General product requirements RStudio Server Pro Installation and Configuration - Example Checklist","title":"RStudio server requirements"},{"location":"rstudio_server_pro/lab_install_rsp/#task-install-rstudio-server-pro","text":"","title":"Task: Install RStudio Server Pro"},{"location":"rstudio_server_pro/lab_install_rsp/#confirm-your-os","text":"Quiz: Which operating system? You must download RStudio Server Pro for the correct operating system. What OS are you using in this classroom virtual machine? lsb_release -a Answer: Ubuntu Linux Bonus points for getting the version, 18.04!","title":"Confirm your OS"},{"location":"rstudio_server_pro/lab_install_rsp/#optional-add-r-to-your-path","text":"Since you previously installed R from pre-compiled binaries, R is not automatically on your PATH. To add R to your path, you can use: export PATH = $PATH :/opt/R/3.6.0/bin Note that this is not permanent, since this exported setting will be lost if the machine restarts.","title":"Optional: Add R to  your path"},{"location":"rstudio_server_pro/lab_install_rsp/#perform-the-installation","text":"For production use, RStudio strongly recommends you use the supported version of RStudio Server Pro. You can find the installation instructions in the documentation page at https://docs.rstudio.com/rsp/installation/ (The instructions in this exercise are based on this.) Alert Make sure you select the instructions for the correct operating system! Run the download and install script on that page. Hint Remember to use /usr/local/src as the download destination cd /usr/local/src sudo apt-get install gdebi-core curl -O https://download2.rstudio.org/server/trusty/amd64/rstudio-server-pro-1.2.5042-1-amd64.deb sudo gdebi rstudio-server-pro-1.2.5042-1-amd64.deb The process should be similar to this screen cast:","title":"Perform the installation"},{"location":"rstudio_server_pro/lab_install_rsp/#take-stock","text":"","title":"Take stock"},{"location":"rstudio_server_pro/lab_install_rsp/#failure","text":"If you get the following error message: Jan 10 20 :01:45 ip-10-8-8-27 systemd [ 1 ] : Starting RStudio Server... Jan 10 20 :01:45 ip-10-8-8-27 systemd [ 1 ] : Started RStudio Server. Jan 10 20 :01:45 ip-10-8-8-27 rserver [ 26277 ] : ERROR Unable to find an installation of R on the system ( which R did not return v.cpp:531 Jan 10 20 :01:45 ip-10-8-8-27 systemd [ 1 ] : rstudio-server.service: Main process exited, code = exited, status = 1 /FAILURE Jan 10 20 :01:45 ip-10-8-8-27 systemd [ 1 ] : rstudio-server.service: Failed with result 'exit-code' . It means you installed the open source version of RStudio Server. To fix this, you should: Ensure you download the RStudio Server Pro Follow the installation instructions You can safely install RStudio Server Pro on top of the open source RStudio Server. Specifically, you don't have to remove any installation folders or files.","title":"Failure !!??"},{"location":"rstudio_server_pro/lab_install_rsp/#success","text":"How to know you were successful? If the final few lines of output from the install script looks similar to this, you have been successful. \u25cf rstudio-server.service - RStudio Server Loaded: loaded (/etc/systemd/system/rstudio-server.service; enabled; vendor preset: enabled) Active: active (running) since Thu 2019-01-10 20:12:30 UTC; 1s ago Process: 27029 ExecStart=/usr/lib/rstudio-server/bin/rserver (code=exited, status=0/SUCCESS) You are looking for the words active (running) in the output, quite near the top. Note that there might also be other process information in the output - just look for active (running) .","title":"Success!!"},{"location":"rstudio_server_pro/lab_install_rsp/#task-log-in-to-rstudio-server","text":"Remember the original login page ( https://rstd.io/class )? Click on the URL link to take you to your own Getting Started page. From here, click on the link for RStudio Server Pro. Then, on the sign-in page, sign in with the classroom credentials: This should log you into RStudio Server Pro. Note Your browser might issue a warning since it is generally unsafe to use an unencrypted HTTP connection when a password has to be provided.","title":"Task: Log in to RStudio Server"},{"location":"rstudio_server_pro/lab_install_rsp/#reference","text":"","title":"Reference"},{"location":"rstudio_server_pro/lab_install_rsp/#verifying-the-installation","text":"You have now completed this part of the exercise, but here are some additional references to getting system status, as well as stopping and starting the server. Running the verify installation command: sudo rstudio-server stop sudo rstudio-server verify-installation sudo rstudio-server start Remember to prefix these commands with sudo if you're not the root user. Otherwise you may get permissions errors.","title":"Verifying the installation"},{"location":"rstudio_server_pro/lab_install_rsp/#checking-server-status","text":"To restart the RSP service and check its status, run these commands (with sudo if necessary): sudo rstudio-server restart sudo rstudio-server status Don't worry if you get the message rsession: no process found when you run rstudio-server restart : it's standard in the RSP world. Note that you can expect to see a lot of service-related output, in addition to the actual server status. The important part is to see active (running) near the top of the output from rstudio-server status . For example, the following output indicates a healthy running server. admin-user@ip-10-8-8-193:/usr/local/src$ rstudio-server status \u25cf rstudio-server.service - RStudio Server Loaded: loaded ( /etc/systemd/system/rstudio-server.service ; enabled ; vendor preset: enabled ) Active: active ( running ) since Thu 2019 -09-05 20 :14:29 UTC ; 10s ago Process: 8922 ExecStop = /usr/bin/killall -TERM rserver ( code = exited, status = 0 /SUCCESS ) Process: 8962 ExecStart = /usr/lib/rstudio-server/bin/rserver ( code = exited, status = 0 /SUCCESS ) Main PID: 8963 ( rserver ) Tasks: 10 ( limit: 4633 ) CGroup: /system.slice/rstudio-server.service \u251c\u25008963 /usr/lib/rstudio-server/bin/rserver \u251c\u25009045 /usr/lib/rstudio-server/bin/rserver-monitor --monitor-domain-socket /tmp/rstudio-rserver/rserver-monitor.socket -- \u251c\u25009046 nginx: master process /usr/lib/rstudio-server/bin/rserver-http \u251c\u25009048 nginx: worker process \u251c\u25009049 /bin/sh -c \"/usr/bin/rrdtool\" \"-\" \u2514\u25009050 /usr/bin/rrdtool -","title":"Checking server status"},{"location":"rstudio_server_pro/lab_install_rsp/#access-the-error-logs","text":"And, for reference, the locations of the various server log files: ls /var/log/rstudio-server tail /var/log/rstudio-server/rserver-http-error.log The server log is at: tail /var/lib/rstudio-server/monitor/log/rstudio-server.log Note These error logs may be empty if no authentication error events have occurred, e.g. when you have no users, or all login attempts were successful. For more information, refer to Troubleshooting problems in the admin guide.","title":"Access the error logs"},{"location":"rstudio_server_pro/lab_security/","text":"Introduction Imagine that you are in an organization that standardized authentication using the LDAP protocol and openLDAP. In this exercise, we have provided the LDAP server for you. Your task is to configure RStudio Server Pro to integrate with the LDAP server. When you are finished, users in the LDAP directory should be able to authenticate into RStudio Server Pro. This exercise is broken into three parts: Explore LDAP and obtain information from the .ldif file Use sssd to configure your server with LDAP Use PAM to configure RStudio Server Pro Tip Remember you will need to use sudo commands throughout this exercise. Quiz Quiz: Authentication protocols Which authentication protocols are supported by RStudio Server Pro?\", Choose five answers from the following list: Operating system Proxy PAM LDAP Google OAuth OAuth 2 SAML Answer: The correct answer is: Operating system, Proxy, PAM, LDAP and Google OAuth. SAML is not currently supported and OAuth 2 is not supported, though the Google specific variant is. In both cases we recommend you use proxied authentication instead. Configure RStudio Server Pro with LDAP We have set up an LDAP server for you. First, configure LDAP Second, use PAM to configure RStudio Server Pro Successful completion involves: LDAP users are accessible from the command line LDAP users can login into RStudio Server Pro A review of LDAP and sssd LDAP is a protocol . LDAP is implemented in many different ways. Active Directory uses LDAP to communicate OpenLDAP has different standards than Active Directory, for instance sssd is a system service Makes LDAP a system identity and authentication provider This means that all local system accounts are technically already provisioned even if they do not actually exist yet This is sssd magic! Handy tools The ldapsearch utility A command line utility Used to interface with a remote LDAP identity provider Query for LDAP entries Files in the .ldif format LDAP Data Interchange Format A standard plaintext format for representing LDAP objects The pamtester utility A command line utility Used to test PAM configuration Part 1: Get server information In this part, you get information you need to configure your server with LDAP. Introduction to ldapsearch Hint: Use man ldapsearch to construct your command. You can also find the help for man ldapsearch at https://linux.die.net/man/1/ldapsearch Info Important: The LDAP bind password is admin . You will need this for the next steps. Use the ldapsearch terminal utility to retrieve an example user from the LDAP credential store. Construct a command with the inputs below. The most important things you\u2019ll need to know about your LDAP server are: hostname or IP address LDAP port number base bind DN (disinguished name) This information allows you to write an ldapsearch query in the format: ldapsearch -h 1 .2.3.4 -p 123 -D dc = example,dc = com [ query ] In this classroom, the hostname is leader.example.org , and the base bind DN is \"admin.example.org\". It will also help to know a few of the LDIF format abbreviations for search criteria in LDAP: Code Meaning dn distinguished name dc domain component ou organizational unit cn common name In these codes: The dn refers to the distinguished name that uniquely identifies an entry in the directory. The dc refers to each component of the domain . For example www.mydomain.com would be written as dc=www,dc=mydomain,dc=com The ou refers to the organizational unit (or sometimes the user group) that the user is part of. A user can be part of more than one group, for example: ou=Lawyer,ou= Judge . The cn refers to the individual object, for example person's name, meeting room, job title, etc. This means that admin.example.org can be written as cn=admin,dc=example,dc=org . And now you have the essential information for an ldap query: Argument ldapsearch Value Note Bind Password -w admin Hostname -h leader.example.org Port -p 389 default value, can be omitted Bind DN -D cn=admin, dc=example, dc=org DN means \"distinguished name\" Note that it is considered unsafe to provide passwords on the commandline. Outside of this training course you should use -W to get a password prompt instead. ldapsearch -w admin -h leader.example.org -D cn = admin,dc = example,dc = org If you issue this LDAP command, you should get: # extended LDIF # # LDAPv3 # base <> (default) with scope subtree # filter: (objectclass=*) # requesting: ALL # # search result search: 2 result: 32 No such object # numResponses: 1 This query doesn't return any useful information, so you want to restrict the starting point of the query, by setting the searchbase : Argument ldapsearch Value Note Search Base -b dc=example, dc=org Use searchbase as the starting point for the search instead of the default ldapsearch -w admin -h leader.example.org -D cn = admin,dc = example,dc = org -b dc = example,dc = org Note that this returns all elements in the LDAP database! Returning a single element Now that you know how to return the entire database, you can add additional elements to the [query] . Remember that the generic query format looks like this: ldapsearch -h 1 .2.3.4 -p 123 -D dc = example,dc = com [ query ] And you have already tried ldapsearch -w admin -h leader.example.org -D cn = admin,dc = example,dc = org -b dc = example,dc = org By adding a query term at the end, you can search for specific elements. For example, search for a user named \"Joe\". You already know that cn indicates the \"common name\", so try running a query for cn=joe : ldapsearch -w admin -h leader.example.org -D cn = admin,dc = example,dc = org -b dc = example,dc = org cn = joe You should get: # joe, engineering.example.org dn: cn=joe,dc=engineering,dc=example,dc=org cn: joe gidNumber: 5000 givenName: Joe homeDirectory: /home/joe loginShell: /bin/sh mail: joe@example.org objectClass: inetOrgPerson objectClass: posixAccount objectClass: top sn: Golly uid: joe uidNumber: 10000 userPassword:: e01ENX1qL01raWZrdk0wRm1sTDZQM0MxTUlnPT0= Inspect the output Each object in an LDAP directory has at least one object class associated with it. The object class determines the characteristics of this object, in particular the set of attributes which the object can have (and the ones it must have). The object classes are defined in the LDAP directory schema - they constitute a class hierarchy there, there is one central top level class (which is called 'top'), all other classes are derived from that Repeat your previous ldapsearch command, this time for the user `julie: ldapsearch -w admin -h leader.example.org -D cn = admin,dc = example,dc = org -b dc = example,dc = org cn = julie Here is an extract for the user named Julie : # julie, engineering.example.org dn: cn = julie,dc = engineering,dc = example,dc = org cn: julie gidNumber: 5000 givenName: Julie homeDirectory: /home/julie loginShell: /bin/sh mail: julie@example.org objectClass: inetOrgPerson objectClass: posixAccount objectClass: top sn: Jolly uid: julie uidNumber: 10001 userPassword:: e01ENX1GdkV2WG9ONTRpdnBsZVVGNi93YmhBPT0 = Note, in particular, the objectClass line: objectClass: inetOrgPerson objectClass: posixAccount objectClass: top This means that users have the attribute: inetOrgPerson , posixAccount and top . Task: Get a list of all users You can use your knowledge that users have the attribute inetOrgPerson in a follow-up ldapsearch to get all usernames ( uid ). Refine your search to return only inetOrgperson entries: ldapsearch -w admin -h leader.example.org -D cn = admin,dc = example,dc = org -b dc = example,dc = org objectClass = inetOrgperson And then refine the search once more to return only the uid entries: ldapsearch -w admin -h leader.example.org -D cn = admin,dc = example,dc = org -b dc = example,dc = org objectClass = inetOrgperson uid Note It is much easier to read and understand the resulting list, making it easier to determine which users are in the system. Task: Get a specific user Now you can get the information you need to configure the server. Query LDAP for information about julie . You will use this information in the next step. ldapsearch -w admin -h leader.example.org -D cn = admin,dc = example,dc = org -b dc = example,dc = org cn = julie You can expand your query to include all user and operational attributes ldapsearch -w admin -h leader.example.org -D cn = admin,dc = example,dc = org -b dc = example,dc = org cn = julie \\* \\+ Explanation: This returns all information about a single user. Searching with \\* shows all user attributes Searching with \\+ shows all operational attributes In the results: entryUUID is the unique identifier of a record in openLDAP Users and groups What is the difference between a user and a group in this LDAP server? Specifically, if you look at an LDAP directory entry, how do you tell if it is a user or a group entry? As an example, here is the entry for julie : ldapsearch -w admin -h leader.example.org -D cn = admin,dc = example,dc = org -b dc = example,dc = org cn = julie \\* \\+ # julie, engineering.example.org dn: cn = julie,dc = engineering,dc = example,dc = org structuralObjectClass: inetOrgPerson entryUUID: 3a204884-2507-1039-83ea-df23cd78e201 creatorsName: cn = admin,dc = example,dc = org createTimestamp: 20190617045051Z entryCSN: 20190617045051 .770037Z#000000#000#000000 modifiersName: cn = admin,dc = example,dc = org modifyTimestamp: 20190617045051Z entryDN: cn = julie,dc = engineering,dc = example,dc = org subschemaSubentry: cn = Subschema hasSubordinates: FALSE And this is the entry for engineering_group : ldapsearch -w admin -h leader.example.org -D cn = admin,dc = example,dc = org -b dc = example,dc = org cn = engineering_group \\* \\+ # engineering_group, example.org dn: cn = engineering_group,dc = example,dc = org structuralObjectClass: posixGroup entryUUID: 3a1a7ff8-2507-1039-83e4-df23cd78e201 creatorsName: cn = admin,dc = example,dc = org createTimestamp: 20190617045051Z entryCSN: 20190617045051 .732134Z#000000#000#000000 modifiersName: cn = admin,dc = example,dc = org modifyTimestamp: 20190617045051Z entryDN: cn = engineering_group,dc = example,dc = org subschemaSubentry: cn = Subschema hasSubordinates: FALSE Task: Identify the attributes that might indicate that julie is a person and engineering_group is a group Hint: look at the differing values for structuralObjectClass Part 2: Configure server In this part, you configure your server with sssd . Task: Create sssd.conf file sssd helps you integrate your Linux system with LDAP. The configuration template is in your workshop materials. Important: You can find the workshop materials at /usr/share/class/pro_admin_training_assets/ . Tasks: Copy the configuration template s-template.txt to /etc/sssd/sssd.conf . Show me how... sudo cp /usr/share/class/pro_admin_training_assets/s-template.txt /etc/sssd/sssd.conf Task: Edit the sssd.conf file Task: Fill out the missing values in sssd.conf using the example output from the LDAP server in the previous task These are the values you must complete: ldap_user_object_class = posixAccount ldap_user_name = cn ldap_user_uuid = entryUUID ldap_user_shell = loginShell ldap_user_home_directory = homeDirectory ldap_user_uid_number = uidNumber And the meaning of these fields ( source ) Configuration option The LDAP attribute that... ldap_user_object_class specifies the object class of a user entry in LDAP ldap_user_name corresponds to the user's login name ldap_user_uuid contains the UUID/GUID of an LDAP user object. ldap_user_shell contains the path to the user's default shell. ldap_user_home_directory contains the name of the user's home directory ldap_user_uid_number corresponds to the user's id If you get stuck, you can find a full example configuration of sssd.conf in s-answer.txt . Task: Test sssd is working Next, restart the sssd service: sudo chown root:root /etc/sssd/sssd.conf sudo chmod 600 /etc/sssd/sssd.conf sudo systemctl restart sssd sudo systemctl status sssd To test that sssd is working correctly, try: id julie Make sure that the information matches with the ldap search for Julie: ldapsearch -w admin -h leader.example.org -D cn = admin,dc = example,dc = org -b dc = example,dc = org cn = julie Consider these questions: Did you get meaningful output? If you did, try a few more users from the LDAP system. Do these users exist on your system? Where is the information coming from? Signs of success: sssd configured You have successfully configured your server to recognize LDAP. PAM can now call the sssd service and find users in the LDAP directory. The next step is to configure RStudio Server Pro with PAM. Part 3: Configure RSP In this part, you configure RStudio Server Pro to connect to LDAP via PAM. Task: Set up PAM Profiles RStudio Server Pro supports PAM sessions. The PAM sessions work with sssd to authenticate users. Tasks Copy the following files ( Remember: workshop materials are under /usr/share/class/pro_admin_training_assets/ .): What From: To: PAM profile rstudio-sssd /etc/pam.d/rstudio PAM profile rstudio-session-sssd /etc/pam.d/rstudio-session Edit the /etc/rstudio/rserver.conf file. Add the following line: auth-pam-sessions-profile = rstudio-session Explanation PAM offers flexible control over system level authentication Specific PAM exploration is outside of the bounds of this course Open each file and explore the contents Task: Test authentication You can use the pamtester utility to test the PAM profile for a specific user. You cand find documentation for pamtester here In this classroom, the password for every user is the same as their user name. For example: User: jen Password: jen Task Use the pamtester utility to test authentication for jen:jen sudo /usr/lib/rstudio-server/bin/pamtester --verbose rstudio jen authenticate Enter the password. You should get: pamtester: successfully authenticated Task: Create user accounts Every RStudio Server user must have a home directory. From the r href(\"admin guide\", \"https://docs.rstudio.com/ide/server-pro/authenticating-users.html\") : R users require local system accounts regardless of what RStudio authentication method you use. You should set up local system accounts manually and then map authenticating users to these accounts. You can also use PAM Sessions to mount your user home directory to the server. If a user does not have a home directory, they will get a system error 13 (Permission Denied) message in their browser when they try to log in (It is possible to use the rstudio-session PAM profile to create home directories automatically when a user logs into the server, but that's outside the scope of this course.) Tasks: Create a local system account for the user jen sudo mkdir /home/jen sudo chown jen: /home/jen Why does this work? The linux command chown changes the ownership of a file or folder. The typical syntax is chown username:groupname ... and you have to specify the new username as well as the new groupname . However, there is special syntax for chown that allows you to omit either the username or the groupname . In this example, chown jen: omits the groupname, and then the behaviour of chown is to substitute the default groupname. You can read more in the manual pages for linux, also known as the \"man pages\", by typing: man chown Task: Restart RStudio Server You must restart RStudio Server Pro for your configuration change to take effect Note Refer to the admin guide, section 2.1.2 Stopping and Starting To manually stop, start, and restart the server you use the following commands: sudo rstudio-server stop sudo rstudio-server start or just: sudo rstudio-server restart To check the current stopped/started status of the server: sudo rstudio-server status Task: Log in as a user that exists in LDAP Log into RStudio Server Pro in your browser using one of the users from the LDAP Server. Important: Since RStudio Server Pro now authenticates only users in LDAP, you must log in as one of those users Also, a user home folder must exist, so make sure you've created a home folder! practically speaking, this means you must log in as jen , since you created a home folder for jen in the previous step Remember In this classroom LDAP server, user passwords are the same as the username, i.e. jen:jen , julie:julie , joe:joe , etc. Taking stock Success ?? Success Once you have logged in successfully, you have completed this portion of the exercise! Failure ?! Some things that could go wrong: You get the warning message: WARNINGS: The auth-pam-sessions-enabled option requires the PAM profile /etc/pam.d/rstudio-session however that profile does not exist. Disabling support for PAM sessions. This probably means: you forgot to copy the PAM Profile files in the task \"Set up PAM profiles\", OR you didn't edit the /etc/rstudio/rserver.conf file. You forgot the URL for your RStudio Server Pro session Go back to https://rstd.io/class and bookmark the landing page. You logged in as admin-user Remember that you now use LDAP to authenticate, and admin-user is not an authenticated user in LDAP Log in as a user that exists, and that has a home folder, e.g. jen Closing thought: Security best practices Note In this course we supplied a demonstration sssd config file ( s-answer.txt ), and in this example file encryption is specifically disabled. Note that this is a test setup, without encryption enabled. This is not suggested for anything but testing, as your credentials will pass over the wire in plain text! In your own environment, you should get a security expert to review your configuration.","title":"Lab:  RStudio Server Pro Security"},{"location":"rstudio_server_pro/lab_security/#introduction","text":"Imagine that you are in an organization that standardized authentication using the LDAP protocol and openLDAP. In this exercise, we have provided the LDAP server for you. Your task is to configure RStudio Server Pro to integrate with the LDAP server. When you are finished, users in the LDAP directory should be able to authenticate into RStudio Server Pro. This exercise is broken into three parts: Explore LDAP and obtain information from the .ldif file Use sssd to configure your server with LDAP Use PAM to configure RStudio Server Pro Tip Remember you will need to use sudo commands throughout this exercise.","title":"Introduction"},{"location":"rstudio_server_pro/lab_security/#quiz","text":"Quiz: Authentication protocols Which authentication protocols are supported by RStudio Server Pro?\", Choose five answers from the following list: Operating system Proxy PAM LDAP Google OAuth OAuth 2 SAML Answer: The correct answer is: Operating system, Proxy, PAM, LDAP and Google OAuth. SAML is not currently supported and OAuth 2 is not supported, though the Google specific variant is. In both cases we recommend you use proxied authentication instead.","title":"Quiz"},{"location":"rstudio_server_pro/lab_security/#configure-rstudio-server-pro-with-ldap","text":"We have set up an LDAP server for you. First, configure LDAP Second, use PAM to configure RStudio Server Pro Successful completion involves: LDAP users are accessible from the command line LDAP users can login into RStudio Server Pro","title":"Configure RStudio Server Pro with LDAP"},{"location":"rstudio_server_pro/lab_security/#a-review-of-ldap-and-sssd","text":"LDAP is a protocol . LDAP is implemented in many different ways. Active Directory uses LDAP to communicate OpenLDAP has different standards than Active Directory, for instance sssd is a system service Makes LDAP a system identity and authentication provider This means that all local system accounts are technically already provisioned even if they do not actually exist yet This is sssd magic!","title":"A review of LDAP and sssd"},{"location":"rstudio_server_pro/lab_security/#handy-tools","text":"The ldapsearch utility A command line utility Used to interface with a remote LDAP identity provider Query for LDAP entries Files in the .ldif format LDAP Data Interchange Format A standard plaintext format for representing LDAP objects The pamtester utility A command line utility Used to test PAM configuration","title":"Handy tools"},{"location":"rstudio_server_pro/lab_security/#part-1-get-server-information","text":"In this part, you get information you need to configure your server with LDAP.","title":"Part 1: Get server information"},{"location":"rstudio_server_pro/lab_security/#introduction-to-ldapsearch","text":"Hint: Use man ldapsearch to construct your command. You can also find the help for man ldapsearch at https://linux.die.net/man/1/ldapsearch Info Important: The LDAP bind password is admin . You will need this for the next steps. Use the ldapsearch terminal utility to retrieve an example user from the LDAP credential store. Construct a command with the inputs below. The most important things you\u2019ll need to know about your LDAP server are: hostname or IP address LDAP port number base bind DN (disinguished name) This information allows you to write an ldapsearch query in the format: ldapsearch -h 1 .2.3.4 -p 123 -D dc = example,dc = com [ query ] In this classroom, the hostname is leader.example.org , and the base bind DN is \"admin.example.org\". It will also help to know a few of the LDIF format abbreviations for search criteria in LDAP: Code Meaning dn distinguished name dc domain component ou organizational unit cn common name In these codes: The dn refers to the distinguished name that uniquely identifies an entry in the directory. The dc refers to each component of the domain . For example www.mydomain.com would be written as dc=www,dc=mydomain,dc=com The ou refers to the organizational unit (or sometimes the user group) that the user is part of. A user can be part of more than one group, for example: ou=Lawyer,ou= Judge . The cn refers to the individual object, for example person's name, meeting room, job title, etc. This means that admin.example.org can be written as cn=admin,dc=example,dc=org . And now you have the essential information for an ldap query: Argument ldapsearch Value Note Bind Password -w admin Hostname -h leader.example.org Port -p 389 default value, can be omitted Bind DN -D cn=admin, dc=example, dc=org DN means \"distinguished name\" Note that it is considered unsafe to provide passwords on the commandline. Outside of this training course you should use -W to get a password prompt instead. ldapsearch -w admin -h leader.example.org -D cn = admin,dc = example,dc = org If you issue this LDAP command, you should get: # extended LDIF # # LDAPv3 # base <> (default) with scope subtree # filter: (objectclass=*) # requesting: ALL # # search result search: 2 result: 32 No such object # numResponses: 1 This query doesn't return any useful information, so you want to restrict the starting point of the query, by setting the searchbase : Argument ldapsearch Value Note Search Base -b dc=example, dc=org Use searchbase as the starting point for the search instead of the default ldapsearch -w admin -h leader.example.org -D cn = admin,dc = example,dc = org -b dc = example,dc = org Note that this returns all elements in the LDAP database!","title":"Introduction to ldapsearch"},{"location":"rstudio_server_pro/lab_security/#returning-a-single-element","text":"Now that you know how to return the entire database, you can add additional elements to the [query] . Remember that the generic query format looks like this: ldapsearch -h 1 .2.3.4 -p 123 -D dc = example,dc = com [ query ] And you have already tried ldapsearch -w admin -h leader.example.org -D cn = admin,dc = example,dc = org -b dc = example,dc = org By adding a query term at the end, you can search for specific elements. For example, search for a user named \"Joe\". You already know that cn indicates the \"common name\", so try running a query for cn=joe : ldapsearch -w admin -h leader.example.org -D cn = admin,dc = example,dc = org -b dc = example,dc = org cn = joe You should get: # joe, engineering.example.org dn: cn=joe,dc=engineering,dc=example,dc=org cn: joe gidNumber: 5000 givenName: Joe homeDirectory: /home/joe loginShell: /bin/sh mail: joe@example.org objectClass: inetOrgPerson objectClass: posixAccount objectClass: top sn: Golly uid: joe uidNumber: 10000 userPassword:: e01ENX1qL01raWZrdk0wRm1sTDZQM0MxTUlnPT0=","title":"Returning a single element"},{"location":"rstudio_server_pro/lab_security/#inspect-the-output","text":"Each object in an LDAP directory has at least one object class associated with it. The object class determines the characteristics of this object, in particular the set of attributes which the object can have (and the ones it must have). The object classes are defined in the LDAP directory schema - they constitute a class hierarchy there, there is one central top level class (which is called 'top'), all other classes are derived from that Repeat your previous ldapsearch command, this time for the user `julie: ldapsearch -w admin -h leader.example.org -D cn = admin,dc = example,dc = org -b dc = example,dc = org cn = julie Here is an extract for the user named Julie : # julie, engineering.example.org dn: cn = julie,dc = engineering,dc = example,dc = org cn: julie gidNumber: 5000 givenName: Julie homeDirectory: /home/julie loginShell: /bin/sh mail: julie@example.org objectClass: inetOrgPerson objectClass: posixAccount objectClass: top sn: Jolly uid: julie uidNumber: 10001 userPassword:: e01ENX1GdkV2WG9ONTRpdnBsZVVGNi93YmhBPT0 = Note, in particular, the objectClass line: objectClass: inetOrgPerson objectClass: posixAccount objectClass: top This means that users have the attribute: inetOrgPerson , posixAccount and top .","title":"Inspect the output"},{"location":"rstudio_server_pro/lab_security/#task-get-a-list-of-all-users","text":"You can use your knowledge that users have the attribute inetOrgPerson in a follow-up ldapsearch to get all usernames ( uid ). Refine your search to return only inetOrgperson entries: ldapsearch -w admin -h leader.example.org -D cn = admin,dc = example,dc = org -b dc = example,dc = org objectClass = inetOrgperson And then refine the search once more to return only the uid entries: ldapsearch -w admin -h leader.example.org -D cn = admin,dc = example,dc = org -b dc = example,dc = org objectClass = inetOrgperson uid Note It is much easier to read and understand the resulting list, making it easier to determine which users are in the system.","title":"Task: Get a list of all users"},{"location":"rstudio_server_pro/lab_security/#task-get-a-specific-user","text":"Now you can get the information you need to configure the server. Query LDAP for information about julie . You will use this information in the next step. ldapsearch -w admin -h leader.example.org -D cn = admin,dc = example,dc = org -b dc = example,dc = org cn = julie You can expand your query to include all user and operational attributes ldapsearch -w admin -h leader.example.org -D cn = admin,dc = example,dc = org -b dc = example,dc = org cn = julie \\* \\+ Explanation: This returns all information about a single user. Searching with \\* shows all user attributes Searching with \\+ shows all operational attributes In the results: entryUUID is the unique identifier of a record in openLDAP","title":"Task: Get a specific user"},{"location":"rstudio_server_pro/lab_security/#users-and-groups","text":"What is the difference between a user and a group in this LDAP server? Specifically, if you look at an LDAP directory entry, how do you tell if it is a user or a group entry? As an example, here is the entry for julie : ldapsearch -w admin -h leader.example.org -D cn = admin,dc = example,dc = org -b dc = example,dc = org cn = julie \\* \\+ # julie, engineering.example.org dn: cn = julie,dc = engineering,dc = example,dc = org structuralObjectClass: inetOrgPerson entryUUID: 3a204884-2507-1039-83ea-df23cd78e201 creatorsName: cn = admin,dc = example,dc = org createTimestamp: 20190617045051Z entryCSN: 20190617045051 .770037Z#000000#000#000000 modifiersName: cn = admin,dc = example,dc = org modifyTimestamp: 20190617045051Z entryDN: cn = julie,dc = engineering,dc = example,dc = org subschemaSubentry: cn = Subschema hasSubordinates: FALSE And this is the entry for engineering_group : ldapsearch -w admin -h leader.example.org -D cn = admin,dc = example,dc = org -b dc = example,dc = org cn = engineering_group \\* \\+ # engineering_group, example.org dn: cn = engineering_group,dc = example,dc = org structuralObjectClass: posixGroup entryUUID: 3a1a7ff8-2507-1039-83e4-df23cd78e201 creatorsName: cn = admin,dc = example,dc = org createTimestamp: 20190617045051Z entryCSN: 20190617045051 .732134Z#000000#000#000000 modifiersName: cn = admin,dc = example,dc = org modifyTimestamp: 20190617045051Z entryDN: cn = engineering_group,dc = example,dc = org subschemaSubentry: cn = Subschema hasSubordinates: FALSE Task: Identify the attributes that might indicate that julie is a person and engineering_group is a group Hint: look at the differing values for structuralObjectClass","title":"Users and groups"},{"location":"rstudio_server_pro/lab_security/#part-2-configure-server","text":"In this part, you configure your server with sssd .","title":"Part 2: Configure server"},{"location":"rstudio_server_pro/lab_security/#task-create-sssdconf-file","text":"sssd helps you integrate your Linux system with LDAP. The configuration template is in your workshop materials. Important: You can find the workshop materials at /usr/share/class/pro_admin_training_assets/ . Tasks: Copy the configuration template s-template.txt to /etc/sssd/sssd.conf . Show me how... sudo cp /usr/share/class/pro_admin_training_assets/s-template.txt /etc/sssd/sssd.conf","title":"Task: Create sssd.conf file"},{"location":"rstudio_server_pro/lab_security/#task-edit-the-sssdconf-file","text":"Task: Fill out the missing values in sssd.conf using the example output from the LDAP server in the previous task These are the values you must complete: ldap_user_object_class = posixAccount ldap_user_name = cn ldap_user_uuid = entryUUID ldap_user_shell = loginShell ldap_user_home_directory = homeDirectory ldap_user_uid_number = uidNumber And the meaning of these fields ( source ) Configuration option The LDAP attribute that... ldap_user_object_class specifies the object class of a user entry in LDAP ldap_user_name corresponds to the user's login name ldap_user_uuid contains the UUID/GUID of an LDAP user object. ldap_user_shell contains the path to the user's default shell. ldap_user_home_directory contains the name of the user's home directory ldap_user_uid_number corresponds to the user's id If you get stuck, you can find a full example configuration of sssd.conf in s-answer.txt .","title":"Task: Edit the sssd.conf file"},{"location":"rstudio_server_pro/lab_security/#task-test-sssd-is-working","text":"Next, restart the sssd service: sudo chown root:root /etc/sssd/sssd.conf sudo chmod 600 /etc/sssd/sssd.conf sudo systemctl restart sssd sudo systemctl status sssd To test that sssd is working correctly, try: id julie Make sure that the information matches with the ldap search for Julie: ldapsearch -w admin -h leader.example.org -D cn = admin,dc = example,dc = org -b dc = example,dc = org cn = julie Consider these questions: Did you get meaningful output? If you did, try a few more users from the LDAP system. Do these users exist on your system? Where is the information coming from?","title":"Task: Test sssd is working"},{"location":"rstudio_server_pro/lab_security/#signs-of-success-sssd-configured","text":"You have successfully configured your server to recognize LDAP. PAM can now call the sssd service and find users in the LDAP directory. The next step is to configure RStudio Server Pro with PAM.","title":"Signs of success: sssd configured"},{"location":"rstudio_server_pro/lab_security/#part-3-configure-rsp","text":"In this part, you configure RStudio Server Pro to connect to LDAP via PAM.","title":"Part 3: Configure RSP"},{"location":"rstudio_server_pro/lab_security/#task-set-up-pam-profiles","text":"RStudio Server Pro supports PAM sessions. The PAM sessions work with sssd to authenticate users. Tasks Copy the following files ( Remember: workshop materials are under /usr/share/class/pro_admin_training_assets/ .): What From: To: PAM profile rstudio-sssd /etc/pam.d/rstudio PAM profile rstudio-session-sssd /etc/pam.d/rstudio-session Edit the /etc/rstudio/rserver.conf file. Add the following line: auth-pam-sessions-profile = rstudio-session Explanation PAM offers flexible control over system level authentication Specific PAM exploration is outside of the bounds of this course Open each file and explore the contents","title":"Task: Set up PAM Profiles"},{"location":"rstudio_server_pro/lab_security/#task-test-authentication","text":"You can use the pamtester utility to test the PAM profile for a specific user. You cand find documentation for pamtester here In this classroom, the password for every user is the same as their user name. For example: User: jen Password: jen Task Use the pamtester utility to test authentication for jen:jen sudo /usr/lib/rstudio-server/bin/pamtester --verbose rstudio jen authenticate Enter the password. You should get: pamtester: successfully authenticated","title":"Task: Test authentication"},{"location":"rstudio_server_pro/lab_security/#task-create-user-accounts","text":"Every RStudio Server user must have a home directory. From the r href(\"admin guide\", \"https://docs.rstudio.com/ide/server-pro/authenticating-users.html\") : R users require local system accounts regardless of what RStudio authentication method you use. You should set up local system accounts manually and then map authenticating users to these accounts. You can also use PAM Sessions to mount your user home directory to the server. If a user does not have a home directory, they will get a system error 13 (Permission Denied) message in their browser when they try to log in (It is possible to use the rstudio-session PAM profile to create home directories automatically when a user logs into the server, but that's outside the scope of this course.) Tasks: Create a local system account for the user jen sudo mkdir /home/jen sudo chown jen: /home/jen Why does this work? The linux command chown changes the ownership of a file or folder. The typical syntax is chown username:groupname ... and you have to specify the new username as well as the new groupname . However, there is special syntax for chown that allows you to omit either the username or the groupname . In this example, chown jen: omits the groupname, and then the behaviour of chown is to substitute the default groupname. You can read more in the manual pages for linux, also known as the \"man pages\", by typing: man chown","title":"Task: Create user accounts"},{"location":"rstudio_server_pro/lab_security/#task-restart-rstudio-server","text":"You must restart RStudio Server Pro for your configuration change to take effect Note Refer to the admin guide, section 2.1.2 Stopping and Starting To manually stop, start, and restart the server you use the following commands: sudo rstudio-server stop sudo rstudio-server start or just: sudo rstudio-server restart To check the current stopped/started status of the server: sudo rstudio-server status","title":"Task: Restart RStudio Server"},{"location":"rstudio_server_pro/lab_security/#task-log-in-as-a-user-that-exists-in-ldap","text":"Log into RStudio Server Pro in your browser using one of the users from the LDAP Server. Important: Since RStudio Server Pro now authenticates only users in LDAP, you must log in as one of those users Also, a user home folder must exist, so make sure you've created a home folder! practically speaking, this means you must log in as jen , since you created a home folder for jen in the previous step Remember In this classroom LDAP server, user passwords are the same as the username, i.e. jen:jen , julie:julie , joe:joe , etc.","title":"Task: Log in as a user that exists in LDAP"},{"location":"rstudio_server_pro/lab_security/#taking-stock","text":"","title":"Taking stock"},{"location":"rstudio_server_pro/lab_security/#success","text":"Success Once you have logged in successfully, you have completed this portion of the exercise!","title":"Success ??"},{"location":"rstudio_server_pro/lab_security/#failure","text":"Some things that could go wrong: You get the warning message: WARNINGS: The auth-pam-sessions-enabled option requires the PAM profile /etc/pam.d/rstudio-session however that profile does not exist. Disabling support for PAM sessions. This probably means: you forgot to copy the PAM Profile files in the task \"Set up PAM profiles\", OR you didn't edit the /etc/rstudio/rserver.conf file. You forgot the URL for your RStudio Server Pro session Go back to https://rstd.io/class and bookmark the landing page. You logged in as admin-user Remember that you now use LDAP to authenticate, and admin-user is not an authenticated user in LDAP Log in as a user that exists, and that has a home folder, e.g. jen","title":"Failure ?!"},{"location":"rstudio_server_pro/lab_security/#closing-thought-security-best-practices","text":"Note In this course we supplied a demonstration sssd config file ( s-answer.txt ), and in this example file encryption is specifically disabled. Note that this is a test setup, without encryption enabled. This is not suggested for anything but testing, as your credentials will pass over the wire in plain text! In your own environment, you should get a security expert to review your configuration.","title":"Closing thought: Security best practices"},{"location":"rstudio_server_pro/lab_startup_and_packages/","text":"Task: install packages from source The default mechanism for installing a package on Linux is to compile from source. Use the R console in RStudio Server Pro to determine your current CRAN repository: getOption ( \"repos\" ) You should get the result that the default repository is the RStudio CRAN mirror: CRAN \"https://cran.rstudio.com/\" attr(,\"RStudio\") [1] TRUE Next, install a package: install.packages ( \"quantreg\" , dependencies = TRUE ) Make a note how long this code takes to run. In addition, note that while the package installs, you get several messages in the console of the form: * installing *source* package \u2018quantreg\u2019 ... ** package \u2018quantreg\u2019 successfully unpacked and MD5 sums checked ** libs f95 -fpic -g -O2 -c boot.f -o boot.o f95 -fpic -g -O2 -c bound.f -o bound.o f95 -fpic -g -O2 -c boundc.f -o boundc.o . . <snip> . . f95 -fpic -g -O2 -c srtpai.f -o srtpai.o gcc -shared -L/opt/R/3.5.1/lib/R/lib -L/usr/local/lib -o quantreg.so boot.o bound.o boundc.o brute.o chlfct.o cholesky.o combos.o crqf.o crqfnb.o dsel05.o etime.o extract.o idmin.o iswap.o kuantiles.o linpack.o mcmb.o penalty.o powell.o quantreg_init.o rls.o rq0.o rq1.o rqbr.o rqfn.o rqfnb.o rqfnc.o rqs.o sakj.o sparskit2.o srqfn.o srqfnc.o srtpai.o -llapack -lblas -lgfortran -lm -lquadmath -lgfortran -lm -lquadmath -L/opt/R/3.5.1/lib/R/lib -lR installing to /home/jen/R/x86_64-pc-linux-gnu-library/3.5/quantreg/libs ** R ** data ** demo ** inst ** byte-compile and prepare package for lazy loading ** help *** installing help indices ** building package indices ** installing vignettes ** testing if installed package can be loaded * DONE (quantreg) What does all of this mean? Those lines starting with f95 -fpic ... indicates that the Fortran 95 compiler is at work. And the line starting with gcc -shared ... indicates that the GNU C compiler (gcc) is at work. Then you should get some lines starting with ** R that tells you the compilation step is complete, and R is now finalizing the package installation. Once you get * DONE ... you know that package installation is complete. Task: Configure RStudio Server Pro for binary packages You will encounter RStudio Package Manager in a later module in this course. You haven't yet installed RStudio Package Manager, so for now you can use the RStudio demo instance to configure RStudio Server Pro. Identify the binary package installation URL You can browse the demo instance at https://demo.rstudiopm.com Browse to the setup tab, and find the set of buttons that allow you to choose \"Source\" or \"Binary\". Use the drop-down button to select the correct operating system, then copy the URL https://demo.rstudiopm.com/all/__linux__/bionic/latest Once you have the correct URL, you can configure RStudio Server Pro Configure RStudio Server Pro You can find the instructions for configuring RStudio Server Pro in the RStudio Package Manager admin guide , specifically in section 19.1 A Single Repository . Read the instructions, then SSH into your VM instance and edit the file /etc/rstudio/rsession.conf and add the line r-cran-repos = https://demo.rstudiopm.com/all/__linux__/bionic/latest Save the file, then restart RStudio Server: sudo rstudio-server restart Important: also restart your R session. In RStudio Server Pro, you can restart your R session from the menu at /Session / Restart R , or Use the keyboard shortcut Shift + Ctrl + F10 Test that it works Once you've restarted RStudio Server Pro, use the R console to check that your repository is correct, and that packages install from binaries without compilation. To do this, repeat the R commands you used earlier: getOption ( \"repos\" ) This time, you should get the URL to the RStudio Package Manager demo site: CRAN \"https://demo.rstudiopm.com/all/__linux__/bionic/latest\" Then force the re-install of the quantreg package: install.packages ( \"quantreg\" ) This should be the complete output: Installing package into \u2018/home/jen/R/x86_64-pc-linux-gnu-library/3.5\u2019 (as \u2018lib\u2019 is unspecified) trying URL 'https://demo.rstudiopm.com/all/__linux__/bionic/latest/src/contrib/quantreg_5.54.tar.gz' Content type 'application/x-gzip' length 1537774 bytes (1.5 MB) ================================================== downloaded 1.5 MB * installing *binary* package \u2018quantreg\u2019 ... * DONE (quantreg) The downloaded source packages are in \u2018/tmpr/RtmpsGfCP8/downloaded_packages\u2019 Note that this step is very quick, and there are also no messages from either the fortran compiler ( f95 ) or the C compiler ( gcc ). Task: Install the tidyverse To speed up the progress of later modules in this course, start the installation of a set of packages you will need later: install.packages ( pkgs = c ( \"tidyverse\" , \"babynames\" , \"shiny\" , \"shinydashboard\" , \"dbplyr\" , \"highcharter\" , \"DT\" , \"htmltools\" , \"quantmod\" , \"dygraphs\" , \"forecast\" , \"highcharter\" , \"odbc\" , \"plumber\" , \"ggplot2\" , \"rmarkdown\" , \"odbc\" )) This process will take several minutes. Once the installation is running, you can carry on with the rest of the course.","title":"Lab:  RStudio Server Pro Startup and packages"},{"location":"rstudio_server_pro/lab_startup_and_packages/#task-install-packages-from-source","text":"The default mechanism for installing a package on Linux is to compile from source. Use the R console in RStudio Server Pro to determine your current CRAN repository: getOption ( \"repos\" ) You should get the result that the default repository is the RStudio CRAN mirror: CRAN \"https://cran.rstudio.com/\" attr(,\"RStudio\") [1] TRUE Next, install a package: install.packages ( \"quantreg\" , dependencies = TRUE ) Make a note how long this code takes to run. In addition, note that while the package installs, you get several messages in the console of the form: * installing *source* package \u2018quantreg\u2019 ... ** package \u2018quantreg\u2019 successfully unpacked and MD5 sums checked ** libs f95 -fpic -g -O2 -c boot.f -o boot.o f95 -fpic -g -O2 -c bound.f -o bound.o f95 -fpic -g -O2 -c boundc.f -o boundc.o . . <snip> . . f95 -fpic -g -O2 -c srtpai.f -o srtpai.o gcc -shared -L/opt/R/3.5.1/lib/R/lib -L/usr/local/lib -o quantreg.so boot.o bound.o boundc.o brute.o chlfct.o cholesky.o combos.o crqf.o crqfnb.o dsel05.o etime.o extract.o idmin.o iswap.o kuantiles.o linpack.o mcmb.o penalty.o powell.o quantreg_init.o rls.o rq0.o rq1.o rqbr.o rqfn.o rqfnb.o rqfnc.o rqs.o sakj.o sparskit2.o srqfn.o srqfnc.o srtpai.o -llapack -lblas -lgfortran -lm -lquadmath -lgfortran -lm -lquadmath -L/opt/R/3.5.1/lib/R/lib -lR installing to /home/jen/R/x86_64-pc-linux-gnu-library/3.5/quantreg/libs ** R ** data ** demo ** inst ** byte-compile and prepare package for lazy loading ** help *** installing help indices ** building package indices ** installing vignettes ** testing if installed package can be loaded * DONE (quantreg) What does all of this mean? Those lines starting with f95 -fpic ... indicates that the Fortran 95 compiler is at work. And the line starting with gcc -shared ... indicates that the GNU C compiler (gcc) is at work. Then you should get some lines starting with ** R that tells you the compilation step is complete, and R is now finalizing the package installation. Once you get * DONE ... you know that package installation is complete.","title":"Task: install packages from source"},{"location":"rstudio_server_pro/lab_startup_and_packages/#task-configure-rstudio-server-pro-for-binary-packages","text":"You will encounter RStudio Package Manager in a later module in this course. You haven't yet installed RStudio Package Manager, so for now you can use the RStudio demo instance to configure RStudio Server Pro.","title":"Task: Configure RStudio Server Pro for binary packages"},{"location":"rstudio_server_pro/lab_startup_and_packages/#identify-the-binary-package-installation-url","text":"You can browse the demo instance at https://demo.rstudiopm.com Browse to the setup tab, and find the set of buttons that allow you to choose \"Source\" or \"Binary\". Use the drop-down button to select the correct operating system, then copy the URL https://demo.rstudiopm.com/all/__linux__/bionic/latest Once you have the correct URL, you can configure RStudio Server Pro","title":"Identify the binary package installation URL"},{"location":"rstudio_server_pro/lab_startup_and_packages/#configure-rstudio-server-pro","text":"You can find the instructions for configuring RStudio Server Pro in the RStudio Package Manager admin guide , specifically in section 19.1 A Single Repository . Read the instructions, then SSH into your VM instance and edit the file /etc/rstudio/rsession.conf and add the line r-cran-repos = https://demo.rstudiopm.com/all/__linux__/bionic/latest Save the file, then restart RStudio Server: sudo rstudio-server restart Important: also restart your R session. In RStudio Server Pro, you can restart your R session from the menu at /Session / Restart R , or Use the keyboard shortcut Shift + Ctrl + F10","title":"Configure RStudio Server Pro"},{"location":"rstudio_server_pro/lab_startup_and_packages/#test-that-it-works","text":"Once you've restarted RStudio Server Pro, use the R console to check that your repository is correct, and that packages install from binaries without compilation. To do this, repeat the R commands you used earlier: getOption ( \"repos\" ) This time, you should get the URL to the RStudio Package Manager demo site: CRAN \"https://demo.rstudiopm.com/all/__linux__/bionic/latest\" Then force the re-install of the quantreg package: install.packages ( \"quantreg\" ) This should be the complete output: Installing package into \u2018/home/jen/R/x86_64-pc-linux-gnu-library/3.5\u2019 (as \u2018lib\u2019 is unspecified) trying URL 'https://demo.rstudiopm.com/all/__linux__/bionic/latest/src/contrib/quantreg_5.54.tar.gz' Content type 'application/x-gzip' length 1537774 bytes (1.5 MB) ================================================== downloaded 1.5 MB * installing *binary* package \u2018quantreg\u2019 ... * DONE (quantreg) The downloaded source packages are in \u2018/tmpr/RtmpsGfCP8/downloaded_packages\u2019 Note that this step is very quick, and there are also no messages from either the fortran compiler ( f95 ) or the C compiler ( gcc ).","title":"Test that it works"},{"location":"rstudio_server_pro/lab_startup_and_packages/#task-install-the-tidyverse","text":"To speed up the progress of later modules in this course, start the installation of a set of packages you will need later: install.packages ( pkgs = c ( \"tidyverse\" , \"babynames\" , \"shiny\" , \"shinydashboard\" , \"dbplyr\" , \"highcharter\" , \"DT\" , \"htmltools\" , \"quantmod\" , \"dygraphs\" , \"forecast\" , \"highcharter\" , \"odbc\" , \"plumber\" , \"ggplot2\" , \"rmarkdown\" , \"odbc\" )) This process will take several minutes. Once the installation is running, you can carry on with the rest of the course.","title":"Task: Install the tidyverse"},{"location":"rstudio_server_pro/security/","text":"Integrating with your authentication mechanism RStudio Server Pro works with your existing authentication service PAM System user database Active Directory LDAP Proxied Authentication Single sign-on Web based authentication Google OAuth PAM The most common authentication mode is PAM with LDAP or Active Directory . LDAP Lightweight Directory Access Protocol Industry standard directory service Active Directory Directory service for Windows Leverages LDAP and Kerberos Note Your organization most likely already have a PAM configuration. This session has exercises for configuring RStudio Server Pro using PAM with LDAP. Proxied authentication If you are not using PAM, LDAP or Active Directory you should use Proxied Auth . In proxied auth mode, RStudio Server Pro trusts the users sent by your existing authentication system (e.g. Shibboleth). Configure your authentication system to add a special HTTP header for requests sent to RStudio Server Pro. Take precautions to prevent unauthorized traffic from accessing RStudio Server Pro. This will be defined by your firewall and VPC (virtual private cloud) settings. Token based authentication RStudio Server Pro does not natively support token based auth today. However, we intend to support SAML for many of these auth providers in the future: Cloud based: Okta, Azure AD, Duo, Centrify, Google Apps On premises: ADFS, PingIdentity, WSO2, Shibboleth, Auth0, Sailpoint Note RStudio Connect v1.7.4 and later supports SAML Integration with Kerberos Kerberos is a protocol that uses tickets to communicate over a network. It uses secret-key cryptography to provide secure communications over a non-secure network. The benefits of Kerberos are: strong encryption single sign-on (SSO). With Kerberos SSO, users are only prompted once for their user ID and password. Fun fact Kerberos is name after the mythological three-headed dog, Cerberus, who guarded the gates of Hades Painting of Cerberus , by Blake Kerberos tickets Ticket creation Kerberos tickets can be created at time of authentication. These are sometimes referred to as pass through credentials . Database authentication Kerberos is frequently used by an application to authenticate users against a database . For example, Hadoop clusters often require the user to authenticate with a Kerberos ticket. RStudio integration Use PAM to initialize and destroy Kerberos tickets Note: Kerberos tickets can not be auto-generated with proxied auth, but users can generate their own Kerberos tickets via the terminal More information For more information about Kerberos with RStudio, refer to the admin guide . For database integration, see Run As the Logged-in User (Kerberos) This is part of the database best practises at db.rstudio.com Also, read the support articles: How to pass authentication credentials to a database using Kerberos . Handling long-running sessions in RStudio Server Pro with Kerberos Local system accounts Every R user must have a local system accounts regardless of the authentication method you use. This requirement comes from R. Like many programming languages (Python, Scala, etc), R gives user direct access to the operating system on Linux servers. R programmers can: Issue shell commands from the R console Access files and file mounts Download files from the Internet Run apps and authenticate as themselves to databases and other services Provisioning local system accounts You must provision local accounts in one of two ways: You should set up local system accounts manually and then map authenticating users to these accounts. You can also use PAM Sessions to mount users' home directories to the server. Note Not all RStudio products require local system accounts. * RStudio Connect serves end users, not R developers, so it can be configured without local system accounts. RStudio Server Pro Security features RStudio Team products run these open source tools: Linux R programming language Community R packages RStudio Team products run on premises and in the cloud using: Complex networks and firewalls File shares and other storage Databases and other data stores Browser and other end user connections This implies that many security issues pertain to these systems, not to RStudio! Typical security concerns: How are local system accounts provisioned on the server? What permissions / privileges do those local system accounts have? How does the user authenticate using their browser? How to secure browser communications? The next section dicusses security features of RStudio Server Pro RStudio Server Pro security features Clickjacking Will not load inside a browser frame Cookies HTTP only cookies except for the CSRF cookie. SSL TLS v1, TLS v1.1, TLS v1.2 SSL v2, SSL v3 Secure Cookies HSTS Header Cross Site Request Forgery (CSRF): Protection with the R session includes a double submit cookie Note: Also refer to the support article Security features in RStudio Server Pro SSL Certificates Transport layer security (TLS) is a mechanism to establish secure browser communications between a client (e.g. browser) and server (RStudio Server Pro) over an insecure channel. The technology to achieve this a combination of SSL, TLS, and HTTPS. Having transport layer security: Keeps information secure Builds trust Best practice To enable SSL, TLS and HTTPS requires a certificate . You can create a certificate yourself, or obtain a certificate from a trusted authority. Self-signed certificate Server generates its own certificate Easy to generate, but every client has to be configured manually Your server will not automatically be trusted by other clients Certified authority Trusted authority generates certificate Configuration at the network level Your server will be trusted by all clients in your network Your organisation most likely have a formal process for obtaining trusted certificates. Talk to your IT team to provide a certificate for your RStudio products. Running behind a proxy RStudio Server Pro is commonly run behind a reverse proxy A proxy provides a firewall between RStudio Server Pro and other servers on the network Common proxies include Apache Nginx For more information, see the support articles: Running RStudio Server with a Proxy Running (Connect) with a Proxy Running RStudio Package Manager behind a Proxy Apache reverse proxy architecture Disabling access to some features You can selectively disable some features of RStudio Server Pro. The feature limits section of the admin guide describes these limits. If your organisation operates a secure environment, you may want to limit: Shell access File uploads Publishing to the cloud In addition, you can also limit: Git access Package installation Package repository selection WebSockets File downloads (Note that you specify these settings in /etc/rstudio/rsession.conf .) Why root access? RStudio needs root access to provision sessions on behalf of other users The RStudio Server Pro runs under the rstudio-server user in the normal course of operations. RStudio Server runs as the system root user during startup and then drops this privilege and runs as a more restricted user. RStudio Server then re-assumes root privilege for a brief instant when creating R sessions on behalf of users (the server needs to call setresuid when creating the R session, and this call requires root privilege). Security of open source software R is open source software with oversight by the R Foundation All versions of R are equally secure We recommend you install R from pre-compiled binaries R packages (10,000+) are open source and community driven RStudio contributes only a small percentage of all packages Indemnification of R packages is very rare RStudio offers a package manager to help curate and manage packages Data connectivity Connect to your databases with ODBC There are many ways to access data with R You can connect to many data sources using ODBC Supported database drivers The RStudio Pro database drivers supports some of the most common data sources Microsoft SQL Server Oracle Teradata PostgreSQL Apache Hive Apache Impala Apache Cassandra Amazon Athena Amazon Redshift MongoDB Google BigQuery IBM Netezza Salesforce MySQL Database best practises To find recommended best practise for database connections, storing credentials, etc: Visit https://db.rstudio.com/ Your turn class: your-turn-slide Next complete the exercise. Signs of success: You have created a new user jen You can authenticate against sssd as jen You have logged in as jen on RStudio Server Pro","title":"3.2 RStudio Server Pro Security"},{"location":"rstudio_server_pro/security/#integrating-with-your-authentication-mechanism","text":"RStudio Server Pro works with your existing authentication service PAM System user database Active Directory LDAP Proxied Authentication Single sign-on Web based authentication Google OAuth","title":"Integrating with your authentication mechanism"},{"location":"rstudio_server_pro/security/#pam","text":"The most common authentication mode is PAM with LDAP or Active Directory . LDAP Lightweight Directory Access Protocol Industry standard directory service Active Directory Directory service for Windows Leverages LDAP and Kerberos Note Your organization most likely already have a PAM configuration. This session has exercises for configuring RStudio Server Pro using PAM with LDAP.","title":"PAM"},{"location":"rstudio_server_pro/security/#proxied-authentication","text":"If you are not using PAM, LDAP or Active Directory you should use Proxied Auth . In proxied auth mode, RStudio Server Pro trusts the users sent by your existing authentication system (e.g. Shibboleth). Configure your authentication system to add a special HTTP header for requests sent to RStudio Server Pro. Take precautions to prevent unauthorized traffic from accessing RStudio Server Pro. This will be defined by your firewall and VPC (virtual private cloud) settings.","title":"Proxied authentication"},{"location":"rstudio_server_pro/security/#token-based-authentication","text":"RStudio Server Pro does not natively support token based auth today. However, we intend to support SAML for many of these auth providers in the future: Cloud based: Okta, Azure AD, Duo, Centrify, Google Apps On premises: ADFS, PingIdentity, WSO2, Shibboleth, Auth0, Sailpoint Note RStudio Connect v1.7.4 and later supports SAML","title":"Token based authentication"},{"location":"rstudio_server_pro/security/#integration-with-kerberos","text":"Kerberos is a protocol that uses tickets to communicate over a network. It uses secret-key cryptography to provide secure communications over a non-secure network. The benefits of Kerberos are: strong encryption single sign-on (SSO). With Kerberos SSO, users are only prompted once for their user ID and password. Fun fact Kerberos is name after the mythological three-headed dog, Cerberus, who guarded the gates of Hades Painting of Cerberus , by Blake","title":"Integration with Kerberos"},{"location":"rstudio_server_pro/security/#kerberos-tickets","text":"Ticket creation Kerberos tickets can be created at time of authentication. These are sometimes referred to as pass through credentials . Database authentication Kerberos is frequently used by an application to authenticate users against a database . For example, Hadoop clusters often require the user to authenticate with a Kerberos ticket. RStudio integration Use PAM to initialize and destroy Kerberos tickets Note: Kerberos tickets can not be auto-generated with proxied auth, but users can generate their own Kerberos tickets via the terminal","title":"Kerberos tickets"},{"location":"rstudio_server_pro/security/#more-information","text":"For more information about Kerberos with RStudio, refer to the admin guide . For database integration, see Run As the Logged-in User (Kerberos) This is part of the database best practises at db.rstudio.com Also, read the support articles: How to pass authentication credentials to a database using Kerberos . Handling long-running sessions in RStudio Server Pro with Kerberos","title":"More information"},{"location":"rstudio_server_pro/security/#local-system-accounts","text":"Every R user must have a local system accounts regardless of the authentication method you use. This requirement comes from R. Like many programming languages (Python, Scala, etc), R gives user direct access to the operating system on Linux servers. R programmers can: Issue shell commands from the R console Access files and file mounts Download files from the Internet Run apps and authenticate as themselves to databases and other services","title":"Local system accounts"},{"location":"rstudio_server_pro/security/#provisioning-local-system-accounts","text":"You must provision local accounts in one of two ways: You should set up local system accounts manually and then map authenticating users to these accounts. You can also use PAM Sessions to mount users' home directories to the server. Note Not all RStudio products require local system accounts. * RStudio Connect serves end users, not R developers, so it can be configured without local system accounts.","title":"Provisioning local system accounts"},{"location":"rstudio_server_pro/security/#rstudio-server-pro-security-features","text":"RStudio Team products run these open source tools: Linux R programming language Community R packages RStudio Team products run on premises and in the cloud using: Complex networks and firewalls File shares and other storage Databases and other data stores Browser and other end user connections This implies that many security issues pertain to these systems, not to RStudio! Typical security concerns: How are local system accounts provisioned on the server? What permissions / privileges do those local system accounts have? How does the user authenticate using their browser? How to secure browser communications? The next section dicusses security features of RStudio Server Pro","title":"RStudio Server Pro Security features"},{"location":"rstudio_server_pro/security/#rstudio-server-pro-security-features_1","text":"Clickjacking Will not load inside a browser frame Cookies HTTP only cookies except for the CSRF cookie. SSL TLS v1, TLS v1.1, TLS v1.2 SSL v2, SSL v3 Secure Cookies HSTS Header Cross Site Request Forgery (CSRF): Protection with the R session includes a double submit cookie Note: Also refer to the support article Security features in RStudio Server Pro","title":"RStudio Server Pro security features"},{"location":"rstudio_server_pro/security/#ssl-certificates","text":"Transport layer security (TLS) is a mechanism to establish secure browser communications between a client (e.g. browser) and server (RStudio Server Pro) over an insecure channel. The technology to achieve this a combination of SSL, TLS, and HTTPS. Having transport layer security: Keeps information secure Builds trust Best practice To enable SSL, TLS and HTTPS requires a certificate . You can create a certificate yourself, or obtain a certificate from a trusted authority. Self-signed certificate Server generates its own certificate Easy to generate, but every client has to be configured manually Your server will not automatically be trusted by other clients Certified authority Trusted authority generates certificate Configuration at the network level Your server will be trusted by all clients in your network Your organisation most likely have a formal process for obtaining trusted certificates. Talk to your IT team to provide a certificate for your RStudio products.","title":"SSL Certificates"},{"location":"rstudio_server_pro/security/#running-behind-a-proxy","text":"RStudio Server Pro is commonly run behind a reverse proxy A proxy provides a firewall between RStudio Server Pro and other servers on the network Common proxies include Apache Nginx For more information, see the support articles: Running RStudio Server with a Proxy Running (Connect) with a Proxy Running RStudio Package Manager behind a Proxy Apache reverse proxy architecture","title":"Running behind a proxy"},{"location":"rstudio_server_pro/security/#disabling-access-to-some-features","text":"You can selectively disable some features of RStudio Server Pro. The feature limits section of the admin guide describes these limits. If your organisation operates a secure environment, you may want to limit: Shell access File uploads Publishing to the cloud In addition, you can also limit: Git access Package installation Package repository selection WebSockets File downloads (Note that you specify these settings in /etc/rstudio/rsession.conf .)","title":"Disabling access to some features"},{"location":"rstudio_server_pro/security/#why-root-access","text":"RStudio needs root access to provision sessions on behalf of other users The RStudio Server Pro runs under the rstudio-server user in the normal course of operations. RStudio Server runs as the system root user during startup and then drops this privilege and runs as a more restricted user. RStudio Server then re-assumes root privilege for a brief instant when creating R sessions on behalf of users (the server needs to call setresuid when creating the R session, and this call requires root privilege).","title":"Why root access?"},{"location":"rstudio_server_pro/security/#security-of-open-source-software","text":"R is open source software with oversight by the R Foundation All versions of R are equally secure We recommend you install R from pre-compiled binaries R packages (10,000+) are open source and community driven RStudio contributes only a small percentage of all packages Indemnification of R packages is very rare RStudio offers a package manager to help curate and manage packages","title":"Security of open source software"},{"location":"rstudio_server_pro/security/#data-connectivity","text":"","title":"Data connectivity"},{"location":"rstudio_server_pro/security/#connect-to-your-databases-with-odbc","text":"There are many ways to access data with R You can connect to many data sources using ODBC","title":"Connect to your databases with ODBC"},{"location":"rstudio_server_pro/security/#supported-database-drivers","text":"The RStudio Pro database drivers supports some of the most common data sources Microsoft SQL Server Oracle Teradata PostgreSQL Apache Hive Apache Impala Apache Cassandra Amazon Athena Amazon Redshift MongoDB Google BigQuery IBM Netezza Salesforce MySQL","title":"Supported database drivers"},{"location":"rstudio_server_pro/security/#database-best-practises","text":"To find recommended best practise for database connections, storing credentials, etc: Visit https://db.rstudio.com/","title":"Database best practises"},{"location":"rstudio_server_pro/security/#your-turn","text":"class: your-turn-slide Next complete the exercise. Signs of success: You have created a new user jen You can authenticate against sssd as jen You have logged in as jen on RStudio Server Pro","title":"Your turn"},{"location":"rstudio_server_pro/startup_and_packages/","text":"Objectives In this session you: Review the R startup sequence and how the admin can modify this How to use RStudio Package Manager for fast package install from binaries Understanding the R startup sequence How R starts up As the R admin or system administrator for the R environment, you should understand the startup sequence of R. Run startup script Create environment variables in Renviron Run Rprofile script For a very good introduction, read the RViews article R for Enterprise: Understanding R\u2019s Startup Installing binary packages Introduction to RStudio Package Manager You will cover RStudio Package Manager later in this course, but for now it's sufficient to know that you can use Package manager to: Create and host an internal mirror of the CRAN package repository Host package manager in an air-gapped environment, i.e. a server with no external internet access Augment the CRAN packages with additional packages from a git source, e.g. Github, GitLab or your own private git server Add private packages In addition, RStudio Package Manager can serve binary versions of these packages, meaning your users don't have to install all packages from source. Installing binary packages from RStudio Package Manager Now is a good time to introduce one powerful benefit of package manager: You can serve binary versions of R packages using RStudio Package Manager This has a substantial performance benefit for users, since they don't have to compile all packages from source You can read the announcement of binary packages at the RStudio blog: Package Manager 1.1.0 - No Interruptions Note You don't need to install RStudio Package Manager yourself to benefit from this feature. Instead, you can use the RStudio hosted Package Manager instance for installation. This is the main objective of the exercise for this section. Your turn Next complete the exercise. Signs of success: You have configured RStudio Server to install binaries from the RStudio demo instance of Package Manager You have installed some packages and observed that there is no compilation step.","title":"3.3 RStudio Server Pro Startup and packages"},{"location":"rstudio_server_pro/startup_and_packages/#objectives","text":"In this session you: Review the R startup sequence and how the admin can modify this How to use RStudio Package Manager for fast package install from binaries","title":"Objectives"},{"location":"rstudio_server_pro/startup_and_packages/#understanding-the-r-startup-sequence","text":"","title":"Understanding the R startup sequence"},{"location":"rstudio_server_pro/startup_and_packages/#how-r-starts-up","text":"As the R admin or system administrator for the R environment, you should understand the startup sequence of R. Run startup script Create environment variables in Renviron Run Rprofile script For a very good introduction, read the RViews article R for Enterprise: Understanding R\u2019s Startup","title":"How R starts up"},{"location":"rstudio_server_pro/startup_and_packages/#installing-binary-packages","text":"","title":"Installing binary packages"},{"location":"rstudio_server_pro/startup_and_packages/#introduction-to-rstudio-package-manager","text":"You will cover RStudio Package Manager later in this course, but for now it's sufficient to know that you can use Package manager to: Create and host an internal mirror of the CRAN package repository Host package manager in an air-gapped environment, i.e. a server with no external internet access Augment the CRAN packages with additional packages from a git source, e.g. Github, GitLab or your own private git server Add private packages In addition, RStudio Package Manager can serve binary versions of these packages, meaning your users don't have to install all packages from source.","title":"Introduction to RStudio Package Manager"},{"location":"rstudio_server_pro/startup_and_packages/#installing-binary-packages-from-rstudio-package-manager","text":"Now is a good time to introduce one powerful benefit of package manager: You can serve binary versions of R packages using RStudio Package Manager This has a substantial performance benefit for users, since they don't have to compile all packages from source You can read the announcement of binary packages at the RStudio blog: Package Manager 1.1.0 - No Interruptions Note You don't need to install RStudio Package Manager yourself to benefit from this feature. Instead, you can use the RStudio hosted Package Manager instance for installation. This is the main objective of the exercise for this section.","title":"Installing binary packages from RStudio Package Manager"},{"location":"rstudio_server_pro/startup_and_packages/#your-turn","text":"Next complete the exercise. Signs of success: You have configured RStudio Server to install binaries from the RStudio demo instance of Package Manager You have installed some packages and observed that there is no compilation step.","title":"Your turn"},{"location":"troubleshooting/lab_troubleshoot/","text":"Exercise 1: New version of R In this exercise you'll determine why a new version of R added to the server does not work with RStudio Server Pro. Hint: Use sudo su or sudo -i to open an interactive root prompt instead of typing sudo with every command. First, add the pre-compiled version of R to the server: sudo cp /usr/share/class/pro_admin_training_assets/06_troubleshooting/3.0.0.tar.gz /opt/R/ cd /opt/R sudo tar xf 3 .0.0.tar.gz ls -la Now, restart RStudio Server for the new version of R to be detected: sudo service rstudio-server stop sudo service rstudio-server start Any errors? Are any errors observed? Review the output of: sudo service rstudio-server status -l sudo journalctl -u rstudio-server Errors ERROR R shared library (/opt/R/3.0.0/lib/R/lib/libR.so) not found. If this is a custom build of R, was it built with the --enable-R-shlib option? Things to check How do you investigate this further? Do you have permissions to access libR.so if it exists? sudo namei -l /opt/R/3.0.0/lib/R/lib/libR.so Does libR.so exist anywhere else? sudo updatedb sudo locate libR.so updatedb updates the database used by locate What ./configure flags was this version of R compiled with? Was it built with the --enable-R-shlib option? grep configure /opt/R/3.0.0/lib/R/etc/Makeconf Back to square one Once finished, remove the version of R and start the service: sudo service rstudio-server stop sudo rm -rf /opt/R/3.0.0 sudo service rstudio-server start Exercise 2: Troubleshooting an existing R version In this exercise you'll determine why an existing version of R on the server does not work for users anymore. First, execute the existing_R_version script to begin the scenario: cd /usr/share/class/pro_admin_training_assets/06_troubleshooting/ sudo chmod +x existing_R_version sudo ./existing_R_version Now, restart RStudio Server. sudo service rstudio-server stop sudo service rstudio-server start Are any errors observed? Review the output of: sudo service rstudio-server status -l sudo journalctl -u rstudio-server sudo service rstudio-server stop sudo rstudio-server verify-installation sudo service rstudio-server start Errors WARNING R version home directory not found: /opt/R/3.5.1/lib/R; Things to check How do you investigate this further? Does the home directory exist for R 3.5.1 and are the permissions OK? sudo ls -la /opt/R/3.5.1/lib/R Was it detected by RStudio Server Pro in this internal file? cat /var/lib/rstudio-server/r-versions This undocumented r-versions file contains information regarding the R versions detected by RStudio Server Pro Can you launch that version of R from the command line? /opt/R/3.5.1/bin/R What have you missed? Was there any command tried when troubleshooting the last R issue? Hint: namei -l /opt/R/3.5.1/bin/R Once the issue has been identified, please correct and restart the service. Solution The permissions on /opt/R/3.5.1 were restricted to rwx by root only. This is a common oversight when installing additional versions of R. To resolve, reset permissions to allow r-x by all: sudo chmod 755 /opt/R/3.5.1/ Troubleshooting an R session crash In this exercise, your users have reported that after logging into Rstudio Server Pro, the session crashes with an Unable to connect to service error . Maintenance was performed recently by your IT group. To begin the scenario, execute the r_Session_crash script: cd /usr/share/class/pro_admin_training_assets/06_troubleshooting/ sudo chmod +x r_Session_crash sudo ./r_Session_crash Are you able to reproduce the issue with your admin-user by logging into RStudio Server Pro or by starting a new session? Investigation How do you investigate the error, Unable to connect to service , further? Does the rstudio-server.log contain anything relevant? tail -n 30 /var/lib/rstudio-server/monitor/log/rstudio-server.log What would cause an inability to find libR.so ? Does disabling the execution of the shell profiles resolve the issue? To try, edit the rserver.conf file: /etc/rstudio/rserver.conf rsession-no-profile=1 Then restart the service: service rstudio-server stop service rstudio-server start Are you still able to reproduce the issue with your admin-user by logging into RStudio Server Pro or by starting a new session? This option, to disable startup scripts, is a good way to troubleshoot the inability for sessions to launch, as it could indicate a conflict is occuring due to environment variables being set in the shell profiles. To track down the source of the issue, review these common startup files: /etc/profile ~/.bash_profile ~/.bash_login ~/.profile Does anything appear inaccurate? Solution The /etc/profile script modified the LD_LIBRARY_PATH to an invalid value. Remember to modify the /etc/profile script to remove the invalid line and comment out rsession-no-profile=1 in your /etc/rstudio/rserver.conf file.","title":"9.2 Lab:  Troubleshooting"},{"location":"troubleshooting/lab_troubleshoot/#exercise-1-new-version-of-r","text":"In this exercise you'll determine why a new version of R added to the server does not work with RStudio Server Pro. Hint: Use sudo su or sudo -i to open an interactive root prompt instead of typing sudo with every command. First, add the pre-compiled version of R to the server: sudo cp /usr/share/class/pro_admin_training_assets/06_troubleshooting/3.0.0.tar.gz /opt/R/ cd /opt/R sudo tar xf 3 .0.0.tar.gz ls -la Now, restart RStudio Server for the new version of R to be detected: sudo service rstudio-server stop sudo service rstudio-server start","title":"Exercise 1: New version of R"},{"location":"troubleshooting/lab_troubleshoot/#any-errors","text":"Are any errors observed? Review the output of: sudo service rstudio-server status -l sudo journalctl -u rstudio-server","title":"Any errors?"},{"location":"troubleshooting/lab_troubleshoot/#errors","text":"ERROR R shared library (/opt/R/3.0.0/lib/R/lib/libR.so) not found. If this is a custom build of R, was it built with the --enable-R-shlib option?","title":"Errors"},{"location":"troubleshooting/lab_troubleshoot/#things-to-check","text":"How do you investigate this further? Do you have permissions to access libR.so if it exists? sudo namei -l /opt/R/3.0.0/lib/R/lib/libR.so Does libR.so exist anywhere else? sudo updatedb sudo locate libR.so updatedb updates the database used by locate What ./configure flags was this version of R compiled with? Was it built with the --enable-R-shlib option? grep configure /opt/R/3.0.0/lib/R/etc/Makeconf","title":"Things to check"},{"location":"troubleshooting/lab_troubleshoot/#back-to-square-one","text":"Once finished, remove the version of R and start the service: sudo service rstudio-server stop sudo rm -rf /opt/R/3.0.0 sudo service rstudio-server start","title":"Back to square one"},{"location":"troubleshooting/lab_troubleshoot/#exercise-2-troubleshooting-an-existing-r-version","text":"In this exercise you'll determine why an existing version of R on the server does not work for users anymore. First, execute the existing_R_version script to begin the scenario: cd /usr/share/class/pro_admin_training_assets/06_troubleshooting/ sudo chmod +x existing_R_version sudo ./existing_R_version Now, restart RStudio Server. sudo service rstudio-server stop sudo service rstudio-server start Are any errors observed? Review the output of: sudo service rstudio-server status -l sudo journalctl -u rstudio-server sudo service rstudio-server stop sudo rstudio-server verify-installation sudo service rstudio-server start","title":"Exercise 2: Troubleshooting an existing R version"},{"location":"troubleshooting/lab_troubleshoot/#errors_1","text":"WARNING R version home directory not found: /opt/R/3.5.1/lib/R;","title":"Errors"},{"location":"troubleshooting/lab_troubleshoot/#things-to-check_1","text":"How do you investigate this further? Does the home directory exist for R 3.5.1 and are the permissions OK? sudo ls -la /opt/R/3.5.1/lib/R Was it detected by RStudio Server Pro in this internal file? cat /var/lib/rstudio-server/r-versions This undocumented r-versions file contains information regarding the R versions detected by RStudio Server Pro Can you launch that version of R from the command line? /opt/R/3.5.1/bin/R What have you missed? Was there any command tried when troubleshooting the last R issue? Hint: namei -l /opt/R/3.5.1/bin/R Once the issue has been identified, please correct and restart the service.","title":"Things to check"},{"location":"troubleshooting/lab_troubleshoot/#solution","text":"The permissions on /opt/R/3.5.1 were restricted to rwx by root only. This is a common oversight when installing additional versions of R. To resolve, reset permissions to allow r-x by all: sudo chmod 755 /opt/R/3.5.1/","title":"Solution"},{"location":"troubleshooting/lab_troubleshoot/#troubleshooting-an-r-session-crash","text":"In this exercise, your users have reported that after logging into Rstudio Server Pro, the session crashes with an Unable to connect to service error . Maintenance was performed recently by your IT group. To begin the scenario, execute the r_Session_crash script: cd /usr/share/class/pro_admin_training_assets/06_troubleshooting/ sudo chmod +x r_Session_crash sudo ./r_Session_crash Are you able to reproduce the issue with your admin-user by logging into RStudio Server Pro or by starting a new session?","title":"Troubleshooting an R session crash"},{"location":"troubleshooting/lab_troubleshoot/#investigation","text":"How do you investigate the error, Unable to connect to service , further? Does the rstudio-server.log contain anything relevant? tail -n 30 /var/lib/rstudio-server/monitor/log/rstudio-server.log What would cause an inability to find libR.so ? Does disabling the execution of the shell profiles resolve the issue? To try, edit the rserver.conf file: /etc/rstudio/rserver.conf rsession-no-profile=1 Then restart the service: service rstudio-server stop service rstudio-server start Are you still able to reproduce the issue with your admin-user by logging into RStudio Server Pro or by starting a new session? This option, to disable startup scripts, is a good way to troubleshoot the inability for sessions to launch, as it could indicate a conflict is occuring due to environment variables being set in the shell profiles. To track down the source of the issue, review these common startup files: /etc/profile ~/.bash_profile ~/.bash_login ~/.profile Does anything appear inaccurate?","title":"Investigation"},{"location":"troubleshooting/lab_troubleshoot/#solution_1","text":"The /etc/profile script modified the LD_LIBRARY_PATH to an invalid value. Remember to modify the /etc/profile script to remove the invalid line and comment out rsession-no-profile=1 in your /etc/rstudio/rserver.conf file.","title":"Solution"},{"location":"troubleshooting/troubleshoot/","text":"Troubleshooting RStudio Team products In this session you will learn: First-hand from the RStudio Support team about common pitfalls About tools for identifying the root cause Other tips and techniques to stay on the happy path Introduction General troubleshooting tips Identify what the error is and where it's coming from An error reported in the IDE might arise from: User code, an R package, or R itself The RStudio IDE How widespread is this issue? Does it affect one user, the entire server, or the whole cluster? Can you reproduce the problem? Identify the root cause of the error Any recent changes? Specific users or groups involved? Specific code being run? Change one thing at a time to try and isolate the issue Things RStudio Support looks at (and you should too): Log files R Local environment and environment variables Common issues: Licensing Configuration Authentication Network issues Log files RStudio log files Product Log file RStudio Server Pro /var/lib/rstudio-server/monitor/log/rstudio-server.log Shiny Server Pro /var/log/shiny-server.log RStudio Connect /var/log/rstudio-connect.log Package Manager /var/log/rstudio-pm.log System log files Area Log file Server log files /var/log/syslog OR /var/log/messages Authentication logs /var/log/auth.log OR /var/log/secure For RStudio Connect deployment issues: Deployment log generated in the console or retrieved with library ( rsconnect ) rsconnect :: showLogs () Log file example Troubleshooting R Troubleshooting R Almost all RStudio products depend on R being installed successfully to run. Look for errors related to R in the server logs Can R be launched manually and can the user's code be run in R without any errors? How was R installed? From source or pre-compiled binaries ? If so, were all correct flags and capabilities set? grep configure R_HOME/etc/Makeconf Troubleshooting R (continued) Are all necessary dependencies installed? apt-get build-dep r-base yum-builddep R Are the permissions set correctly to allow r-x (read and execute) by all? namei -l /path/to/R Troubleshooting R (multiple versions) Are there multiple versions of R on the system? apt-get install mlocate updatedb locate libR.so ## locate libR.so /opt/R/3.4.4/lib/R/lib/libR.so /opt/R/3.5.1/lib/R/lib/libR.so If so, see questions above for all versions in addition to checking that the expected version is loaded. Troubleshooting the environment Local environment What operating system are you running on? uname -a cat /etc/*-release Are you running with load balancing or in a virtual container such as Docker, etc? Environment variables Does your setup rely on specific environment variables to be set correctly? If so, are those set correctly in R as well as RStudio? Proxy settings Java Database connections System library path issues For example, LD_LIBRARY_PATH , PATH , etc. R pulls from several startup files Refer to the R Views blog article \"Understanding R\u2019s Startup\" Configuration Look for any errors in the startup. You can view the live log during startup using tail -f /path/to/log Read through the admin guides and make sure you have the correct formatting Make sure you're on the right version of the product compared to the admin guide! Expired licenses Expired license Expired license Things to try: Check time and time zone timedatectl Resync if needed, e.g. sudo hwclock -w Restart Deactivation tool: http://apps.rstudio.com/deactivate-license/ Long-term solutions Consider switching to offline setup RStudio is working on improvements Authentication Authentication Difficult for RStudio Support to troubleshoot as it depends on external configuration values unknown to us. Does it work outside of the RStudio product? Often possible to copy over working setup from other systems or services. For RStudio Server Pro pamtester utility lets you test outside RStudio systems. sudo /usr/lib/rstudio-server/bin/pamtester \\ --verbose rstudio <username> authenticate Check server log files including access.log files. Check connections to any external authentication providers Kerberos, Active Directory, etc. Network issues Network issues Network issues are outsidet the scope of the RStudio support SLA . This means we're limited on the help we can provide. Things to check: Connectivity SSL / certificate Firewall / security / proxy settings Helpful resources Helpful resources RStudio documentation Document Location Admin guides / user guides https://docs.rstudio.com FAQs / articles https://support.rstudio.com Shiny docs http://shiny.rstudio.com/articles/ Other resources Document Location RStudio Community https://community.rstudio.com RViews blog https://rviews.rstudio.com/ License deactivation app http://apps.rstudio.com/deactivate-license/ Working with support Working with support Things that help: Describe error messages / what users are seeing Describe system information OS, R version, product version Attach server log files Attach configuration files Getting help: Email the support team at support@rstudio.com , OR File a ticket at https://support.rstudio.com/hc/en-us/requests/new Any questions? Send an email to support@rstudio.com ! Your turn Next complete the exercise.","title":"9.1 Troubleshooting"},{"location":"troubleshooting/troubleshoot/#troubleshooting-rstudio-team-products","text":"In this session you will learn: First-hand from the RStudio Support team about common pitfalls About tools for identifying the root cause Other tips and techniques to stay on the happy path","title":"Troubleshooting RStudio Team products"},{"location":"troubleshooting/troubleshoot/#introduction","text":"","title":"Introduction"},{"location":"troubleshooting/troubleshoot/#general-troubleshooting-tips","text":"Identify what the error is and where it's coming from An error reported in the IDE might arise from: User code, an R package, or R itself The RStudio IDE How widespread is this issue? Does it affect one user, the entire server, or the whole cluster? Can you reproduce the problem? Identify the root cause of the error Any recent changes? Specific users or groups involved? Specific code being run? Change one thing at a time to try and isolate the issue","title":"General troubleshooting tips"},{"location":"troubleshooting/troubleshoot/#things-rstudio-support-looks-at-and-you-should-too","text":"Log files R Local environment and environment variables Common issues: Licensing Configuration Authentication Network issues","title":"Things RStudio Support looks at (and you should too):"},{"location":"troubleshooting/troubleshoot/#log-files","text":"","title":"Log files"},{"location":"troubleshooting/troubleshoot/#rstudio-log-files","text":"Product Log file RStudio Server Pro /var/lib/rstudio-server/monitor/log/rstudio-server.log Shiny Server Pro /var/log/shiny-server.log RStudio Connect /var/log/rstudio-connect.log Package Manager /var/log/rstudio-pm.log","title":"RStudio log files"},{"location":"troubleshooting/troubleshoot/#system-log-files","text":"Area Log file Server log files /var/log/syslog OR /var/log/messages Authentication logs /var/log/auth.log OR /var/log/secure","title":"System log files"},{"location":"troubleshooting/troubleshoot/#for-rstudio-connect-deployment-issues","text":"Deployment log generated in the console or retrieved with library ( rsconnect ) rsconnect :: showLogs ()","title":"For RStudio Connect deployment issues:"},{"location":"troubleshooting/troubleshoot/#log-file-example","text":"","title":"Log file example"},{"location":"troubleshooting/troubleshoot/#troubleshooting-r","text":"","title":"Troubleshooting R"},{"location":"troubleshooting/troubleshoot/#troubleshooting-r_1","text":"Almost all RStudio products depend on R being installed successfully to run. Look for errors related to R in the server logs Can R be launched manually and can the user's code be run in R without any errors? How was R installed? From source or pre-compiled binaries ? If so, were all correct flags and capabilities set? grep configure R_HOME/etc/Makeconf","title":"Troubleshooting R"},{"location":"troubleshooting/troubleshoot/#troubleshooting-r-continued","text":"Are all necessary dependencies installed? apt-get build-dep r-base yum-builddep R Are the permissions set correctly to allow r-x (read and execute) by all? namei -l /path/to/R","title":"Troubleshooting R (continued)"},{"location":"troubleshooting/troubleshoot/#troubleshooting-r-multiple-versions","text":"Are there multiple versions of R on the system? apt-get install mlocate updatedb locate libR.so ## locate libR.so /opt/R/3.4.4/lib/R/lib/libR.so /opt/R/3.5.1/lib/R/lib/libR.so If so, see questions above for all versions in addition to checking that the expected version is loaded.","title":"Troubleshooting R (multiple versions)"},{"location":"troubleshooting/troubleshoot/#troubleshooting-the-environment","text":"","title":"Troubleshooting the environment"},{"location":"troubleshooting/troubleshoot/#local-environment","text":"What operating system are you running on? uname -a cat /etc/*-release Are you running with load balancing or in a virtual container such as Docker, etc?","title":"Local environment"},{"location":"troubleshooting/troubleshoot/#environment-variables","text":"Does your setup rely on specific environment variables to be set correctly? If so, are those set correctly in R as well as RStudio? Proxy settings Java Database connections System library path issues For example, LD_LIBRARY_PATH , PATH , etc. R pulls from several startup files Refer to the R Views blog article \"Understanding R\u2019s Startup\"","title":"Environment variables"},{"location":"troubleshooting/troubleshoot/#configuration","text":"Look for any errors in the startup. You can view the live log during startup using tail -f /path/to/log Read through the admin guides and make sure you have the correct formatting Make sure you're on the right version of the product compared to the admin guide!","title":"Configuration"},{"location":"troubleshooting/troubleshoot/#expired-licenses","text":"","title":"Expired licenses"},{"location":"troubleshooting/troubleshoot/#expired-license","text":"","title":"Expired license"},{"location":"troubleshooting/troubleshoot/#expired-license_1","text":"Things to try: Check time and time zone timedatectl Resync if needed, e.g. sudo hwclock -w Restart Deactivation tool: http://apps.rstudio.com/deactivate-license/ Long-term solutions Consider switching to offline setup RStudio is working on improvements","title":"Expired license"},{"location":"troubleshooting/troubleshoot/#authentication","text":"","title":"Authentication"},{"location":"troubleshooting/troubleshoot/#authentication_1","text":"Difficult for RStudio Support to troubleshoot as it depends on external configuration values unknown to us. Does it work outside of the RStudio product? Often possible to copy over working setup from other systems or services. For RStudio Server Pro pamtester utility lets you test outside RStudio systems. sudo /usr/lib/rstudio-server/bin/pamtester \\ --verbose rstudio <username> authenticate Check server log files including access.log files. Check connections to any external authentication providers Kerberos, Active Directory, etc.","title":"Authentication"},{"location":"troubleshooting/troubleshoot/#network-issues","text":"","title":"Network issues"},{"location":"troubleshooting/troubleshoot/#network-issues_1","text":"Network issues are outsidet the scope of the RStudio support SLA . This means we're limited on the help we can provide. Things to check: Connectivity SSL / certificate Firewall / security / proxy settings","title":"Network issues"},{"location":"troubleshooting/troubleshoot/#helpful-resources","text":"","title":"Helpful resources"},{"location":"troubleshooting/troubleshoot/#helpful-resources_1","text":"RStudio documentation Document Location Admin guides / user guides https://docs.rstudio.com FAQs / articles https://support.rstudio.com Shiny docs http://shiny.rstudio.com/articles/ Other resources Document Location RStudio Community https://community.rstudio.com RViews blog https://rviews.rstudio.com/ License deactivation app http://apps.rstudio.com/deactivate-license/","title":"Helpful resources"},{"location":"troubleshooting/troubleshoot/#working-with-support","text":"","title":"Working with support"},{"location":"troubleshooting/troubleshoot/#working-with-support_1","text":"Things that help: Describe error messages / what users are seeing Describe system information OS, R version, product version Attach server log files Attach configuration files Getting help: Email the support team at support@rstudio.com , OR File a ticket at https://support.rstudio.com/hc/en-us/requests/new","title":"Working with support"},{"location":"troubleshooting/troubleshoot/#any-questions","text":"Send an email to support@rstudio.com !","title":"Any questions?"},{"location":"troubleshooting/troubleshoot/#your-turn","text":"Next complete the exercise.","title":"Your turn"},{"location":"using_rstudio_connect/deploy_markdown/","text":"In this session: Deploy and schedule reports in the form of R Markdown to RStudio Connect. R Markdown Reports Note for non-R users: R Markdown is a form of literate programming, where you embed R code chunks into Markdown text This means you write the body of your document using markdown, with chunks of R interspersed in the markdown. During rendering of the report: The R code chunks are executed Any output from these chunks are rendered as intermediate markdown with embedded figures (for the plots) Then this intermediate Markdown document is converted to the final format The final format is typically HTML, but it could also be PDF, Word or Powerpoint, among many other formats . R Markdown Reports The ultimate report is typically a web page, but many output formats are possible: HTML page PDF document Microsoft Word or PowerPoint document Blog Website ... Solving the copy-and-paste nightmare One of the advantages of creating automated reports is that it shortens the cycle of content creation to content consumption. Rather than manually editing a report, then emailing the report, Connect lets you publish an HTML report, so you can share your work as a content URL. Rendering a report To create a report, press the \"knit\" button Deploying a report to Connect When you deploy a report to Connect, you have choice between publishing: With source code Giving you the option to schedule the report on Connect This is the more flexible option!!! Finished document only Deploying a report (with source code) to Connect Refreshing a report from Connect, and viewing the history Connects keeps the rendered versions of a report, and allows you to manually trigger a referesh (if you published with source code!) Other static content Can Connect host other HTML, Word, PDF, content? Yes, using the rsconnect::deployDoc() function As an admin you will probably not do this, but your R data scientists can use the rsconnect package to script deployments. See rstudio.github.io/rsconnect/ What about plots? Yes Caveats: Only content generated from an R Markdown document can be emailed. Parameterized Markdown Parameterized Markdown Parameterized reports allow users to specify some parameters to customize the analysis in a report. References: Yihui Xie, \"R Markdown, the definitive guide\", chapter 15 R Markdown website RStudio Connect recognizes parameterized Markdown and automatically creates an input pane. Knitting with parameters in the IDE Parameterized Markdown in Connect Collaborators and (optionally) viewers can create a new variant of a report. This lets non-R users create their own customized variants. Private and public reports: For whom: Private : creator. Public: normal access control By who: collaborators Scheduled and emailed reports: Variants inherit all of the functionality of regular reports. Creating a variant parameterized Markdown in Connect Use the fly-out pane on the left to enter new parameters and save variants. Scheduling Scheduling a report If you deployed an R Markdown with code then you can: Schedule the report to run again Email the report You can do this by changing settings in the \"Schedule\" tab You can change: Schedule frequency Whether to republish the output Whether to send email, and the recipients Distribution permissions Collaborators can set up email to: User type Action Viewers Ad-hoc and Scheduled Collaborators Ad-hoc and Scheduled Other Users Scheduled Viewers can send email to: User type Action Themselves Ad-hoc A general purpose scheduler? The idea that you can turn any R script into a scheduled report is very powerful. Some possibilities: ETL (extract, transform, load) Perform a regular batch job Scrape data from website and store in a database Can you give me the same report for XXX? Create a second scheduled report for your favorite company\u2026 \u2026.without leaving Connect Copy and paste nightmare revisited Deployment history The report rendering history is retained for: Scheduled reports On-demand renderings Re-deploys (rendered and static content) As the Connect sys-admin, you can configure how much history to keep See the Jobs section of the Admin guide. Email Emailing reports RStudio Connect allows you to: customize whether or not an email is sent add email attachments specify the email subject line dynamically change the email messages include plots and tables in the email body A convenient interface is the blastula package. For more information, read the corresponding RStudio blog post and inspect the examples in the Blastula Email Gallery Further reading on email customization Study the Connect user guide Chapter 9: R Markdown , in particular: Scheduling Report history Output Metadata Output Files Resource Files Email Customization Simplifying HTML Email Creation with Blastula Databases and scaling Databases and scaling How do you secure data access to databases from R Markdown? All the same rules apply as for Shiny Remember the advice at https://db.rstudio.com/best-practices/ Do you need to worry about scaling reports? No The reason is that R Markdown reports are static HTML, and is not expensive to serve Your turn Next complete the exercise. Signs of success: * You deployed a Markdown report to Connect * You created a scheduled update * You triggered a run of the report and found the email in your Roundcube inbox","title":"5.3 Deploying Rmarkdown"},{"location":"using_rstudio_connect/deploy_markdown/#in-this-session","text":"Deploy and schedule reports in the form of R Markdown to RStudio Connect.","title":"In this session:"},{"location":"using_rstudio_connect/deploy_markdown/#r-markdown-reports","text":"","title":"R Markdown Reports"},{"location":"using_rstudio_connect/deploy_markdown/#note-for-non-r-users","text":"R Markdown is a form of literate programming, where you embed R code chunks into Markdown text This means you write the body of your document using markdown, with chunks of R interspersed in the markdown. During rendering of the report: The R code chunks are executed Any output from these chunks are rendered as intermediate markdown with embedded figures (for the plots) Then this intermediate Markdown document is converted to the final format The final format is typically HTML, but it could also be PDF, Word or Powerpoint, among many other formats .","title":"Note for non-R users:"},{"location":"using_rstudio_connect/deploy_markdown/#r-markdown-reports_1","text":"The ultimate report is typically a web page, but many output formats are possible: HTML page PDF document Microsoft Word or PowerPoint document Blog Website ...","title":"R Markdown Reports"},{"location":"using_rstudio_connect/deploy_markdown/#solving-the-copy-and-paste-nightmare","text":"One of the advantages of creating automated reports is that it shortens the cycle of content creation to content consumption. Rather than manually editing a report, then emailing the report, Connect lets you publish an HTML report, so you can share your work as a content URL.","title":"Solving the copy-and-paste nightmare"},{"location":"using_rstudio_connect/deploy_markdown/#rendering-a-report","text":"To create a report, press the \"knit\" button","title":"Rendering a report"},{"location":"using_rstudio_connect/deploy_markdown/#deploying-a-report-to-connect","text":"When you deploy a report to Connect, you have choice between publishing: With source code Giving you the option to schedule the report on Connect This is the more flexible option!!! Finished document only","title":"Deploying a report to Connect"},{"location":"using_rstudio_connect/deploy_markdown/#deploying-a-report-with-source-code-to-connect","text":"","title":"Deploying a report (with source code) to Connect"},{"location":"using_rstudio_connect/deploy_markdown/#refreshing-a-report-from-connect-and-viewing-the-history","text":"Connects keeps the rendered versions of a report, and allows you to manually trigger a referesh (if you published with source code!)","title":"Refreshing a report from Connect, and viewing the history"},{"location":"using_rstudio_connect/deploy_markdown/#other-static-content","text":"Can Connect host other HTML, Word, PDF, content? Yes, using the rsconnect::deployDoc() function As an admin you will probably not do this, but your R data scientists can use the rsconnect package to script deployments. See rstudio.github.io/rsconnect/ What about plots? Yes Caveats: Only content generated from an R Markdown document can be emailed.","title":"Other static content"},{"location":"using_rstudio_connect/deploy_markdown/#parameterized-markdown","text":"","title":"Parameterized Markdown"},{"location":"using_rstudio_connect/deploy_markdown/#parameterized-markdown_1","text":"Parameterized reports allow users to specify some parameters to customize the analysis in a report. References: Yihui Xie, \"R Markdown, the definitive guide\", chapter 15 R Markdown website RStudio Connect recognizes parameterized Markdown and automatically creates an input pane.","title":"Parameterized Markdown"},{"location":"using_rstudio_connect/deploy_markdown/#knitting-with-parameters-in-the-ide","text":"","title":"Knitting with parameters in the IDE"},{"location":"using_rstudio_connect/deploy_markdown/#parameterized-markdown-in-connect","text":"Collaborators and (optionally) viewers can create a new variant of a report. This lets non-R users create their own customized variants. Private and public reports: For whom: Private : creator. Public: normal access control By who: collaborators Scheduled and emailed reports: Variants inherit all of the functionality of regular reports.","title":"Parameterized Markdown in Connect"},{"location":"using_rstudio_connect/deploy_markdown/#creating-a-variant-parameterized-markdown-in-connect","text":"Use the fly-out pane on the left to enter new parameters and save variants.","title":"Creating a variant parameterized Markdown in Connect"},{"location":"using_rstudio_connect/deploy_markdown/#scheduling","text":"","title":"Scheduling"},{"location":"using_rstudio_connect/deploy_markdown/#scheduling-a-report","text":"If you deployed an R Markdown with code then you can: Schedule the report to run again Email the report You can do this by changing settings in the \"Schedule\" tab You can change: Schedule frequency Whether to republish the output Whether to send email, and the recipients","title":"Scheduling a report"},{"location":"using_rstudio_connect/deploy_markdown/#distribution-permissions","text":"Collaborators can set up email to: User type Action Viewers Ad-hoc and Scheduled Collaborators Ad-hoc and Scheduled Other Users Scheduled Viewers can send email to: User type Action Themselves Ad-hoc","title":"Distribution permissions"},{"location":"using_rstudio_connect/deploy_markdown/#a-general-purpose-scheduler","text":"The idea that you can turn any R script into a scheduled report is very powerful. Some possibilities: ETL (extract, transform, load) Perform a regular batch job Scrape data from website and store in a database","title":"A general purpose scheduler?"},{"location":"using_rstudio_connect/deploy_markdown/#can-you-give-me-the-same-report-for-xxx","text":"Create a second scheduled report for your favorite company\u2026 \u2026.without leaving Connect","title":"Can you give me the same report for XXX?"},{"location":"using_rstudio_connect/deploy_markdown/#copy-and-paste-nightmare-revisited","text":"","title":"Copy and paste nightmare revisited"},{"location":"using_rstudio_connect/deploy_markdown/#deployment-history","text":"The report rendering history is retained for: Scheduled reports On-demand renderings Re-deploys (rendered and static content) As the Connect sys-admin, you can configure how much history to keep See the Jobs section of the Admin guide.","title":"Deployment history"},{"location":"using_rstudio_connect/deploy_markdown/#email","text":"","title":"Email"},{"location":"using_rstudio_connect/deploy_markdown/#emailing-reports","text":"RStudio Connect allows you to: customize whether or not an email is sent add email attachments specify the email subject line dynamically change the email messages include plots and tables in the email body A convenient interface is the blastula package. For more information, read the corresponding RStudio blog post and inspect the examples in the Blastula Email Gallery","title":"Emailing reports"},{"location":"using_rstudio_connect/deploy_markdown/#further-reading-on-email-customization","text":"Study the Connect user guide Chapter 9: R Markdown , in particular: Scheduling Report history Output Metadata Output Files Resource Files Email Customization Simplifying HTML Email Creation with Blastula","title":"Further reading on email customization"},{"location":"using_rstudio_connect/deploy_markdown/#databases-and-scaling","text":"","title":"Databases and scaling"},{"location":"using_rstudio_connect/deploy_markdown/#databases-and-scaling_1","text":"How do you secure data access to databases from R Markdown? All the same rules apply as for Shiny Remember the advice at https://db.rstudio.com/best-practices/ Do you need to worry about scaling reports? No The reason is that R Markdown reports are static HTML, and is not expensive to serve","title":"Databases and scaling"},{"location":"using_rstudio_connect/deploy_markdown/#your-turn","text":"Next complete the exercise. Signs of success: * You deployed a Markdown report to Connect * You created a scheduled update * You triggered a run of the report and found the email in your Roundcube inbox","title":"Your turn"},{"location":"using_rstudio_connect/deploy_plumber/","text":"In this session In this sesssion you: Deploy an API to Connect Introducing APIs What is an API? Human-to-machine communication Machine-to-machine communication What is an API? Application programming interface From Wikipedia : \"In computer programming, an application programming interface (API) is a set of subroutine definitions, communication protocols, and tools for building software. In general terms, it is a set of clearly defined methods of communication between various components\" A mechanism to: Send a request Receive a response Hide the implementation detail What is a REST API? From WikiPedia : Representational state transfer ( REST ) is a software architectural style that defines a set of constraints to be used for creating Web services. Web services that conform to the REST architectural style , called RESTful Web services , provide interoperability between computer systems on the Internet. RESTful Web services allow the requesting systems to access and manipulate textual representations of Web resources by using a uniform and predefined set of stateless operations. In R, you can use the plumber package to turn an R function into REST API. Why APIs from R? Without Connect Data science team generates insight. Insight results in a trained model Model is tossed over the cubicle wall to IT team. 2 months later model is translated into Java from R Java model is extensively validated against original model Java model is plugged into front-end and used for predictions. Model needs to be updated. Repeat and recycle. >> Feedback cycle measured in months With Connect Data science team generates insight. Insight results in a trained model Users create API and deploy in a matter of days Front-end uses the same API calls for predictions >> Model is updated regularly Hosting an API on Connect Articles about plumber APIs Slack and Plumber, Part One Slack and Plumber, Part Two Plumber Logging REST APIs and Plumber Turning an R function into an API The plumber package lets you create a REST API by merely decorating your existing R source code with special comments https://www.rplumber.io/docs/ ## Comment Decorators #* @post /endpoint #* @param name:type description function ( name = default , req ) { # deserialize json request # do R stuff # serialize result to json } APIs on Connect Connect supports the plumber package. RStudio Connect automatically: * manages the dependent packages and files of your API * recreates an environment closely mimicking your local development environment on the server. In other words, Connect deploys the same bundling strategy as for Shiny apps In addition, Connect manages parallel processes: automatically manages the number of R processes necessary to handle the current load balances incoming traffic across all available processes It can also shut down idle processes when they\u2019re not in use. This allows you to run the appropriate number of R processes to scale your capacity to accommodate the current load. Running an API from the IDE When you click \"Run API\" in the RStudio IDE, the script will run and you will get a swagger documentation page. Swagger documentation When you test or deploy a plumber API, you get a swagger documentation page. From WikiPedia Swagger is an open-source software framework backed by a large ecosystem of tools that helps developers design, build, document, and consume RESTful web services. While most users identify Swagger by the Swagger UI tool, the Swagger toolset includes support for automated documentation, code generation, and test-case generation Deploying an API to Connect from the IDE Deploy API You can also deploy an API programmatically using the rsconnect package. rsconnect :: deployAPI ( \".\" , server = ... , account = ... ) API authentication API authentication When submitting an API request, the sender must authenticate with an API Key: API Keys are tied to users, not APIs Service Accounts are OK Treat them like passwords! Request Header: Authorization: Key ABCDEFGHIJKLMNO Generating an API key on Connect Authenticated Request Restrict access to the sample API to your user. Set up an API key Make a request: curl -X GET \"<server_address>/mpg?new_hp=300\" -H \"accept: application/json\" -H \"Authorization: Key <>\" Scaling APIs Scaling APIs How do APIs scale? APIs are stateless... and they should do small amounts of work. So, back to the analogy, they are more like a bartender than a chef. (You still might want more than one in some cases, and prep work can still help). Connect runtime settings for APIs To control the number of processes available to your API in Connect, use the Runtime settings. These settings are analogous to the runtime settings for Shiny apps. Refer to Applications & APIs in the Connect Admin Guide Your turn Next complete the exercise. Signs of success: You have published an API to Connect","title":"5.5 Deploying plumber APIs"},{"location":"using_rstudio_connect/deploy_plumber/#in-this-session","text":"In this sesssion you: Deploy an API to Connect","title":"In this session"},{"location":"using_rstudio_connect/deploy_plumber/#introducing-apis","text":"","title":"Introducing APIs"},{"location":"using_rstudio_connect/deploy_plumber/#what-is-an-api","text":"Human-to-machine communication Machine-to-machine communication","title":"What is an API?"},{"location":"using_rstudio_connect/deploy_plumber/#what-is-an-api_1","text":"Application programming interface From Wikipedia : \"In computer programming, an application programming interface (API) is a set of subroutine definitions, communication protocols, and tools for building software. In general terms, it is a set of clearly defined methods of communication between various components\" A mechanism to: Send a request Receive a response Hide the implementation detail","title":"What is an API?"},{"location":"using_rstudio_connect/deploy_plumber/#what-is-a-rest-api","text":"From WikiPedia : Representational state transfer ( REST ) is a software architectural style that defines a set of constraints to be used for creating Web services. Web services that conform to the REST architectural style , called RESTful Web services , provide interoperability between computer systems on the Internet. RESTful Web services allow the requesting systems to access and manipulate textual representations of Web resources by using a uniform and predefined set of stateless operations. In R, you can use the plumber package to turn an R function into REST API.","title":"What is a REST API?"},{"location":"using_rstudio_connect/deploy_plumber/#why-apis-from-r","text":"Without Connect Data science team generates insight. Insight results in a trained model Model is tossed over the cubicle wall to IT team. 2 months later model is translated into Java from R Java model is extensively validated against original model Java model is plugged into front-end and used for predictions. Model needs to be updated. Repeat and recycle. >> Feedback cycle measured in months With Connect Data science team generates insight. Insight results in a trained model Users create API and deploy in a matter of days Front-end uses the same API calls for predictions >> Model is updated regularly","title":"Why APIs from R?"},{"location":"using_rstudio_connect/deploy_plumber/#hosting-an-api-on-connect","text":"","title":"Hosting an API on Connect"},{"location":"using_rstudio_connect/deploy_plumber/#articles-about-plumber-apis","text":"Slack and Plumber, Part One Slack and Plumber, Part Two Plumber Logging REST APIs and Plumber","title":"Articles about plumber APIs"},{"location":"using_rstudio_connect/deploy_plumber/#turning-an-r-function-into-an-api","text":"The plumber package lets you create a REST API by merely decorating your existing R source code with special comments https://www.rplumber.io/docs/ ## Comment Decorators #* @post /endpoint #* @param name:type description function ( name = default , req ) { # deserialize json request # do R stuff # serialize result to json }","title":"Turning an R function into an API"},{"location":"using_rstudio_connect/deploy_plumber/#apis-on-connect","text":"Connect supports the plumber package. RStudio Connect automatically: * manages the dependent packages and files of your API * recreates an environment closely mimicking your local development environment on the server. In other words, Connect deploys the same bundling strategy as for Shiny apps In addition, Connect manages parallel processes: automatically manages the number of R processes necessary to handle the current load balances incoming traffic across all available processes It can also shut down idle processes when they\u2019re not in use. This allows you to run the appropriate number of R processes to scale your capacity to accommodate the current load.","title":"APIs on Connect"},{"location":"using_rstudio_connect/deploy_plumber/#running-an-api-from-the-ide","text":"When you click \"Run API\" in the RStudio IDE, the script will run and you will get a swagger documentation page.","title":"Running an API from the IDE"},{"location":"using_rstudio_connect/deploy_plumber/#swagger-documentation","text":"When you test or deploy a plumber API, you get a swagger documentation page. From WikiPedia Swagger is an open-source software framework backed by a large ecosystem of tools that helps developers design, build, document, and consume RESTful web services. While most users identify Swagger by the Swagger UI tool, the Swagger toolset includes support for automated documentation, code generation, and test-case generation","title":"Swagger documentation"},{"location":"using_rstudio_connect/deploy_plumber/#deploying-an-api-to-connect-from-the-ide","text":"","title":"Deploying an API to Connect from the IDE"},{"location":"using_rstudio_connect/deploy_plumber/#deploy-api","text":"You can also deploy an API programmatically using the rsconnect package. rsconnect :: deployAPI ( \".\" , server = ... , account = ... )","title":"Deploy API"},{"location":"using_rstudio_connect/deploy_plumber/#api-authentication","text":"","title":"API authentication"},{"location":"using_rstudio_connect/deploy_plumber/#api-authentication_1","text":"When submitting an API request, the sender must authenticate with an API Key: API Keys are tied to users, not APIs Service Accounts are OK Treat them like passwords! Request Header: Authorization: Key ABCDEFGHIJKLMNO","title":"API authentication"},{"location":"using_rstudio_connect/deploy_plumber/#generating-an-api-key-on-connect","text":"","title":"Generating an API key on Connect"},{"location":"using_rstudio_connect/deploy_plumber/#authenticated-request","text":"Restrict access to the sample API to your user. Set up an API key Make a request: curl -X GET \"<server_address>/mpg?new_hp=300\" -H \"accept: application/json\" -H \"Authorization: Key <>\"","title":"Authenticated Request"},{"location":"using_rstudio_connect/deploy_plumber/#scaling-apis","text":"","title":"Scaling APIs"},{"location":"using_rstudio_connect/deploy_plumber/#scaling-apis_1","text":"How do APIs scale? APIs are stateless... and they should do small amounts of work. So, back to the analogy, they are more like a bartender than a chef. (You still might want more than one in some cases, and prep work can still help).","title":"Scaling APIs"},{"location":"using_rstudio_connect/deploy_plumber/#connect-runtime-settings-for-apis","text":"To control the number of processes available to your API in Connect, use the Runtime settings. These settings are analogous to the runtime settings for Shiny apps. Refer to Applications & APIs in the Connect Admin Guide","title":"Connect runtime settings for APIs"},{"location":"using_rstudio_connect/deploy_plumber/#your-turn","text":"Next complete the exercise. Signs of success: You have published an API to Connect","title":"Your turn"},{"location":"using_rstudio_connect/deploy_shiny/","text":"In this session: Deploy a shiny app that connects to a database Understand considerations for connecting to data from a Shiny app Learn how to scale a Shiny App Accessing a database Connecting to a database Most R applications will access external data, often from databases. All of the RStudio best practise recommendations for working with databases is summarized at http://db.rstudio.com/ Accessing Remote Data Content on Connect accesses data via R. This raises three primary concerns: How to connect to data How to secure data How to deploy content that connects to data Database connections The database connection is defined in two files on your server: File Location Contains odbc.ini /etc/odbc.ini Data Source Name (DSN) information, containing the connection options odbcinst.ini /etc/odbcinst.ini Contains the driver options Inside the odbc files The odbc.ini defines the connection string. Notice the driver line: sudo cat /etc/odbc.ini [Postgres Dev] driver = PostgreSQL server = localhost uid = ... pwd = ... port = 5432 database = postgres And observe how there is a matching [PostgreSQL] entry in the odbcinst.ini file: sudo cat /etc/odbcinst.ini [PostgreSQL] Driver = /opt/rstudio-drivers/postgresql/bin/lib/libpostgresqlodbc_sb64.so The RStudio professional database drivers RStudio provides a set of database drivers for use by customers with licenses for Pro products. For more information: Version 1.6.0 release blog post Documentation Data security Data security data at application level Your first option (and most likely scenario) for securing data is at the Application Level See db.rstudio.com , particulary the sections on deployment and managing credentials Pros: cache data wide audience Cons: responsibility on app developer Data security data at data level Your second option is to secure the data at the Data Level . This requires: PAM authentication, AND RunAs LoggedIn user Again, see db.rstudio.com , particulary deployment and managing credentials Pros: Uses existing PAM access control list (ACL) and audit mechanisms Cons: narrower audience OR higher overhead harder to scale !!! note \"Note: Customers often use kerberos in this scenario Deploying Consistency between dev and prod environments is critical ! However, identical environments are not necessary. http://db.rstudio.com/best-practices/portable-code/ Scaling shiny apps Scaling shiny apps Now turn your attention to the second large topic: Scaling your Shiny apps. Multiple users can connect to a single R process. But R is single threaded...! ??? Overview of the utilization scheduler. Demo on the instructor server where and how to change the settings for an app. Video: Shiny app utilization scheduler Notice in this recording how the CPU indicator goes into the red very quickly, as each shiny connection puts a new demand on the database. However, even a 2 CPU machine can handle the 6 simultaneous connections, albeit with some delay to the user: Scaling The mental model for scaling shiny apps is a bit like chefs working in parallel in a kitchen. Every chef can prepare an identical dish for a different customer, and the chefs don't interfere with one another. In this model: Chef: R process Guests: Client Connections Meal: Shiny App Kitchen: Server Multiple connections per R process in a Shiny app How often does my code run? Global: once per R process UI: once per client connection Server: when client sends new inputs to the server ## Run once per R process shared.data <- read.csv ( ... ) ## Run once for every client connection ui <- fluidPage ( ... ) ## Run every time the client sends new input server <- function ( input , output ){ output $ plot <- renderPlot ({ plot ( input $ num ) }) } Support article: Scaling and Performance Tuning in RStudio Connect ??? Briefly discuss how multiple R users can even connect to 1 R process. How are things shared? When can there be contention? Shiny is stateful via the server's R session and the client (websocket communication) \u2026 different from other R code and other web frameworks BUT extremely powerful. Tie in to databases: Mention the pool package and that the https://db.rstudio.com site has more info Multiple R processes Shiny runtime settings RStudio Connect allows for multiple processes of a Shiny app, thus running multiple instances of the app in parallel. The Connect admin guide explains these settings at: Applications Plumber APIs Runtime/Scheduler Conf::2018 video: \"Scaling Shiny\" Watch the video at Scaling Shiny \u2013 Sean Lopp for a demo of 10,000 simultaneous connections . Get the shinyloadtest tools at github. Your turn Next complete the exercise. Signs of success: You modified the runtime settings to run a Shiny app in parallel You have a better intuition of the how to tune the runtime settings for different load scenarios","title":"5.1 Deploying Shiny Apps"},{"location":"using_rstudio_connect/deploy_shiny/#in-this-session","text":"Deploy a shiny app that connects to a database Understand considerations for connecting to data from a Shiny app Learn how to scale a Shiny App","title":"In this session:"},{"location":"using_rstudio_connect/deploy_shiny/#accessing-a-database","text":"","title":"Accessing a database"},{"location":"using_rstudio_connect/deploy_shiny/#connecting-to-a-database","text":"Most R applications will access external data, often from databases. All of the RStudio best practise recommendations for working with databases is summarized at http://db.rstudio.com/","title":"Connecting to a database"},{"location":"using_rstudio_connect/deploy_shiny/#accessing-remote-data","text":"Content on Connect accesses data via R. This raises three primary concerns: How to connect to data How to secure data How to deploy content that connects to data","title":"Accessing Remote Data"},{"location":"using_rstudio_connect/deploy_shiny/#database-connections","text":"The database connection is defined in two files on your server: File Location Contains odbc.ini /etc/odbc.ini Data Source Name (DSN) information, containing the connection options odbcinst.ini /etc/odbcinst.ini Contains the driver options","title":"Database connections"},{"location":"using_rstudio_connect/deploy_shiny/#inside-the-odbc-files","text":"The odbc.ini defines the connection string. Notice the driver line: sudo cat /etc/odbc.ini [Postgres Dev] driver = PostgreSQL server = localhost uid = ... pwd = ... port = 5432 database = postgres And observe how there is a matching [PostgreSQL] entry in the odbcinst.ini file: sudo cat /etc/odbcinst.ini [PostgreSQL] Driver = /opt/rstudio-drivers/postgresql/bin/lib/libpostgresqlodbc_sb64.so","title":"Inside the odbc files"},{"location":"using_rstudio_connect/deploy_shiny/#the-rstudio-professional-database-drivers","text":"RStudio provides a set of database drivers for use by customers with licenses for Pro products. For more information: Version 1.6.0 release blog post Documentation","title":"The RStudio professional database drivers"},{"location":"using_rstudio_connect/deploy_shiny/#data-security","text":"","title":"Data security"},{"location":"using_rstudio_connect/deploy_shiny/#data-security-data-at-application-level","text":"Your first option (and most likely scenario) for securing data is at the Application Level See db.rstudio.com , particulary the sections on deployment and managing credentials Pros: cache data wide audience Cons: responsibility on app developer","title":"Data security data at application level"},{"location":"using_rstudio_connect/deploy_shiny/#data-security-data-at-data-level","text":"Your second option is to secure the data at the Data Level . This requires: PAM authentication, AND RunAs LoggedIn user Again, see db.rstudio.com , particulary deployment and managing credentials Pros: Uses existing PAM access control list (ACL) and audit mechanisms Cons: narrower audience OR higher overhead harder to scale !!! note \"Note: Customers often use kerberos in this scenario","title":"Data security data at data level"},{"location":"using_rstudio_connect/deploy_shiny/#deploying","text":"Consistency between dev and prod environments is critical ! However, identical environments are not necessary. http://db.rstudio.com/best-practices/portable-code/","title":"Deploying"},{"location":"using_rstudio_connect/deploy_shiny/#scaling-shiny-apps","text":"","title":"Scaling shiny apps"},{"location":"using_rstudio_connect/deploy_shiny/#scaling-shiny-apps_1","text":"Now turn your attention to the second large topic: Scaling your Shiny apps. Multiple users can connect to a single R process. But R is single threaded...! ??? Overview of the utilization scheduler. Demo on the instructor server where and how to change the settings for an app.","title":"Scaling shiny apps"},{"location":"using_rstudio_connect/deploy_shiny/#video-shiny-app-utilization-scheduler","text":"Notice in this recording how the CPU indicator goes into the red very quickly, as each shiny connection puts a new demand on the database. However, even a 2 CPU machine can handle the 6 simultaneous connections, albeit with some delay to the user:","title":"Video: Shiny app utilization scheduler"},{"location":"using_rstudio_connect/deploy_shiny/#scaling","text":"The mental model for scaling shiny apps is a bit like chefs working in parallel in a kitchen. Every chef can prepare an identical dish for a different customer, and the chefs don't interfere with one another. In this model: Chef: R process Guests: Client Connections Meal: Shiny App Kitchen: Server","title":"Scaling"},{"location":"using_rstudio_connect/deploy_shiny/#multiple-connections-per-r-process-in-a-shiny-app","text":"How often does my code run? Global: once per R process UI: once per client connection Server: when client sends new inputs to the server ## Run once per R process shared.data <- read.csv ( ... ) ## Run once for every client connection ui <- fluidPage ( ... ) ## Run every time the client sends new input server <- function ( input , output ){ output $ plot <- renderPlot ({ plot ( input $ num ) }) } Support article: Scaling and Performance Tuning in RStudio Connect ??? Briefly discuss how multiple R users can even connect to 1 R process. How are things shared? When can there be contention? Shiny is stateful via the server's R session and the client (websocket communication) \u2026 different from other R code and other web frameworks BUT extremely powerful. Tie in to databases: Mention the pool package and that the https://db.rstudio.com site has more info","title":"Multiple connections per R process in a Shiny app"},{"location":"using_rstudio_connect/deploy_shiny/#multiple-r-processes","text":"","title":"Multiple R processes"},{"location":"using_rstudio_connect/deploy_shiny/#shiny-runtime-settings","text":"RStudio Connect allows for multiple processes of a Shiny app, thus running multiple instances of the app in parallel. The Connect admin guide explains these settings at: Applications Plumber APIs Runtime/Scheduler","title":"Shiny runtime settings"},{"location":"using_rstudio_connect/deploy_shiny/#conf2018-video-scaling-shiny","text":"Watch the video at Scaling Shiny \u2013 Sean Lopp for a demo of 10,000 simultaneous connections . Get the shinyloadtest tools at github.","title":"Conf::2018 video: \"Scaling Shiny\""},{"location":"using_rstudio_connect/deploy_shiny/#your-turn","text":"Next complete the exercise. Signs of success: You modified the runtime settings to run a Shiny app in parallel You have a better intuition of the how to tune the runtime settings for different load scenarios","title":"Your turn"},{"location":"using_rstudio_connect/lab_deploy_markdown/","text":"Task: Deploy a report Do: Open 04_report/stocks Knit the report locally Publish to connect This can take up to 10 minutes on first deployment Question: How many ways can you find to publish? Task: Set up a schedule Create a schedule for your report. Modify the settings so this report runs once per day. Configure the setting to send an email when running Manually trigger a run by clicking the \"recycle\" icon in the upper right and then check for the email in RoundCube Task: Create a variant Open the \"Input\" pane on the far left of the Connect window. (It initially appears as a small rotated tab against the left margin of the application.) Create a variant of the report. Use any valid stock ticker, e.g. AMZN, IBM or MSFT. Save the variant. Task: View the history Find the \"history\" pane by clicking the circle-and-dots \"More\" icon in the upper right and inspect the various renderings of the report.","title":"5.4 Lab:  Deploying Rmarkdown"},{"location":"using_rstudio_connect/lab_deploy_markdown/#task-deploy-a-report","text":"Do: Open 04_report/stocks Knit the report locally Publish to connect This can take up to 10 minutes on first deployment Question: How many ways can you find to publish?","title":"Task: Deploy a report"},{"location":"using_rstudio_connect/lab_deploy_markdown/#task-set-up-a-schedule","text":"Create a schedule for your report. Modify the settings so this report runs once per day. Configure the setting to send an email when running Manually trigger a run by clicking the \"recycle\" icon in the upper right and then check for the email in RoundCube","title":"Task: Set up a schedule"},{"location":"using_rstudio_connect/lab_deploy_markdown/#task-create-a-variant","text":"Open the \"Input\" pane on the far left of the Connect window. (It initially appears as a small rotated tab against the left margin of the application.) Create a variant of the report. Use any valid stock ticker, e.g. AMZN, IBM or MSFT. Save the variant.","title":"Task: Create a variant"},{"location":"using_rstudio_connect/lab_deploy_markdown/#task-view-the-history","text":"Find the \"history\" pane by clicking the circle-and-dots \"More\" icon in the upper right and inspect the various renderings of the report.","title":"Task: View the history"},{"location":"using_rstudio_connect/lab_deploy_plumber/","text":"Task: Deploy sample API Deploy the sample API in the folder 05_api . You can deploy using either: Push button deployment The rsconnect package: setwd ( \"05_api\" ) rsconnect :: deployAPI ( \".\" , server = ... , account = ... ) Try out the Swagger Docs for the API Task: Make an authenticated request Your task is to restrict access to the published API, then make an authenticated request from the linux terminal First, restrict access to the sample API to authenticated users only. Then, generate an API key in Connect Make sure you save the API key in a safe place. Treat it like a password! Make a request from bash , filling in YOUR_BASE_URL and YOUR_AUTH_KEY Hint: you get get the base URL for your API by looking at the Swagger docs panel curl -X GET \"YOUR_BASE_URL/mpg?new_hp=300\" -H \"accept: application/json\" -H \"Authorization: Key YOUR_AUTH_KEY\" Video review: Generate an API key Video review: Making an authenticated request","title":"5.6 Lab:  Deploying plumber APIs"},{"location":"using_rstudio_connect/lab_deploy_plumber/#task-deploy-sample-api","text":"Deploy the sample API in the folder 05_api . You can deploy using either: Push button deployment The rsconnect package: setwd ( \"05_api\" ) rsconnect :: deployAPI ( \".\" , server = ... , account = ... ) Try out the Swagger Docs for the API","title":"Task: Deploy sample API"},{"location":"using_rstudio_connect/lab_deploy_plumber/#task-make-an-authenticated-request","text":"Your task is to restrict access to the published API, then make an authenticated request from the linux terminal First, restrict access to the sample API to authenticated users only. Then, generate an API key in Connect Make sure you save the API key in a safe place. Treat it like a password! Make a request from bash , filling in YOUR_BASE_URL and YOUR_AUTH_KEY Hint: you get get the base URL for your API by looking at the Swagger docs panel curl -X GET \"YOUR_BASE_URL/mpg?new_hp=300\" -H \"accept: application/json\" -H \"Authorization: Key YOUR_AUTH_KEY\"","title":"Task: Make an authenticated request"},{"location":"using_rstudio_connect/lab_deploy_plumber/#video-review-generate-an-api-key","text":"","title":"Video review: Generate an API key"},{"location":"using_rstudio_connect/lab_deploy_plumber/#video-review-making-an-authenticated-request","text":"","title":"Video review: Making an authenticated request"},{"location":"using_rstudio_connect/lab_deploy_shiny/","text":"Task: Explore the Connections pane The app 03_databse/app.R is a Shiny application that reads data from a PostGres database. The RStudio IDE has a pane for \"Connections\" that allows you to establish database connections and browse information contained in the database tables. See these support articles: Using RStudio Connections Troubleshooting Connections As well as the article at db.rstudio.com/ RStudio Connections Pane And you can watch this video walkthrough: Task: Deploy a Shiny app with database connection Run the app 03_database/app.R in the IDE to make sure everything works. Notice that the connection gets established by this line of R code: con <- DBI :: dbConnect ( odbc :: odbc (), \"Postgres Dev\" ) Deploy 03_database/app.R to Connect (using the publish button in the Source pane). While you wait, can you figure out how \"PostGres Dev\" is defined? Hint: cat /etc/odbc.ini cat /etc/odbcinst.ini Task: Change runtime settings While you're viewing the deployed app in Connect, find the \"runtime settings\": The Connect admin guide explains these settings at: Applications & APIs Runtime/Scheduler Read this part of the admin guide, then change the settings to allow parallel execution of your app: Setting New value Max processes 6 Min processes 1 Max connections per process 2 Load Factor 0.1 The setting pane looks like this: Task: Load the app Open the metrics dashboard in a new browser tab As an administrator, you can find the \"metrics\" as a pane in the admin dashboard: Return to your app, and progressively open the app in 6 new tabs Do this by pasting the app URL in 6 new browser tabs Each new tab will establish a new connetion to your app. Notice in this recording how the CPU indicator goes into the red very quickly, as each shiny connection puts a new demand on the database. However, even a 2CPU machine can handle the 6 simultaneous connections, albeit with some delay to the user: Simulation: shimmer Open the Shimmer and shiny simulation app at https://colorado.rstudio.com/rsc/shimmer_and_shiny/ Read the instructions Perform the simulation Adjust setting until all the measurements are in the \"blue\" Try to develop an intuitive understanding of the runtime settings. Ideas to try: Increase the number of users Increase the number of requests per user Increase the app response time Then modify the server size and runtime settings until all the indicators are in the \"blue\"","title":"5.2 Lab:  Deploying Shiny Apps"},{"location":"using_rstudio_connect/lab_deploy_shiny/#task-explore-the-connections-pane","text":"The app 03_databse/app.R is a Shiny application that reads data from a PostGres database. The RStudio IDE has a pane for \"Connections\" that allows you to establish database connections and browse information contained in the database tables. See these support articles: Using RStudio Connections Troubleshooting Connections As well as the article at db.rstudio.com/ RStudio Connections Pane And you can watch this video walkthrough:","title":"Task: Explore the Connections pane"},{"location":"using_rstudio_connect/lab_deploy_shiny/#task-deploy-a-shiny-app-with-database-connection","text":"Run the app 03_database/app.R in the IDE to make sure everything works. Notice that the connection gets established by this line of R code: con <- DBI :: dbConnect ( odbc :: odbc (), \"Postgres Dev\" ) Deploy 03_database/app.R to Connect (using the publish button in the Source pane). While you wait, can you figure out how \"PostGres Dev\" is defined? Hint: cat /etc/odbc.ini cat /etc/odbcinst.ini","title":"Task: Deploy a Shiny app with database connection"},{"location":"using_rstudio_connect/lab_deploy_shiny/#task-change-runtime-settings","text":"While you're viewing the deployed app in Connect, find the \"runtime settings\": The Connect admin guide explains these settings at: Applications & APIs Runtime/Scheduler Read this part of the admin guide, then change the settings to allow parallel execution of your app: Setting New value Max processes 6 Min processes 1 Max connections per process 2 Load Factor 0.1 The setting pane looks like this:","title":"Task: Change runtime settings"},{"location":"using_rstudio_connect/lab_deploy_shiny/#task-load-the-app","text":"Open the metrics dashboard in a new browser tab As an administrator, you can find the \"metrics\" as a pane in the admin dashboard: Return to your app, and progressively open the app in 6 new tabs Do this by pasting the app URL in 6 new browser tabs Each new tab will establish a new connetion to your app. Notice in this recording how the CPU indicator goes into the red very quickly, as each shiny connection puts a new demand on the database. However, even a 2CPU machine can handle the 6 simultaneous connections, albeit with some delay to the user:","title":"Task: Load the app"},{"location":"using_rstudio_connect/lab_deploy_shiny/#simulation-shimmer","text":"Open the Shimmer and shiny simulation app at https://colorado.rstudio.com/rsc/shimmer_and_shiny/ Read the instructions Perform the simulation Adjust setting until all the measurements are in the \"blue\" Try to develop an intuitive understanding of the runtime settings. Ideas to try: Increase the number of users Increase the number of requests per user Increase the app response time Then modify the server size and runtime settings until all the indicators are in the \"blue\"","title":"Simulation: shimmer"},{"location":"using_rstudio_package_manager/lab_using_rspm_packages/","text":"Overview In the following exercises, you will: Configure RStudio Server Pro to point to RSPM for a single user Install a package from a repository in RSPM Configure RStudio Server Pro to point to RSPM globally for all users Publish a project to RStudio Connect that fetches packages from RSPM Refer to the RSPM Documentation throughout the exercises, specifically the Configuring RStudio Server section. Task: View CRAN repository setting Run the following in a Console in RStudio Server Pro: getOption ( \"repos\" ) You should see output similar to the following: CRAN \"https://cran.rstudio.com/\" attr (, \"RStudio\" ) [ 1 ] TRUE In RStudio Server Pro, go to Tools > Global Options > Packages and view the Primary CRAN repository that is currently set. Task: Configure packages for one user As an end user, you can configure the RStudio IDE or RStudio Server Pro to point to one or more repositories in RSPM. In this exercise, you will configure projects for one user on your instance of RStudio Server Pro to point to the CRAN repository in your RSPM instance. Navigate to the web interface for your RSPM instance. Choose the CRAN repository called prod-cran , then click on the Setup tab in the top navigation bar, which will provide instructions for Using Packages Inside RStudio . Copy the Repository URL , which will appear similar to http://{IP-ADDRESS}/{REPO-NAME}/latest In RStudio Server Pro, go to Tools > Global Options > Packages . Click on the Change button in the Primary CRAN repository setting. In the Choose Primary Repository dialog, paste the repository URL into the Custom field and click the OK button. Note You can also click on the Add button in the Packages settings to include a repository as a secondary repository instead of the primary repository. Task: Install a new package from RSPM You can install a new package in RStudio and verify that the new package is being downloaded from the repository in RSPM. In RStudio Server Pro, use the console to install a new package: install.packages ( \"abind\" ) In the console logs, verify that the package is being downloaded from the desired repository in RSPM. trying URL 'http://18.188.222.24:4242/prod-cran/latest/src/contrib/abind_1.4-5.tar.gz' Content type 'application/x-gzip' length 21904 bytes ( 21 KB ) ================================================== downloaded 21 KB In the RSPM web interface, navigate to the prod-cran repository that you installed the package from, click on the Packages link in the top navigation bar, open the details page for the abind package, and verify that the Monthly Downloads count is greater than one. Task: Configure packages for all users As an administrator, you can configure all users and projects to point to one or more repositories in RSPM. In this exercise, you will configure all users and projects on your instance of RStudio Server Pro to point to the CRAN repository in your RSPM instance. Open the RStudio Server Pro configuration file /etc/rstudio/rsession.conf in a text editor. Add a line similar to the following to the RStudio Server Pro configuration file, replacing {RSTUDIO-PM-REPO-URL} with the repository URL for the prod-cran repository in RSPM: r-cran-repos ={ RSTUDIO-PM-REPO-URL } Save the RStudio Server Pro configuration file, and restart RStudio Server Pro using the following command: sudo rstudio-server restart Now, all users and projects will fetch packages from the repository in RSPM that you've specified. The documentation for Configuring RStudio Server provides more details and describes additional scenarios for configuring RStudio Server Pro to point to repositories in RSPM. Task: Publish to RStudio Connect Now that you've configured RStudio Server Pro to point to a repository in RSPM, projects that are published to RStudio Connect will fetch packages from RSPM. Open a project (or create a new project) in RStudio Server Pro Publish the project to RStudio Connect How can you confirm that the packages are being served from RStudio Package Manager? View the logs in RStudio Connect for the published asset View the Monthly Downloads count for a package that is used in your project View the usage statistics in RStudio Package Manager Congratulations on completing the RSPM section of this training course! Bonus Task: Next steps with app_02 Previously you tried to deploy app_02 from the course material to RStudio Connect. This failed since the rstudiointernal package was not available. Now you have the tools in place to build a proper solution. Follow the documented steps for Distributing Local Packages to add a new repository that is subscribed to a local source package for rsudiointernal : Create a local source Add local package tar file to source Create a repository Subscribe the repository to the source Get the URL for the new repository from the web interface of RStudio Package Manager. Add the new repository as an additional one in RStudio Server Pro under Tools > Global Options > Packages . Try to publish app_02 from before. In case of error, you can re-install the rstudioninternal package from the new repository using install.packages ( \"rstudiointernal\" ) Note that the app still does not work on RStudio Connect? Can you identify the issue? As an alternative, you could also create a repository based on both CRAN and local source packages following the documented steps for Distributing Local Packages along with CRAN Packages . In that case you would have switched the main repository in RStudio Server Pro instead of adding an additional one.","title":"7.4 Lab:  Using RStudio Package Manager Packages"},{"location":"using_rstudio_package_manager/lab_using_rspm_packages/#overview","text":"In the following exercises, you will: Configure RStudio Server Pro to point to RSPM for a single user Install a package from a repository in RSPM Configure RStudio Server Pro to point to RSPM globally for all users Publish a project to RStudio Connect that fetches packages from RSPM Refer to the RSPM Documentation throughout the exercises, specifically the Configuring RStudio Server section.","title":"Overview"},{"location":"using_rstudio_package_manager/lab_using_rspm_packages/#task-view-cran-repository-setting","text":"Run the following in a Console in RStudio Server Pro: getOption ( \"repos\" ) You should see output similar to the following: CRAN \"https://cran.rstudio.com/\" attr (, \"RStudio\" ) [ 1 ] TRUE In RStudio Server Pro, go to Tools > Global Options > Packages and view the Primary CRAN repository that is currently set.","title":"Task: View CRAN repository setting"},{"location":"using_rstudio_package_manager/lab_using_rspm_packages/#task-configure-packages-for-one-user","text":"As an end user, you can configure the RStudio IDE or RStudio Server Pro to point to one or more repositories in RSPM. In this exercise, you will configure projects for one user on your instance of RStudio Server Pro to point to the CRAN repository in your RSPM instance. Navigate to the web interface for your RSPM instance. Choose the CRAN repository called prod-cran , then click on the Setup tab in the top navigation bar, which will provide instructions for Using Packages Inside RStudio . Copy the Repository URL , which will appear similar to http://{IP-ADDRESS}/{REPO-NAME}/latest In RStudio Server Pro, go to Tools > Global Options > Packages . Click on the Change button in the Primary CRAN repository setting. In the Choose Primary Repository dialog, paste the repository URL into the Custom field and click the OK button. Note You can also click on the Add button in the Packages settings to include a repository as a secondary repository instead of the primary repository.","title":"Task: Configure packages for one user"},{"location":"using_rstudio_package_manager/lab_using_rspm_packages/#task-install-a-new-package-from-rspm","text":"You can install a new package in RStudio and verify that the new package is being downloaded from the repository in RSPM. In RStudio Server Pro, use the console to install a new package: install.packages ( \"abind\" ) In the console logs, verify that the package is being downloaded from the desired repository in RSPM. trying URL 'http://18.188.222.24:4242/prod-cran/latest/src/contrib/abind_1.4-5.tar.gz' Content type 'application/x-gzip' length 21904 bytes ( 21 KB ) ================================================== downloaded 21 KB In the RSPM web interface, navigate to the prod-cran repository that you installed the package from, click on the Packages link in the top navigation bar, open the details page for the abind package, and verify that the Monthly Downloads count is greater than one.","title":"Task: Install a new package from RSPM"},{"location":"using_rstudio_package_manager/lab_using_rspm_packages/#task-configure-packages-for-all-users","text":"As an administrator, you can configure all users and projects to point to one or more repositories in RSPM. In this exercise, you will configure all users and projects on your instance of RStudio Server Pro to point to the CRAN repository in your RSPM instance. Open the RStudio Server Pro configuration file /etc/rstudio/rsession.conf in a text editor. Add a line similar to the following to the RStudio Server Pro configuration file, replacing {RSTUDIO-PM-REPO-URL} with the repository URL for the prod-cran repository in RSPM: r-cran-repos ={ RSTUDIO-PM-REPO-URL } Save the RStudio Server Pro configuration file, and restart RStudio Server Pro using the following command: sudo rstudio-server restart Now, all users and projects will fetch packages from the repository in RSPM that you've specified. The documentation for Configuring RStudio Server provides more details and describes additional scenarios for configuring RStudio Server Pro to point to repositories in RSPM.","title":"Task: Configure packages for all users"},{"location":"using_rstudio_package_manager/lab_using_rspm_packages/#task-publish-to-rstudio-connect","text":"Now that you've configured RStudio Server Pro to point to a repository in RSPM, projects that are published to RStudio Connect will fetch packages from RSPM. Open a project (or create a new project) in RStudio Server Pro Publish the project to RStudio Connect How can you confirm that the packages are being served from RStudio Package Manager? View the logs in RStudio Connect for the published asset View the Monthly Downloads count for a package that is used in your project View the usage statistics in RStudio Package Manager Congratulations on completing the RSPM section of this training course!","title":"Task: Publish to RStudio Connect"},{"location":"using_rstudio_package_manager/lab_using_rspm_packages/#bonus-task-next-steps-with-app_02","text":"Previously you tried to deploy app_02 from the course material to RStudio Connect. This failed since the rstudiointernal package was not available. Now you have the tools in place to build a proper solution. Follow the documented steps for Distributing Local Packages to add a new repository that is subscribed to a local source package for rsudiointernal : Create a local source Add local package tar file to source Create a repository Subscribe the repository to the source Get the URL for the new repository from the web interface of RStudio Package Manager. Add the new repository as an additional one in RStudio Server Pro under Tools > Global Options > Packages . Try to publish app_02 from before. In case of error, you can re-install the rstudioninternal package from the new repository using install.packages ( \"rstudiointernal\" ) Note that the app still does not work on RStudio Connect? Can you identify the issue? As an alternative, you could also create a repository based on both CRAN and local source packages following the documented steps for Distributing Local Packages along with CRAN Packages . In that case you would have switched the main repository in RStudio Server Pro instead of adding an additional one.","title":"Bonus Task: Next steps with app_02"},{"location":"using_rstudio_package_manager/lab_using_rspm_repositories/","text":"Overview In the following exercises, you will: Add new repositories and sources for: Serving packages from CRAN Serving packages from curated CRAN Serving packages from Git Refer to the RSPM Documentation throughout the exercises, specifically the Getting Started: Configuration section. Task: Add a CRAN repository Follow the documented steps for Serving CRAN Packages to add a new repository that is subscribed to the CRAN source. The steps you will perform are outlined as follows: Initiate a sync from the default CRAN source Create a new repository Subscribe the new repository to the default CRAN source You can verify that the new repository has been configured correctly by running: rspm list Which should include the following output: prod-cran - Access CRAN packages - cran ( CRAN ) Task: Explore CRAN repository Navigate to the RSPM web interface in your browser and view the newly created prod-cran repository. Search for the ggplot2 package and determine the following: The newest version of the package that is available The oldest version of the package that is available The license type for this package The command that R users can use to install the latest version of ggplot2 The command that R users can use to install version 2.2.0 of ggplot2 How many packages are imported and suggested by ggplot2 Quiz: CRAN source Which CRAN source does RStudio Package Manager download packages from? The CRAN mirror closest to my location Any available CRAN mirror The RStudio CRAN service ( https://rspm-sync.rstudio.com ) RSPM does not download packages from online sources Answer: The RStudio CRAN service ( https://rspm-sync.rstudio.com ) Is RStudio package manager configured for lazy or eager package downloading by default? Lazy - RSPM only downloads packages as they are requested Eager - RSPM downloads all packages in advance Answer: Lazy - RSPM only downloads packages as they are requested How often does RStudio Package Manager synchronize CRAN metadata by default? Never Once every hour Once every day at midnight Once every week on Sunday On the first day of each month Once every year on Jan 1 Answer: Once every day at midnight Task: Add a curated CRAN repository Follow the documented steps for Serving a Subset of Approved CRAN Packages to add a new repository that is subscribed to a source of approved CRAN packages. Hint: You can also pass in the names of packages directly instead of creating a list of packages, as in: rspm add --packages 'plumber,shiny,ISLR' --source = subset --dryrun Hint: Re-use the transaction ID output from the rspm add command with --dryrun flag. The steps you will perform are outlined as follows: Create a list of packages Initiate a sync from the default CRAN source Create a new source for the approved packages Add the desired packages to the curated CRAN source View the list of proposed packages that will be added to the newly created source Add the proposed packages to the newly created source Create a new repository for the approved packages Subscribe the new repository to the default CRAN source You can verify that the new repository has been configured correctly by running: rspm list Which should include the following output: approved-cran - Approved packages from CRAN - subset ( Curated CRAN ) Navigate to the RSPM web interface in your browser and explore the newly created approved-cran repository. Quiz: Curated CRAN source How does RSPM handle dependencies for curated CRAN sources? RSPM only downloads the packages that are explicitly listed without considering dependencies RSPM automatically resolves the dependencies for listed packages and includes them RSPM requires you to iterate and separately add each dependency to the package list Answer: RSPM automatically resolves the dependencies for listed packages and includes them How do you add new packages to a curated CRAN repository? You must create a new repository each time you want to add a new package You must create a new source each time you want to add a new package You can add new packages to a curated CRAN source at any time Answer: You can add new packages to a curated CRAN source at any time How often are updated packages made available in a curated CRAN repository? Each time the rspm update command is manually run Once every day at midnight On the same schedule as the CRAN metadata sync Answer: Each time the rspm update command is manually run Can you update a single package in a curated CRAN repository without updating the dependencies? Yes, you can specify a single package to update without affecting the dependencies No, RSPM will always resolve dependencies for all specified packages to avoid an invalid repository state Answer: No, RSPM will always resolve dependencies for all specified packages to avoid an invalid repository state Task: Add a Git repository Follow the documented steps for Serving Local Packages from Git to add a new repository that is subscribed to a source with packages from Git. Hint: You'll need to configure the version of R using the Server.RVersion option in the config file and then restart RSPM . Hint: Use the Git URL https://github.com/rstudio/shiny.git in the --git-url option in the rspm add command. The steps you will perform are outlined as follows: Create a new source for the packages from Git Add a Git endpoint to the newly created source Create a new repository for the packages from Git Subscribe the new repository to the Git-based source You can verify that the new repository has been configured correctly by running the following command: rspm list Which should include the following output: prod - Stable releases of our internal packages - prod-internal-src ( Git ) And you can verify the Git builder by running the following command: rspm list git-builders Which should include the following output: Git Builders: - shiny Source: prod-internal-src URL: https://github.com/rstudio/shiny.git Trigger: tags Key: none Navigate to the RSPM web interface in your browser and explore the newly created prod repository. After a few minutes, you should see the latest tagged release build of shiny in your prod repository. Quiz: Git source How can you configure the frequency at which RSPM checks Git repositories for package changes? By creating a cron job to check new Git commits By configuring your CI/CD system to poll RSPM By configuring the Git.PollInterval setting in the RSPM configuration options Answer: By configuring the Git.PollInterval setting in the RSPM configuration options","title":"7.2 Lab:  Using RStudio Package Manager Repositories"},{"location":"using_rstudio_package_manager/lab_using_rspm_repositories/#overview","text":"In the following exercises, you will: Add new repositories and sources for: Serving packages from CRAN Serving packages from curated CRAN Serving packages from Git Refer to the RSPM Documentation throughout the exercises, specifically the Getting Started: Configuration section.","title":"Overview"},{"location":"using_rstudio_package_manager/lab_using_rspm_repositories/#task-add-a-cran-repository","text":"Follow the documented steps for Serving CRAN Packages to add a new repository that is subscribed to the CRAN source. The steps you will perform are outlined as follows: Initiate a sync from the default CRAN source Create a new repository Subscribe the new repository to the default CRAN source You can verify that the new repository has been configured correctly by running: rspm list Which should include the following output: prod-cran - Access CRAN packages - cran ( CRAN )","title":"Task: Add a CRAN repository"},{"location":"using_rstudio_package_manager/lab_using_rspm_repositories/#task-explore-cran-repository","text":"Navigate to the RSPM web interface in your browser and view the newly created prod-cran repository. Search for the ggplot2 package and determine the following: The newest version of the package that is available The oldest version of the package that is available The license type for this package The command that R users can use to install the latest version of ggplot2 The command that R users can use to install version 2.2.0 of ggplot2 How many packages are imported and suggested by ggplot2","title":"Task: Explore CRAN repository"},{"location":"using_rstudio_package_manager/lab_using_rspm_repositories/#quiz-cran-source","text":"Which CRAN source does RStudio Package Manager download packages from? The CRAN mirror closest to my location Any available CRAN mirror The RStudio CRAN service ( https://rspm-sync.rstudio.com ) RSPM does not download packages from online sources Answer: The RStudio CRAN service ( https://rspm-sync.rstudio.com ) Is RStudio package manager configured for lazy or eager package downloading by default? Lazy - RSPM only downloads packages as they are requested Eager - RSPM downloads all packages in advance Answer: Lazy - RSPM only downloads packages as they are requested How often does RStudio Package Manager synchronize CRAN metadata by default? Never Once every hour Once every day at midnight Once every week on Sunday On the first day of each month Once every year on Jan 1 Answer: Once every day at midnight","title":"Quiz: CRAN source"},{"location":"using_rstudio_package_manager/lab_using_rspm_repositories/#task-add-a-curated-cran-repository","text":"Follow the documented steps for Serving a Subset of Approved CRAN Packages to add a new repository that is subscribed to a source of approved CRAN packages. Hint: You can also pass in the names of packages directly instead of creating a list of packages, as in: rspm add --packages 'plumber,shiny,ISLR' --source = subset --dryrun Hint: Re-use the transaction ID output from the rspm add command with --dryrun flag. The steps you will perform are outlined as follows: Create a list of packages Initiate a sync from the default CRAN source Create a new source for the approved packages Add the desired packages to the curated CRAN source View the list of proposed packages that will be added to the newly created source Add the proposed packages to the newly created source Create a new repository for the approved packages Subscribe the new repository to the default CRAN source You can verify that the new repository has been configured correctly by running: rspm list Which should include the following output: approved-cran - Approved packages from CRAN - subset ( Curated CRAN ) Navigate to the RSPM web interface in your browser and explore the newly created approved-cran repository.","title":"Task: Add a curated CRAN repository"},{"location":"using_rstudio_package_manager/lab_using_rspm_repositories/#quiz-curated-cran-source","text":"How does RSPM handle dependencies for curated CRAN sources? RSPM only downloads the packages that are explicitly listed without considering dependencies RSPM automatically resolves the dependencies for listed packages and includes them RSPM requires you to iterate and separately add each dependency to the package list Answer: RSPM automatically resolves the dependencies for listed packages and includes them How do you add new packages to a curated CRAN repository? You must create a new repository each time you want to add a new package You must create a new source each time you want to add a new package You can add new packages to a curated CRAN source at any time Answer: You can add new packages to a curated CRAN source at any time How often are updated packages made available in a curated CRAN repository? Each time the rspm update command is manually run Once every day at midnight On the same schedule as the CRAN metadata sync Answer: Each time the rspm update command is manually run Can you update a single package in a curated CRAN repository without updating the dependencies? Yes, you can specify a single package to update without affecting the dependencies No, RSPM will always resolve dependencies for all specified packages to avoid an invalid repository state Answer: No, RSPM will always resolve dependencies for all specified packages to avoid an invalid repository state","title":"Quiz: Curated CRAN source"},{"location":"using_rstudio_package_manager/lab_using_rspm_repositories/#task-add-a-git-repository","text":"Follow the documented steps for Serving Local Packages from Git to add a new repository that is subscribed to a source with packages from Git. Hint: You'll need to configure the version of R using the Server.RVersion option in the config file and then restart RSPM . Hint: Use the Git URL https://github.com/rstudio/shiny.git in the --git-url option in the rspm add command. The steps you will perform are outlined as follows: Create a new source for the packages from Git Add a Git endpoint to the newly created source Create a new repository for the packages from Git Subscribe the new repository to the Git-based source You can verify that the new repository has been configured correctly by running the following command: rspm list Which should include the following output: prod - Stable releases of our internal packages - prod-internal-src ( Git ) And you can verify the Git builder by running the following command: rspm list git-builders Which should include the following output: Git Builders: - shiny Source: prod-internal-src URL: https://github.com/rstudio/shiny.git Trigger: tags Key: none Navigate to the RSPM web interface in your browser and explore the newly created prod repository. After a few minutes, you should see the latest tagged release build of shiny in your prod repository.","title":"Task: Add a Git repository"},{"location":"using_rstudio_package_manager/lab_using_rspm_repositories/#quiz-git-source","text":"How can you configure the frequency at which RSPM checks Git repositories for package changes? By creating a cron job to check new Git commits By configuring your CI/CD system to poll RSPM By configuring the Git.PollInterval setting in the RSPM configuration options Answer: By configuring the Git.PollInterval setting in the RSPM configuration options","title":"Quiz: Git source"},{"location":"using_rstudio_package_manager/using_rspm_packages/","text":"Session overview In this session, you will: Learn about different methods for configuring package repositories in RStudio Configure RStudio Server Pro to point to RSPM package repository Course outline Workflow for using RStudio Package Manager: Administrator installs RSPM on a server Administrator performs configuration on RSPM server Administrator creates sources and repositories End users connect to repositories and download packages In this module: Administration uses End users local config of RStudio IDE / RStudio Server Pro Admin global config of RStudio IDE / RStudio Server Pro Publishing to RSC RSPM for end users RSPM for end users An administrator should work with end users to determine: Which RSPM repository they should use How they should configure and use repositories in their RStudio environments How to find and use the RSPM repository URL(s) Whether they want to use latest packages or fixed versions Whether they want to use binary or source versions Repositories in RStudio Package Manager are CRAN-like repositories, which means users can access and install packages using their regular R functions: install.packages() available.packages() packrat and renv devtools::install() ??? binaries currently only for Linux binary are best when RStudio binary R installation is used R 3.6 needs special treetment w.r.t. HTTP headers to make sure that the R version is present Connecting to RSPM repositories Information on connecting to repositories: From the RSPM web interface, select a repository Navigate to the Setup tab Follow the steps to configure their RStudio environments with RSPM Example: Using the latest packages from a repository: http://{RSTUDIO-PM-ADDRESS}/{REPO-NAME}/latest For example, http://rstudio-pm.company.com/prod-cran/latest Example: Using binary packages from a fixed version of a repository: http://{RSTUDIO-PM-ADDRESS}/{REPO-NAME}/__linux__/{LINUX-DIST}/{REPO-VERSION} For example, http://rstudio-pm.company.com/prod-cran/__linx__/binoic/131 {LINUX-DIST} is for the distribution on the server running RSP, not RSPM! Options for configuring repositories in RStudio RSPM provides building blocks for configuring repositories and accessing packages. There are a spectrum of options that range from: An administrator assembles all packages and sources into a single repository, then sets this as only global option in RStudio Server Pro An administrator configures multiple sources and repositories, then allows data scientists to set their own repositories as needed Repositories can be configured in RStudio in different ways, for example: For a single user - Using options() For a single user - Setting options() in .Rprofile For a single user - Setting repo(s) in RStudio IDE or RSP (RStudio 1.2+) For all users - Setting repo(s) in Rprofile.site For all users - Setting repo(s) in RSP rsession.conf globally Configuring RSP 1.1 with RSPM for a single user Steps for configuring RStudio Server Pro 1.1 with RSPM for a single user using .Rprofile : A sample .Rprofile file with two different package repositories: local ({ r <- getOption ( \"repos\" ) r [ \"CRAN\" ] <- \"https://cran.rstudio.com/\" r [ \"mycompany\" ] <- \"http://rpackages.mycompany.com/\" options ( repos = r ) }) More details on configuring RStudio for different repositories are provided in the documentation on Package management in RStudio Connect . You can also set this globally for all users with Rprofile.site . Or, you can set this for all users in the RStudio Server Pro configuration file, as shown in one of the following sections. Configuring RSP 1.2+ with RSPM for a single user Steps for configuring RStudio Server Pro 1.2+ with RSPM for a single user: In RStudio 1.2 or above, repository settings are configured through the Global Options menu available from the Tools section of the main toolbar. In the Packages submenu, copy the repository URL into the \"Primary CRAN repo\" field or click Add to include this repository as a secondary repo. Configuring RSP with RSPM for all users In the RStudio Server Pro configuration file, /etc/rstudio/rsession.conf : r-cran-repos = http:// { RSTUDIO-PM-ADDRESS } / { REPO-NAME } /latest Or for multiple repositories, use /etc/rstudio/repos.conf : CRAN = https://< { RSTUDIO-PM-ADDRESS } / { CRAN-REPO-NAME } /latest Internal = https:// { RSTUDIO-PM-ADDRESS } / { INTERNAL-REPO-NAME } /latest You can optionally discourage setting custom repositories in RStudio with the following setting in /etc/rstudio/rsession.conf : allow-r-cran-repos-edit = 0 More details on configuring RStudio Server Pro with RSPM are provided in the documentation on Configuring RStudio Server . Publishing projects to RStudio Connect If RStudio is configured with RSPM, then RStudio Connect will also retrieve packages from RSPM when a project is published. This means that the same versions of packages will be served from a centralized source (RSPM) whether users are working in development or publishing to production. Using RSPM with Docker for reproducibility Docker can play an important role in creating reproducible environments, but Docker alone is not sufficient to guarantee reproducibility. RUN Rscript -e 'install.packages(...)' Each time a Docker image is rebuilt, the R command to install packages is re-run, which can return different package versions and results over time. Instead, replace the install.packages(...) command with a variation that uses a fixed version of a repository in RStudio Package Manager. FROM ubuntu RUN apt-get install ... RUN R -e 'install.packages(repos = \"https://r-pkgs.example.com/cran/189\")' CMD <some process> Your turn Summary RStudio Package Manager summary RStudio Package Manager allow you to: Organize packages in a central repository Perform automatic versioning of the entire repository Track package usage statistics and metrics Integrates with R, RStudio Server Pro, and RStudio Connect Serve packages from CRAN Subset of CRAN packages Local packages Packages from Git Maintenance plan Verify and view repositories View package usage statistics Review package sync activity Explore package details and dependencies Inform users on how to get packages from RSPM Resources RSPM Product Information: https://www.rstudio.com/products/package-manager/ Download evaluation Two-page Overview Architecture video Support articles RSPM Documentation: https://docs.rstudio.com/rspm/admin/ RSPM Webinar: Introduction to RStudio Package Manager Resources (continued) FAQ: https://docs.rstudio.com/rspm/admin/frequently-asked-questions.html Support FAQ: https://support.rstudio.com/hc/en-us/sections/360001622693-RStudio-Package-Manager Support Articles: https://support.rstudio.com/hc/en-us/sections/360002093413-RStudio-Package-Manager Configuration and sizing recommendations: https://support.rstudio.com/hc/en-us/articles/115002344588-Configuration-and-sizing-recommendations Reproducing Environments: Strategies and Danger Zones Reproducing data science environments over time can be challenging, c.f. environments.rstudio.com RSPM helps to implement different strategies Validated: curated CRAN plus local packages fixed snapshot Shared Baseline: curated or full CRAN plus local packages fixed snapshot Snapshot curated or full CRAN plus local packages snapshots and \"latest\" Label Description Status Validated Admins test and approve a subset of CRAN TRUE Shared Baseline 'All or most of CRAN, updated with R versions, tied to a system library TRUE Wild West Open access, not reproducible, how we learn FALSE Snapshot Open access, user or system records per-project dependencies TRUE Blocked Backdoor package access, offline systems without a strategy FALSE Ticket System Admins involved, no testing, slow updates, high risk of breakage FALSE Your turn Next complete the exercise. Signs of success: You understand the different methods of configuring RStudio to access packages from different repositories You have RStudio Server Pro configured to obtain packages from RSPM","title":"7.3 Using RStudio Package Manager Packages"},{"location":"using_rstudio_package_manager/using_rspm_packages/#session-overview","text":"In this session, you will: Learn about different methods for configuring package repositories in RStudio Configure RStudio Server Pro to point to RSPM package repository","title":"Session overview"},{"location":"using_rstudio_package_manager/using_rspm_packages/#course-outline","text":"Workflow for using RStudio Package Manager: Administrator installs RSPM on a server Administrator performs configuration on RSPM server Administrator creates sources and repositories End users connect to repositories and download packages In this module: Administration uses End users local config of RStudio IDE / RStudio Server Pro Admin global config of RStudio IDE / RStudio Server Pro Publishing to RSC","title":"Course outline"},{"location":"using_rstudio_package_manager/using_rspm_packages/#rspm-for-end-users","text":"","title":"RSPM for end users"},{"location":"using_rstudio_package_manager/using_rspm_packages/#rspm-for-end-users_1","text":"An administrator should work with end users to determine: Which RSPM repository they should use How they should configure and use repositories in their RStudio environments How to find and use the RSPM repository URL(s) Whether they want to use latest packages or fixed versions Whether they want to use binary or source versions Repositories in RStudio Package Manager are CRAN-like repositories, which means users can access and install packages using their regular R functions: install.packages() available.packages() packrat and renv devtools::install() ??? binaries currently only for Linux binary are best when RStudio binary R installation is used R 3.6 needs special treetment w.r.t. HTTP headers to make sure that the R version is present","title":"RSPM for end users"},{"location":"using_rstudio_package_manager/using_rspm_packages/#connecting-to-rspm-repositories","text":"Information on connecting to repositories: From the RSPM web interface, select a repository Navigate to the Setup tab Follow the steps to configure their RStudio environments with RSPM Example: Using the latest packages from a repository: http://{RSTUDIO-PM-ADDRESS}/{REPO-NAME}/latest For example, http://rstudio-pm.company.com/prod-cran/latest Example: Using binary packages from a fixed version of a repository: http://{RSTUDIO-PM-ADDRESS}/{REPO-NAME}/__linux__/{LINUX-DIST}/{REPO-VERSION} For example, http://rstudio-pm.company.com/prod-cran/__linx__/binoic/131 {LINUX-DIST} is for the distribution on the server running RSP, not RSPM!","title":"Connecting to RSPM repositories"},{"location":"using_rstudio_package_manager/using_rspm_packages/#options-for-configuring-repositories-in-rstudio","text":"RSPM provides building blocks for configuring repositories and accessing packages. There are a spectrum of options that range from: An administrator assembles all packages and sources into a single repository, then sets this as only global option in RStudio Server Pro An administrator configures multiple sources and repositories, then allows data scientists to set their own repositories as needed Repositories can be configured in RStudio in different ways, for example: For a single user - Using options() For a single user - Setting options() in .Rprofile For a single user - Setting repo(s) in RStudio IDE or RSP (RStudio 1.2+) For all users - Setting repo(s) in Rprofile.site For all users - Setting repo(s) in RSP rsession.conf globally","title":"Options for configuring repositories in RStudio"},{"location":"using_rstudio_package_manager/using_rspm_packages/#configuring-rsp-11-with-rspm-for-a-single-user","text":"Steps for configuring RStudio Server Pro 1.1 with RSPM for a single user using .Rprofile : A sample .Rprofile file with two different package repositories: local ({ r <- getOption ( \"repos\" ) r [ \"CRAN\" ] <- \"https://cran.rstudio.com/\" r [ \"mycompany\" ] <- \"http://rpackages.mycompany.com/\" options ( repos = r ) }) More details on configuring RStudio for different repositories are provided in the documentation on Package management in RStudio Connect . You can also set this globally for all users with Rprofile.site . Or, you can set this for all users in the RStudio Server Pro configuration file, as shown in one of the following sections.","title":"Configuring RSP 1.1 with RSPM for a single user"},{"location":"using_rstudio_package_manager/using_rspm_packages/#configuring-rsp-12-with-rspm-for-a-single-user","text":"Steps for configuring RStudio Server Pro 1.2+ with RSPM for a single user: In RStudio 1.2 or above, repository settings are configured through the Global Options menu available from the Tools section of the main toolbar. In the Packages submenu, copy the repository URL into the \"Primary CRAN repo\" field or click Add to include this repository as a secondary repo.","title":"Configuring RSP 1.2+ with RSPM for a single user"},{"location":"using_rstudio_package_manager/using_rspm_packages/#configuring-rsp-with-rspm-for-all-users","text":"In the RStudio Server Pro configuration file, /etc/rstudio/rsession.conf : r-cran-repos = http:// { RSTUDIO-PM-ADDRESS } / { REPO-NAME } /latest Or for multiple repositories, use /etc/rstudio/repos.conf : CRAN = https://< { RSTUDIO-PM-ADDRESS } / { CRAN-REPO-NAME } /latest Internal = https:// { RSTUDIO-PM-ADDRESS } / { INTERNAL-REPO-NAME } /latest You can optionally discourage setting custom repositories in RStudio with the following setting in /etc/rstudio/rsession.conf : allow-r-cran-repos-edit = 0 More details on configuring RStudio Server Pro with RSPM are provided in the documentation on Configuring RStudio Server .","title":"Configuring RSP with RSPM for all users"},{"location":"using_rstudio_package_manager/using_rspm_packages/#publishing-projects-to-rstudio-connect","text":"If RStudio is configured with RSPM, then RStudio Connect will also retrieve packages from RSPM when a project is published. This means that the same versions of packages will be served from a centralized source (RSPM) whether users are working in development or publishing to production.","title":"Publishing projects to RStudio Connect"},{"location":"using_rstudio_package_manager/using_rspm_packages/#using-rspm-with-docker-for-reproducibility","text":"Docker can play an important role in creating reproducible environments, but Docker alone is not sufficient to guarantee reproducibility. RUN Rscript -e 'install.packages(...)' Each time a Docker image is rebuilt, the R command to install packages is re-run, which can return different package versions and results over time. Instead, replace the install.packages(...) command with a variation that uses a fixed version of a repository in RStudio Package Manager. FROM ubuntu RUN apt-get install ... RUN R -e 'install.packages(repos = \"https://r-pkgs.example.com/cran/189\")' CMD <some process>","title":"Using RSPM with Docker for reproducibility"},{"location":"using_rstudio_package_manager/using_rspm_packages/#your-turn","text":"","title":"Your turn"},{"location":"using_rstudio_package_manager/using_rspm_packages/#summary","text":"","title":"Summary"},{"location":"using_rstudio_package_manager/using_rspm_packages/#rstudio-package-manager-summary","text":"RStudio Package Manager allow you to: Organize packages in a central repository Perform automatic versioning of the entire repository Track package usage statistics and metrics Integrates with R, RStudio Server Pro, and RStudio Connect Serve packages from CRAN Subset of CRAN packages Local packages Packages from Git","title":"RStudio Package Manager summary"},{"location":"using_rstudio_package_manager/using_rspm_packages/#maintenance-plan","text":"Verify and view repositories View package usage statistics Review package sync activity Explore package details and dependencies Inform users on how to get packages from RSPM","title":"Maintenance plan"},{"location":"using_rstudio_package_manager/using_rspm_packages/#resources","text":"RSPM Product Information: https://www.rstudio.com/products/package-manager/ Download evaluation Two-page Overview Architecture video Support articles RSPM Documentation: https://docs.rstudio.com/rspm/admin/ RSPM Webinar: Introduction to RStudio Package Manager","title":"Resources"},{"location":"using_rstudio_package_manager/using_rspm_packages/#resources-continued","text":"FAQ: https://docs.rstudio.com/rspm/admin/frequently-asked-questions.html Support FAQ: https://support.rstudio.com/hc/en-us/sections/360001622693-RStudio-Package-Manager Support Articles: https://support.rstudio.com/hc/en-us/sections/360002093413-RStudio-Package-Manager Configuration and sizing recommendations: https://support.rstudio.com/hc/en-us/articles/115002344588-Configuration-and-sizing-recommendations","title":"Resources (continued)"},{"location":"using_rstudio_package_manager/using_rspm_packages/#reproducing-environments-strategies-and-danger-zones","text":"Reproducing data science environments over time can be challenging, c.f. environments.rstudio.com RSPM helps to implement different strategies Validated: curated CRAN plus local packages fixed snapshot Shared Baseline: curated or full CRAN plus local packages fixed snapshot Snapshot curated or full CRAN plus local packages snapshots and \"latest\" Label Description Status Validated Admins test and approve a subset of CRAN TRUE Shared Baseline 'All or most of CRAN, updated with R versions, tied to a system library TRUE Wild West Open access, not reproducible, how we learn FALSE Snapshot Open access, user or system records per-project dependencies TRUE Blocked Backdoor package access, offline systems without a strategy FALSE Ticket System Admins involved, no testing, slow updates, high risk of breakage FALSE","title":"Reproducing Environments: Strategies and Danger Zones"},{"location":"using_rstudio_package_manager/using_rspm_packages/#your-turn_1","text":"Next complete the exercise. Signs of success: You understand the different methods of configuring RStudio to access packages from different repositories You have RStudio Server Pro configured to obtain packages from RSPM","title":"Your turn"},{"location":"using_rstudio_package_manager/using_rspm_repositories/","text":"Session overview In this session, you will: Learn about different package sources and repositories available in RSPM Configure different sources in RSPM Configure multiple repositories in RSPM Course outline Workflow for using RStudio Package Manager: Administrator installs RSPM on a server Administrator performs configuration on RSPM server Administrator creates sources and repositories End users connect to repositories and download packages In this module: Administering RSPM via the CLI and web interface Different types of sources in RSPM Repository configurations in RSPM Administering RSPM Administering RSPM From the CLI, you can: Initiate CRAN metadata sync Add sources and repositories Configure different methods of serving packages Configure server settings From the web interface, you can: Verify and view repositories Explore package details and dependencies View package usage Inform users on how to get packages from RSPM Different types of sources in RSPM Single source and single repository Package sources can be one of the following types: cran , curated cran , local , git Package repositories use a database and specialized web server to handle HTTP requests from R and serve a source package, archived source package, or PACKAGES file. More details on repositories and sources are provided in the documentation on Repositories and Sources . Multiple sources and single repository The order of source subscriptions is important and determines the precedence in which packages will be served The order of sources within a repository can be changed using the rspm reorder command. For repositories with multiple sources, RSPM will show which source a package came from. Multiple sources and multiple repositories Configuring sources Configuration quickstarts: Serving CRAN Packages Serving Local Packages Serving Local Packages from Git Serving CRAN and Local Packages Supplementing CRAN with Bleeding Edge Packages from GitHub Serving an Approved Subset of CRAN Serving an Approved Subset of CRAN and Local Packages All of these configuration scenarios are described in the documentation on Get Started - Configuration . Repository configurations in RSPM Serving CRAN packages A common use case for RStudio Package Manager is making CRAN packages available in environments with restricted internet access and tracking package usage statistics. The CRAN source is included as an internal source by default. The sync mode is configured to lazy downloads by default, but the CRAN.SyncMode property the RSPM configuration file and can be set to eager downloads for eager package fetching. The CRAN source is updated according to a the CRAN.SyncSchedule property. By default, RSPM will sync once a day at midnight (in the server\u2019s timezone). Serving a subset of CRAN packages A curated CRAN source enables administrators to give access to an approved list of CRAN packages using change management to preview changes, add new packages, and run updates. The required dependencies for the specified packages are automatically discovered and included in the repository. Serving local packages Many teams have a handful of internally built packages. You can create a bundled version of each package and copy the resulting package files to the RStudio Package Manager server. RStudio Package Manager will ensure that the latest version is the default package version that is available But will keep older versions available in the repository's archive for users who want to use specific versions. Serving packages from Git Serving packages from a local source requires manual steps to add and update bundled versions of packages. If your organization uses Git to store internal R packages, you can automate this process using a git source. More details on building R packages from Git are provided in the documentation on Building R Packages . Your turn Next complete the exercise. Signs of success: You understand the different types of sources and repositories available in RSPM Your RSPM instance is configured with repositories and packages from multiple sources","title":"7.1 Using RStudio Package Manager Repositories"},{"location":"using_rstudio_package_manager/using_rspm_repositories/#session-overview","text":"In this session, you will: Learn about different package sources and repositories available in RSPM Configure different sources in RSPM Configure multiple repositories in RSPM","title":"Session overview"},{"location":"using_rstudio_package_manager/using_rspm_repositories/#course-outline","text":"Workflow for using RStudio Package Manager: Administrator installs RSPM on a server Administrator performs configuration on RSPM server Administrator creates sources and repositories End users connect to repositories and download packages In this module: Administering RSPM via the CLI and web interface Different types of sources in RSPM Repository configurations in RSPM","title":"Course outline"},{"location":"using_rstudio_package_manager/using_rspm_repositories/#administering-rspm","text":"","title":"Administering RSPM"},{"location":"using_rstudio_package_manager/using_rspm_repositories/#administering-rspm_1","text":"From the CLI, you can: Initiate CRAN metadata sync Add sources and repositories Configure different methods of serving packages Configure server settings From the web interface, you can: Verify and view repositories Explore package details and dependencies View package usage Inform users on how to get packages from RSPM","title":"Administering RSPM"},{"location":"using_rstudio_package_manager/using_rspm_repositories/#different-types-of-sources-in-rspm","text":"","title":"Different types of sources in RSPM"},{"location":"using_rstudio_package_manager/using_rspm_repositories/#single-source-and-single-repository","text":"Package sources can be one of the following types: cran , curated cran , local , git Package repositories use a database and specialized web server to handle HTTP requests from R and serve a source package, archived source package, or PACKAGES file. More details on repositories and sources are provided in the documentation on Repositories and Sources .","title":"Single source and single repository"},{"location":"using_rstudio_package_manager/using_rspm_repositories/#multiple-sources-and-single-repository","text":"The order of source subscriptions is important and determines the precedence in which packages will be served The order of sources within a repository can be changed using the rspm reorder command. For repositories with multiple sources, RSPM will show which source a package came from.","title":"Multiple sources and single repository"},{"location":"using_rstudio_package_manager/using_rspm_repositories/#multiple-sources-and-multiple-repositories","text":"","title":"Multiple sources and multiple repositories"},{"location":"using_rstudio_package_manager/using_rspm_repositories/#configuring-sources","text":"Configuration quickstarts: Serving CRAN Packages Serving Local Packages Serving Local Packages from Git Serving CRAN and Local Packages Supplementing CRAN with Bleeding Edge Packages from GitHub Serving an Approved Subset of CRAN Serving an Approved Subset of CRAN and Local Packages All of these configuration scenarios are described in the documentation on Get Started - Configuration .","title":"Configuring sources"},{"location":"using_rstudio_package_manager/using_rspm_repositories/#repository-configurations-in-rspm","text":"","title":"Repository configurations in RSPM"},{"location":"using_rstudio_package_manager/using_rspm_repositories/#serving-cran-packages","text":"A common use case for RStudio Package Manager is making CRAN packages available in environments with restricted internet access and tracking package usage statistics. The CRAN source is included as an internal source by default. The sync mode is configured to lazy downloads by default, but the CRAN.SyncMode property the RSPM configuration file and can be set to eager downloads for eager package fetching. The CRAN source is updated according to a the CRAN.SyncSchedule property. By default, RSPM will sync once a day at midnight (in the server\u2019s timezone).","title":"Serving CRAN packages"},{"location":"using_rstudio_package_manager/using_rspm_repositories/#serving-a-subset-of-cran-packages","text":"A curated CRAN source enables administrators to give access to an approved list of CRAN packages using change management to preview changes, add new packages, and run updates. The required dependencies for the specified packages are automatically discovered and included in the repository.","title":"Serving a subset of CRAN packages"},{"location":"using_rstudio_package_manager/using_rspm_repositories/#serving-local-packages","text":"Many teams have a handful of internally built packages. You can create a bundled version of each package and copy the resulting package files to the RStudio Package Manager server. RStudio Package Manager will ensure that the latest version is the default package version that is available But will keep older versions available in the repository's archive for users who want to use specific versions.","title":"Serving local packages"},{"location":"using_rstudio_package_manager/using_rspm_repositories/#serving-packages-from-git","text":"Serving packages from a local source requires manual steps to add and update bundled versions of packages. If your organization uses Git to store internal R packages, you can automate this process using a git source. More details on building R packages from Git are provided in the documentation on Building R Packages .","title":"Serving packages from Git"},{"location":"using_rstudio_package_manager/using_rspm_repositories/#your-turn","text":"Next complete the exercise. Signs of success: You understand the different types of sources and repositories available in RSPM Your RSPM instance is configured with repositories and packages from multiple sources","title":"Your turn"}]}